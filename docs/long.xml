<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>planet davorg</title>
  <link rel="alternate" href="https://davorg.theplanetarium.org/" type="text/html"/>
  <subtitle>Aggregating Dave's stuff</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2023-06-06T06:03:50Z</updated>
  <link rel="self" href="https://davorg.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://davorg.theplanetarium.org/</id>
  <entry>
    <title>Mission (Almost) Accomplished</title>
    <link rel="alternate" href="https://perlhacks.com/2023/05/mission-almost-accomplished/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>[This post might sound like I’m angry at people making it hard to make progress on some things. That’s not the case at all. I realise completely that people have limited time and they get to choose how they spend it. If people are too busy elsewhere or have moved on to other projects then that’s just how it is and we need to deal with that the best we can.]</p>
<p>Back in December 2020, I <a href="https://dev.to/davorg/the-story-behind-a-new-module-2gkp">wrote a blog post</a> about how I wanted to fix a long-standing problem with <a href="https://dev.to/davorg/the-story-behind-a-new-module-2gkp">App::HTTPThis</a>. I’m happy to report that two and a half years later, the problem has been fixed.</p>
<p>To summarise my previous blog post:</p>
<ul>
<li>App::HTTPThis allows you to run a tiny web server that will serve the contents of a directory over HTTP. But, unfortunately, it doesn’t support default pages like “index.html”.</li>
<li>App::HTTPThis uses <a href="https://metacpan.org/pod/Plack::App::Directory">Plack::App::Directory</a> (which is part of the <a href="https://metacpan.org/pod/Plack">Plack</a> distribution) to do the work – so it’s that which actually doesn’t support “index.html”.</li>
<li>People suggested <a href="https://metacpan.org/pod/Plack::Middleware::DirIndex">Plack::Middleware::DirIndex</a>, but that also didn’t quite do the right thing.</li>
<li>I submitted <a href="https://github.com/plack/Plack/pull/654">a pull request on Plack::App::Directory</a> to add support for “index.html”.</li>
<li>I wrote a new module called <a href="https://metacpan.org/pod/Plack::App::DirectoryIndex">Plack::App::DirectoryIndex</a> which was like Plack::App::Directory but with added support for “index.html”.</li>
<li>I submitted a pull request on App::HTTPThis to use my module in place of Plack::App::Directory.</li>
</ul>
<p>Now read on…</p>
<p>Both of my pull requests went unactioned for months. In the end, I decided to approach the Perl modules list to ask if I could get co-maintainer permission on App::HTTPThis (it looked like the original maintainer had lost interest – there hadn’t been a release since 2010). When I heard nothing back, I put the project to one side only occasionally returning to add a new comment on my two pull requests.</p>
<p>Then last month I decided I’d have another go at getting co-maintainer permissions. This time it worked and, earlier this week, I got an email from Neil Bowers saying that the previous maintainer had agreed to give me permission and that I could now upload the module to CPAN.</p>
<p>At that point, I realised that the release mechanism for the module was based on Dist::Zilla and also that fashions in the Dist::Zilla world had changed since App::HTTPThis had last been released. This meant that many of the plugins used had been deprecated and I had to <a href="https://github.com/davorg/app-htttpthis/commit/9bdc04fcf80e3ec1c606867d0a6d56794506684b">do a bit of work</a> to even release the module (which led to <a href="https://www.reddit.com/r/perl/comments/13ib46n/distzilla_considered_annoying/">a small rant on Reddit</a>).</p>
<p>But I managed to release <a href="https://metacpan.org/release/DAVECROSS/App-HTTPThis-0.003/view/lib/App/HTTPThis.pm">version 0.003</a> to CPAN. Only to realise very soon afterwards that my Dist::Zilla-wrangling had missed an important fix. <a href="https://github.com/davorg/app-htttpthis/commit/57e29f304e2aef1601f54886b25ec8a9bb0d05d6">I fixed that</a> and released version 0.004.</p>
<p>I then got an email from PAUSE telling me that I didn’t have permission to release the module. It seems this was <a href="https://github.com/andk/pause/issues/372#issuecomment-1548519281">a known PAUSE bug</a> and Neil was able to apply a workaround for me. I was able to release <a href="https://metacpan.org/release/DAVECROSS/App-HTTPThis-0.004/view/lib/App/HTTPThis.pm">version 0.004</a>.</p>
<p class="">All of which means I now have a version of App::HTTPThis (and its included program, <a href="https://metacpan.org/release/DAVECROSS/App-HTTPThis-0.004/view/bin/http_this">http_this</a>) which supports default pages. You just have to type, for example:</p>
<p/><pre class="urvanov-syntax-highlighter-plain-tag">$ http_this --autoindex .</pre><p>And the current directory will be served over HTTP. Also (and this is the important bit!) if you have a file called “index.html” then that will be used instead of the server displaying a directory listing. It’s a tiny improvement, but one that will be very useful to me. And well worth the two and a half years I’ve invested in getting it released.</p>
<p>So why do I say that the mission is only “almost” completed? Well, there’s still that outstanding pull request on Plack::App::Directory. If that ever gets applied, I’ll remove Plack::App::DirectoryIndex from App::HTTPThis (and mark it as deprecated on CPAN).</p>
<p>This is, of course, a supremely unimportant fix in the grand scheme of things. But I think it illustrates an important issue that the Perl community should be thinking about. The community is shrinking. Or, at least, the part of the community that supports CPAN modules and runs our important infrastructure is shrinking. CPAN is full of modules that are now unsupported. I’ve lost count of the number of bugs I’ve reported or patches I’ve supplied that have been ignored because the module author is no longer interested. In some cases, I’ve taken over the module myself, but that’s not a scalable solution. Honestly, I don’t know what it is. But I do think that relying on CPAN modules has got harder over the last few years. And it’s not going to get easier any time soon.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/05/mission-almost-accomplished/">Mission (Almost) Accomplished</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>[This post might sound like I’m angry at people making it hard to make progress on some things. That’s not the case at all. I realise completely that people have limited time and they get to choose how they spend it. If people are too busy elsewhere or have moved on to other projects then… <a class="more-link" href="https://perlhacks.com/2023/05/mission-almost-accomplished/">Continue reading <span class="screen-reader-text">Mission (Almost) Accomplished</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/05/mission-almost-accomplished/">Mission (Almost) Accomplished</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2108</id>
    <published>2023-05-17T16:48:28Z</published>
    <updated>2023-05-17T16:48:28Z</updated>
    <category term="CPAN"/>
    <category term="abandonware"/>
    <category term="cpan"/>
    <category term="http_this"/>
    <category term="support"/>
  </entry>
  <entry>
    <title>Mission (Almost) Accomplished</title>
    <link rel="alternate" href="https://dev.to/davorg/mission-almost-accomplished-3ccg" type="text/html"/>
    <content type="html">&lt;p&gt;[This post might sound like I’m angry at people making it hard to make progress on some things. That’s not the case at all. I realise completely that people have limited time and they get to choose how they spend it. If people are too busy elsewhere or have moved on to other projects then that’s just how it is and we need to deal with that the best we can.]&lt;/p&gt;

&lt;p&gt;Back in December 2020, I &lt;a href="https://dev.to/davorg/the-story-behind-a-new-module-2gkp"&gt;wrote a blog post&lt;/a&gt; about how I wanted to fix a long-standing problem with &lt;a href="https://dev.to/davorg/the-story-behind-a-new-module-2gkp"&gt;App::HTTPThis&lt;/a&gt;. I’m happy to report that two and a half years later, the problem has been fixed.&lt;/p&gt;

&lt;p&gt;To summarise my previous blog post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App::HTTPThis allows you to run a tiny web server that will serve the contents of a directory over HTTP. But, unfortunately, it doesn’t support default pages like “index.html”.&lt;/li&gt;
&lt;li&gt;App::HTTPThis uses &lt;a href="https://metacpan.org/pod/Plack::App::Directory"&gt;Plack::App::Directory&lt;/a&gt; (which is part of the &lt;a href="https://metacpan.org/pod/Plack"&gt;Plack&lt;/a&gt; distribution) to do the work – so it’s that which actually doesn’t support “index.html”.&lt;/li&gt;
&lt;li&gt;People suggested &lt;a href="https://metacpan.org/pod/Plack::Middleware::DirIndex"&gt;Plack::Middleware::DirIndex&lt;/a&gt;, but that also didn’t quite do the right thing.&lt;/li&gt;
&lt;li&gt;I submitted &lt;a href="https://github.com/plack/Plack/pull/654"&gt;a pull request on Plack::App::Directory&lt;/a&gt; to add support for “index.html”.&lt;/li&gt;
&lt;li&gt;I wrote a new module called &lt;a href="https://metacpan.org/pod/Plack::App::DirectoryIndex"&gt;Plack::App::DirectoryIndex&lt;/a&gt; which was like Plack::App::Directory but with added support for “index.html”.&lt;/li&gt;
&lt;li&gt;I submitted a pull request on App::HTTPThis to use my module in place of Plack::App::Directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now read on…&lt;/p&gt;

&lt;p&gt;Both of my pull requests went unactioned for months. In the end, I decided to approach the Perl modules list to ask if I could get co-maintainer permission on App::HTTPThis (it looked like the original maintainer had lost interest – there hadn’t been a release since 2010). When I heard nothing back, I put the project to one side only occasionally returning to add a new comment on my two pull requests.&lt;/p&gt;

&lt;p&gt;Then last month I decided I’d have another go at getting co-maintainer permissions. This time it worked and, earlier this week, I got an email from Neil Bowers saying that the previous maintainer had agreed to give me permission and that I could now upload the module to CPAN.&lt;/p&gt;

&lt;p&gt;At that point, I realised that the release mechanism for the module was based on Dist::Zilla and also that fashions in the Dist::Zilla world had changed since App::HTTPThis had last been released. This meant that many of the plugins used had been deprecated and I had to &lt;a href="https://github.com/davorg/app-htttpthis/commit/9bdc04fcf80e3ec1c606867d0a6d56794506684b"&gt;do a bit of work&lt;/a&gt; to even release the module (which led to &lt;a href="https://www.reddit.com/r/perl/comments/13ib46n/distzilla_considered_annoying/"&gt;a small rant on Reddit&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But I managed to release &lt;a href="https://metacpan.org/release/DAVECROSS/App-HTTPThis-0.003/view/lib/App/HTTPThis.pm"&gt;version 0.003&lt;/a&gt; to CPAN. Only to realise very soon afterwards that my Dist::Zilla-wrangling had missed an important fix. &lt;a href="https://github.com/davorg/app-htttpthis/commit/57e29f304e2aef1601f54886b25ec8a9bb0d05d6"&gt;I fixed that&lt;/a&gt; and released version 0.004.&lt;/p&gt;

&lt;p&gt;I then got an email from PAUSE telling me that I didn’t have permission to release the module. It seems this was &lt;a href="https://github.com/andk/pause/issues/372#issuecomment-1548519281"&gt;a known PAUSE bug&lt;/a&gt; and Neil was able to apply a workaround for me. I was able to release &lt;a href="https://metacpan.org/release/DAVECROSS/App-HTTPThis-0.004/view/lib/App/HTTPThis.pm"&gt;version 0.004&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All of which means I now have a version of App::HTTPThis (and its included program, &lt;a href="https://metacpan.org/release/DAVECROSS/App-HTTPThis-0.004/view/bin/http_this"&gt;http_this&lt;/a&gt;) which supports default pages. You just have to type, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ http_this --autoindex .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the current directory will be served over HTTP. Also (and this is the important bit!) if you have a file called “index.html” then that will be used instead of the server displaying a directory listing. It’s a tiny improvement, but one that will be very useful to me. And well worth the two and a half years I’ve invested in getting it released.&lt;/p&gt;

&lt;p&gt;So why do I say that the mission is only “almost” completed? Well, there’s still that outstanding pull request on Plack::App::Directory. If that ever gets applied, I’ll remove Plack::App::DirectoryIndex from App::HTTPThis (and mark it as deprecated on CPAN).&lt;/p&gt;

&lt;p&gt;This is, of course, a supremely unimportant fix in the grand scheme of things. But I think it illustrates an important issue that the Perl community should be thinking about. The community is shrinking. Or, at least, the part of the community that supports CPAN modules and runs our important infrastructure is shrinking. CPAN is full of modules that are now unsupported. I’ve lost count of the number of bugs I’ve reported or patches I’ve supplied that have been ignored because the module author is no longer interested. In some cases, I’ve taken over the module myself, but that’s not a scalable solution. Honestly, I don’t know what it is. But I do think that relying on CPAN modules has got harder over the last few years. And it’s not going to get easier any time soon.&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://perlhacks.com/2023/05/mission-almost-accomplished/"&gt;Mission (Almost) Accomplished&lt;/a&gt; appeared first on &lt;a href="https://perlhacks.com"&gt;Perl Hacks&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/mission-almost-accomplished-3ccg</id>
    <published>2023-05-17T16:48:28Z</published>
    <updated>2023-05-17T16:48:28Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="abandonware"/>
    <category term="httpthis"/>
  </entry>
  <entry>
    <title>Seventy Years of Change — Line of Succession Blog</title>
    <link rel="alternate" href="https://medium.com/line-of-succession/seventy-years-of-change-line-of-succession-blog-c2bfe6c8f3a8?source=rss-3781feb8a4f4------2" type="text/html"/>
    <content type="html">&lt;h3&gt;Seventy Years of Change&lt;/h3&gt;&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/650/0*4j8pPnverV8TTBnA.jpg" /&gt;&lt;/figure&gt;&lt;p&gt;Her Majesty has, of course, seen changes in many areas of society in the seventy years of her reign. But here, we’re most interested in the line of succession. So we thought it would be interesting to look at &lt;a href="https://lineofsuccession.co.uk/1952-02-06"&gt;the line of succession on the day that she took the throne&lt;/a&gt; and see what had happened to the people who were at the top of the line of succession on that day. It’s &lt;a href="https://lineofsuccession.co.uk/"&gt;a very different list to today’s&lt;/a&gt;.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/27d228-the-prince-charles-prince-of-wales"&gt;The Prince Charles, Duke of Cornwall&lt;/a&gt;&lt;br&gt;We start with the one person who is in exactly the same place as he was seventy years ago. Prince Charles was three years old and hadn’t yet been made Prince of Wales.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/b3fcb1-the-princess-anne-princess-royal"&gt;The Princess Anne&lt;/a&gt;&lt;br&gt;Princess Anne has fallen a long way in seventy years. The birth of younger brothers (back in the days when sex mattered in the line of succession) and those brothers having families of their own mean that she is now down at number 17.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/fbb68c-the-princess-margaret-countess-of-snowdon"&gt;Princess Margaret&lt;/a&gt;&lt;br&gt;We’ve run out of the Queen’s descendants after only two places (today, they fill the top 24 places in the line) so we move to her sister. Princess Margaret had fallen to 11th place before her death in 2002.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/d7f62e-the-prince-henry-duke-of-gloucester"&gt;Prince Henry, Duke of Gloucester&lt;/a&gt;&lt;br&gt;We’ve now run out of descendants of George VI, so we need to look at his brothers. This is the father of the current duke. He fell to 8th place before dying in 1974.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/8cb063-prince-william-of-gloucester"&gt;Prince William of Gloucester&lt;/a&gt;&lt;br&gt;The Duke of Gloucester’s eldest son had fallen to position 9 before sadly dying before his father in 1972.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/48a2e0-prince-richard-the-duke-of-gloucester"&gt;Prince Richard of Gloucester&lt;/a&gt;&lt;br&gt;As his eldest son predeceased their father, it was Prince Richard who became Duke of Gloucester when the first duke died in 1974. He is currently in 30th place.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/5a8417-prince-edward-duke-of-kent"&gt;Prince Edward, Duke of Kent&lt;/a&gt;&lt;br&gt;The first Duke of Kent had died ten years earlier, so it was his son, Prince Edward, who held the title, at the age of 16, who was duke in 1952, He fell out of the top 30 in 2012.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/8c9114-prince-michael-of-kent"&gt;Prince Michael of Kent&lt;/a&gt;&lt;br&gt;Prince Michael had fallen to 16th place before his marriage to a Catholic, in 1978, excluded him from the line of succession. He was reinstated in 2015 (because the Succession to the Crown Act meant that marriage to a Catholic was no longer a reason for exclusion) but he reappeared outside of the top 30.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/67541e-princess-alexandra-lady-ogilvy"&gt;Princess Alexandra of Kent&lt;/a&gt;&lt;br&gt;Princess Alexandra had dropped down the list pretty consistently throughout her life. From 1999 she popped in and out of the top 30 a few times. but she left it for the last time in 2003.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/1dc75a-the-princess-mary-princess-royal"&gt;Princess Mary, Princess Royal&lt;/a&gt;&lt;br&gt;The youngest child and only daughter of George V, Princess Mary had called to 17th in line before she died in 1965.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/1b0e5b-george-lascelles-the-7th-earl-of-harewood"&gt;George Lascelles, The 7th Earl of Harewood&lt;/a&gt;&lt;br&gt;Fell out of the top 30 in 1994 before dying in 2011.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/c5f1e6-david-lascelles-the-8th-earl-of-harewood"&gt;David Lascelles, Viscount Lascelles&lt;/a&gt;&lt;br&gt;Fell out of the top 30 in 1993.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/b20846-gerald-lascelles"&gt;Gerald Lascelles&lt;/a&gt;&lt;br&gt;Fell out of the top 30 in 1982 and died in 1998.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/66315a-princess-arthur-of-connaught-duchess-of-fife"&gt;Princess Arthur of Connaught, Duchess of Fife&lt;/a&gt;&lt;br&gt;Fell to 17th before dying in 1959&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/6b26f1-james-carnegie-3rd-duke-of-fife"&gt;James Carnegie, 3rd Duke of Fife&lt;/a&gt;&lt;br&gt;Fell out of the top 30 in 1981 and died in 2015&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/2fede5-olaf-v-king-of-norway"&gt;Olaf V, King of Norway&lt;/a&gt;&lt;br&gt;A bit of a leap as we find the royal family of Norway surprisingly close to the top of the list. King Olaf was a grandson of Edward VII (through Edward’s daughter Maud). He fell out of the top 30 in 1979 and died in 1991.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/5e0755-harald-v-king-of-norway"&gt;Prince Harald of Norway&lt;/a&gt;&lt;br&gt;Prince Harald became king of Norway in 1991. He fell out of the top 30 of the British line of succession in 1977.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/d7a42c-princess-ragnhild-of-norway"&gt;Princess Ragnhild of Norway&lt;/a&gt;&lt;br&gt;Princess Ragnhild fell out of the top 30 in 1973 and died in 2012.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/1f2fa6-princess-astrid-of-norway"&gt;Princess Astrid of Norway&lt;/a&gt;&lt;br&gt;Princess Astrid fell out of the top 30 in 1964.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/eae275-carol-ii-of-romania"&gt;Carol II of Romania&lt;/a&gt;&lt;br&gt;The next-closest royal family to ours is the Romanians. Carol II was a great-grandson of Victoria. The death of George VI moved him up a place from 21 to 20 and he remained there until his death the following year. Carol hadn’t actually been King of Romania since he was forced to abdicate in 1940.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/0e80c9-carol-lambrino"&gt;Carol Lambrino&lt;/a&gt;&lt;br&gt;The question of Carol Lambino’s legitimacy is a question of some dispute — so he may not have been on the line of succession at all. But, if he was, he fell out of the top 30 in 1963 and died in 2006.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/cf9743-paul-philippe-hohenzollern"&gt;Paul-Philippe Hohenzollern&lt;/a&gt;&lt;br&gt;As son of the possibly-illegitimate Carol Lambino, Paul-Phillippe’s place in the line of succession is also in question. But, anyway, he fell out of the top 30 in 1962.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/128a10-prince-nicholas-of-romania"&gt;Prince Nicholas of Romania&lt;/a&gt;&lt;br&gt;Prince Nicholas fell out of the top 30 in 1961 and died in 1978.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/289620-elisabeth-of-romania"&gt;Elisabeth of Romania&lt;/a&gt;&lt;br&gt;Fell to number 27 before dying in 1956.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/b422b8-maria-of-yugoslavia"&gt;Maria of Yugoslavia&lt;/a&gt;&lt;br&gt;Fell to position 30 before dying in 1961.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/ef1b58-peter-ii-of-yugoslavia"&gt;Peter II of Yugoslavia&lt;/a&gt;&lt;br&gt;Peter was no longer King of Yugoslavia, having been deposed in 1945. He fell out of the top 30 in 1961 and died in 1970.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/902052-prince-tomislav-of-yugoslavia"&gt;Prince Tomislav of Yugoslavia&lt;/a&gt;&lt;br&gt;Fell out of the top 30 in 1960 and died in 2000.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/96d8cb-prince-andrew-of-yugoslavia"&gt;Prince Andrew of Yugoslavia&lt;/a&gt;&lt;br&gt;Fell out of the top 30 in 1959 and died in 1990.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/92f66c-princess-ileana-of-romania"&gt;Princess Ileana of Romania&lt;/a&gt;&lt;br&gt;Fell out of the top 30 in 1954 and died in 1991.&lt;/li&gt;&lt;li&gt;&lt;a href="https://lineofsuccession.co.uk/p/7707ae-archduke-stefan-of-austria"&gt;Archduke Stefan of Austria&lt;/a&gt;&lt;br&gt;Fell out of the top 30 in 1953 and died in 1998.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I think that’s an interesting list for a few reasons:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The fact that we’ve gone from two of the Queen’s descendants to twenty-four of them on the list (but even that’s not as big a difference as &lt;a href="https://blog.lineofsuccession.co.uk/2018/04/line-of-descendants/"&gt;happened during Victoria’s reign&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Only ten of the people on the list are still living.&lt;/li&gt;&lt;li&gt;There’s a large number of foreign royalty on the list — basically, the second half of the list is taken up by members of the royal families of Norway, Romania and Yugoslavia. This is obviously because of the way that royal families inter-married up until early in the 20th century. We see far less of that now.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So what do you think? Was the 1952 list a surprise to you? Did you expect it to be as different as it is from the current list?&lt;/p&gt;&lt;p&gt;&lt;em&gt;Originally published at &lt;/em&gt;&lt;a href="https://blog.lineofsuccession.co.uk/2022/02/seventy-years-of-change/"&gt;&lt;em&gt;https://blog.lineofsuccession.co.uk&lt;/em&gt;&lt;/a&gt;&lt;em&gt; on February 7, 2022.&lt;/em&gt;&lt;/p&gt;&lt;img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c2bfe6c8f3a8" width="1" height="1" alt=""&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://medium.com/line-of-succession/seventy-years-of-change-line-of-succession-blog-c2bfe6c8f3a8"&gt;Seventy Years of Change — Line of Succession Blog&lt;/a&gt; was originally published in &lt;a href="https://medium.com/line-of-succession"&gt;Line of Succession&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://medium.com/p/c2bfe6c8f3a8</id>
    <published>2022-02-07T10:56:31Z</published>
    <updated>2023-05-07T11:50:26.361000Z</updated>
    <category term="platinum-jubilee"/>
    <category term="1952"/>
    <category term="history"/>
    <category term="succession"/>
  </entry>
  <entry>
    <title>Where does royal power come from? — Line of Succession Blog</title>
    <link rel="alternate" href="https://medium.com/line-of-succession/where-does-royal-power-come-from-line-of-succession-blog-d198202a2b08?source=rss-3781feb8a4f4------2" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/line-of-succession/where-does-royal-power-come-from-line-of-succession-blog-d198202a2b08?source=rss-3781feb8a4f4------2"&gt;&lt;img src="https://cdn-images-1.medium.com/max/976/1*KKO49e41S6k1GpOA7VGnvw.png" width="976"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Yesterday&amp;#x2019;s coronation showed Britain doing what Britain does best&amp;#x200A;&amp;#x2014;&amp;#x200A;putting on the most gloriously bonkers ceremony the world has seen&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/line-of-succession/where-does-royal-power-come-from-line-of-succession-blog-d198202a2b08?source=rss-3781feb8a4f4------2"&gt;Continue reading on Line of Succession »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://medium.com/p/d198202a2b08</id>
    <published>2023-05-07T11:45:59Z</published>
    <updated>2023-05-07T11:50:04.656000Z</updated>
    <category term="coronation"/>
    <category term="church-of-england"/>
    <category term="disestablishment"/>
    <category term="royal-family"/>
    <category term="charles-iii"/>
  </entry>
  <entry>
    <title>Building Planets with Perlanet and GitHub</title>
    <link rel="alternate" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><blockquote>
<p class="quoteText">Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital watches are a pretty neat idea.</p>
<p style="text-align: right;"><em>Douglas Adams – The Hitchhiker’s Guide to the Galaxy</em></p>
</blockquote>
<p>I don’t still wear a digital watch, but I do like other things that are almost as unhip. In particular, I pine for the time about twenty years ago when web feeds looked like they were about to take over the world. Everyone had their favourite feed reader (I still miss Google Reader) and pretty much any useful web site would produce one or more web feeds that you could subscribe to and follow through your feed reader. For a few years, it was almost unthinkable to produce a web site without publishing a feed which included the changes to the site’s content.</p>
<p>Then, at some point, that changed. It wasn’t that web feeds vanished overnight. They still exist for many sites. But they are no longer ubiquitous. You can’t guarantee they’ll exist for every site you’re interested in. I remember people saying that social media would replace them. I was never convinced by that argument but, interestingly, one of the first times I noticed them vanishing was when Twitter removed their web feed of a user’s posts. They wanted people to use their AP instead (so I wrote <a href="https://github.com/davorg/twitter-json2atom">twitter-json2atom</a> that turned their API’s JSON into an Atom feed – I suspect it no longer works). Honestly, I think the main reason for the fall in popularity of web feeds was that people wanted you to read their content on their web sites where the interesting content was surrounded by uninteresting adverts.</p>
<p>But, as I said, not all web feeds vanished. There are still plenty of them out there (often, I expect because the sites’ owners don’t realise they’re there or don’t know how to turn them off). And that means the web feed-driven technologies of the early 2000s can still be useful.</p>
<p>One such piece of technology is the feed aggregator. I remember these being very popular. You would create a web site and configure it with a list of web feeds that you were interested in. The site would be driven by a piece of software that every few hours would poll the web feeds in the configuration and use the information it found to create a) a web page made up of information from the feeds and b) another feed that contained all of the information from the source feeds. The most popular software for building these sites was called Planet Planet and was written in Python (it seems to have vanished sometime in the last twenty years, otherwise I would link to it). When I wrote a Perl version, I called it (for reasons I now regret) <a href="https://metacpan.org/pod/Perlanet">Perlanet</a>.</p>
<p>I still use Perlanet to build planet sites. And they’re all listed at <a href="https://theplanetarium.org/">The Planetarium</a>. Recently, I’ve started hosting all my planets on <a href="https://pages.github.com/">GitHub Pages</a>, using <a href="https://github.com/features/actions">GitHub Actions</a> to rebuild the sites periodically. I thought that maybe other people might be old-skool like me and might want to build their own planets – so in the rest of this post I’ll explain how to do that, using <a href="https://perl.theplanetarium.org/">Planet Perl</a> as an example.</p>
<p>The first thing you’ll need is a GitHub account and a repo to store the code for your planet. I’m going to assume you know how to set those up (in the interest of keeping this tutorial short). You only actually need two files to create a planet – a config file and a template for the web site.</p>
<p>Here’s part of the config for Planet Perl:</p><pre class="urvanov-syntax-highlighter-plain-tag">title: Planet Perl
description: There's More Than One Way To Aggregate It
url: https://perl.theplanetarium.org/
author:
  name: Dave Cross
  email: dave@theplanetarium.org
  twitter: davorg
entries: 75
entries_per_feed: 5
opml_file: docs/opml.xml
page:
  file: docs/index.html
  template: index.tt
feed:
  file: docs/atom.xml
  format: Atom
google_ga: G-HD966GMRYP
cutoff_duration:
  months: 1
feeds:
  - feed: https://www.perl.com/article/index.xml
    title: perl.com
    web: https://perl.com/
  - feed: https://news.perlfoundation.org/atom.xml
    title: Perl Foundation News
    web: https://news.perlfoundation.org/</pre><p>I’ve tried to make it self-explanatory. At the top, there are various config options for the output (the web page and the aggregated feed) and, below, are details of the feeds that you want to aggregate. Let’s look at the output options first.</p>
<ul>
<li>title and description: these are both strings that you can include on the web page that is created. They’re also used in the aggregate feed that is produced</li>
<li>url: this is where the web page will be available on the web</li>
<li>author: this contains details of the person publishing the aggregated site and feed. The Twitter handle is optional</li>
<li>entries: is the maximum number of entries that your output will contain in total</li>
<li>entries_per_feed: is the maximum number of entries that you will use from each of your feeds. This is to stop your output being swamped with entries from a particularly busy feed. This can be omitted, in which case there will be no limit</li>
<li>opml_file: OPML stands for “Outline Processor Markup File”. It used to be trendy to publish an OPML file which is a machine-readable data file which contains a list of the feeds that you are aggregating. These days, no-one cares. If you omit this setting, the file won’t be created.</li>
<li>page: this contains details of the web page you create. The template is the name of a template file that is used to create the HTML page (more on that below) and file is where the output page is written. If you keep the value used in my example, then things will work well with GitHub Pages as we’ll see later</li>
<li>feed: this contains details of the aggregate feed we create. You can choose a format (Atom or RSS) and the filename. Again, the default filename will work well with GitHub Pages</li>
<li>google_ga: if this value exists, then it will be used as the Google Analytics identifier for the web page that is created</li>
<li>cutoff_duration: this is another way to control which entries are used in your output feed. Any entries that were published longer ago than this period of time will be ignored</li>
</ul>
<p>Then we have the section of the config file that defines the feeds that we are going to aggregate. Each feed has three data items:</p>
<ul>
<li>feed: the URL of the feed</li>
<li>title: a string to use to describe the feed</li>
<li>web: the URL of the feed’s original web page</li>
</ul>
<p>And that’s all you need for the config file. Create that, put it in a file called “perlanetrc” and add it to your repo.</p>
<p>The other file you need is the template for the HTML page. This is usually called “index.tt”. <a href="https://github.com/davorg/planetperl/blob/master/index.tt">The one I use for Planet Perl</a> is rather complicated (there are all sorts of Javascript tricks in it). <a href="https://github.com/davorg/planetdavorg/blob/main/index.tt">The one I use for Planet Davorg</a> is far simpler – and should work well with the config file above. I suggest going with that initially and editing it once you’ve got everything else working.</p>
<p>I said those are the only two files you need. And that’s true. But the site you create will be rather ugly. My default web page uses <a href="https://getbootstrap.com/">Bootstrap</a> for CSS, but you’ll probably want to add your own CSS to tweak the way it looks – along with, perhaps, some Javascript and some images. All of the files that you need to make your site work should be added to the /docs directory in your repo.</p>
<p>Having got to this stage, we can test your web site. Well, we’ll need to install Perlanet first. There are two ways to do this. You can either install it from CPAN along with all of its (many) dependencies – using “cpan Perlanet” or there’s <a href="https://hub.docker.com/r/davorg/perl-perlanet">a Docker image</a> that you can use. Either way, once you have the software installed, running it is as simple as running “perlanet”. That will trundle along for a while and, when it has finished, you’ll find new files called “index.html” and “atom.xml” in the /docs directory. My favourite way to test the output locally is to use <a href="https://metacpan.org/dist/App-HTTPThis">App::HTTPThis</a>. Having installed this program, you can just run “http_this docs” from the repo’s main directory and then visit http://localhost:7007/index.html to see the site that was produced (or http://localhost:7007/atom.xml to see the feed.</p>
<p>You now have a system to build your new planet. You could run that on a server that’s connected to the internet and set up a cronjob to regenerate the file every few hours. And that’s how I used to run all of my planets. But, recently, I’ve moved to running them on GitHub Pages instead. And that’s what we’ll look at next.</p>
<p>There are two parts to this. We need to configure our repo to have a GitHub Pages site associated with it and we also need to configure GitHub Actions to rebuild the site every few hours. Let’s take those two in turn.</p>
<p>Turning on GitHub Pages is simple enough. Just go to the “Pages” section in your repo’s settings. Choose “GitHub Actions” as the deployment source and tick the box marked “Enforce HTTPS”. Later on, you can look at setting up a custom domain for your site but, for now, let’s stick with the default URL which will be https://&lt;github_username&gt;.github.io/&lt;repo_name&gt;. Nothing will appear yet, as we need to set up GitHub Actions next.</p>
<p>Setting up a GitHub Action workflow is as simple as adding a YAML file to the /.github/workflows directory in your repo. You’ll obviously have to create that directory first. Here’s the workflow definition for Planet Perl (it’s in a file called “buildsite.yml”, but that name isn’t important).</p><pre class="urvanov-syntax-highlighter-plain-tag">name: Generate web page

on:
  push:
    branches: '*'
  schedule:
    - cron: '37 */4 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container: davorg/perl-perlanet:latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Create pages
      run: |
        mkdir -p docs
        perlanet &gt; perlanet.log 2&gt;&amp;1
    - name: Commit new page
      if: github.repository == 'davorg/planetperl'
      run: |
        git config --global --add safe.directory /__w/planetperl/planetperl
        GIT_STATUS=$(git status --porcelain)
        echo $GIT_STATUS
        git config user.name github-actions[bot]
        git config user.email 41898282+github-actions[bot]@users.noreply.github.com
        git add docs/
        if [ "$GIT_STATUS" != "" ]; then git commit -m "Automated Web page generation"; fi
        if [ "$GIT_STATUS" != "" ]; then git push; fi
    - name: Archive perlanet logs
      uses: actions/upload-artifact@v3
      with:
        name: perlanet.log
        path: ./perlanet.log
        retention-days: 3

    - name: Update pages artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: docs/

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2</pre><p>The first section of the file defines the events that will trigger this workflow. I have defined three triggers:</p>
<ol>
<li>Pushing a commit. I could be cleverer here and only work when certain files are changed (for example, the config or the index.tt)</li>
<li>On a schedule. My example runs at 37 minutes past the hour every four hours (so at 04:37, 08:37, etc.)</li>
<li>Manually. The “workflow_dispatch” trigger adds a button to the repo’s “Actions” page on GitHub allowing you to run the workflow manually, whenever you want</li>
</ol>
<p>Following that, we define the jobs that need to be run and the steps that make up those jobs. We have two jobs – one that builds the new version of the site and one that deploys that new site to GitHub Pages. Remember how I mentioned earlier that there is a Perlanet container on the Docker Hub? Well, you’ll see that the build job runs on that container. This is because pulling a container from the Docker Hub is faster than using a standard Ubuntu container and installing Perlanet.</p>
<p>The steps in these jobs should be pretty self-explanatory. Basically, we check out the repo, run “perlanet” to build the site and then deploy the contents of the /docs directory to the GitHub Pages server.</p>
<p>Once you’ve created this file and added it to your repo, you’ll see details of this workflow on the “Actions” tab in your repo. And whenever you push a change or when a scheduled run takes place (or you press the manual run button) you’ll see logs for the run and (hopefully) your web site will update to contain the latest data.</p>
<p>I reckon you can get a new planet up and running in about half an hour. Oh, and if you label your repo with the topic “perlanet”, then it will automatically be added to The Planetarium.</p>
<p>So, what are you waiting for? What planet would you like to build?</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Building Planets with Perlanet and GitHub</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital… <a class="more-link" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Continue reading <span class="screen-reader-text">Building Planets with Perlanet and GitHub</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Building Planets with Perlanet and GitHub</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2104</id>
    <published>2023-04-02T17:54:37Z</published>
    <updated>2023-04-02T17:54:37Z</updated>
    <category term="Programming"/>
    <category term="atom"/>
    <category term="perlanet"/>
    <category term="planet"/>
    <category term="rss"/>
    <category term="web feed"/>
  </entry>
  <entry>
    <title>Building Planets with Perlanet and GitHub</title>
    <link rel="alternate" href="https://dev.to/davorg/building-planets-with-perlanet-and-github-4jpe" type="text/html"/>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital watches are a pretty neat idea.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Douglas Adams – The Hitchhiker’s Guide to the Galaxy&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I don’t still wear a digital watch, but I do like other things that are almost as unhip. In particular, I pine for the time about twenty years ago when web feeds looked like they were about to take over the world. Everyone had their favourite feed reader (I still miss Google Reader) and pretty much any useful web site would produce one or more web feeds that you could subscribe to and follow through your feed reader. For a few years, it was almost unthinkable to produce a web site without publishing a feed which included the changes to the site’s content.&lt;/p&gt;

&lt;p&gt;Then, at some point, that changed. It wasn’t that web feeds vanished overnight. They still exist for many sites. But they are no longer ubiquitous. You can’t guarantee they’ll exist for every site you’re interested in. I remember people saying that social media would replace them. I was never convinced by that argument but, interestingly, one of the first times I noticed them vanishing was when Twitter removed their web feed of a user’s posts. They wanted people to use their AP instead (so I wrote &lt;a href="https://github.com/davorg/twitter-json2atom"&gt;twitter-json2atom&lt;/a&gt; that turned their API’s JSON into an Atom feed – I suspect it no longer works). Honestly, I think the main reason for the fall in popularity of web feeds was that people wanted you to read their content on their web sites where the interesting content was surrounded by uninteresting adverts.&lt;/p&gt;

&lt;p&gt;But, as I said, not all web feeds vanished. There are still plenty of them out there (often, I expect because the sites’ owners don’t realise they’re there or don’t know how to turn them off). And that means the web feed-driven technologies of the early 2000s can still be useful.&lt;/p&gt;

&lt;p&gt;One such piece of technology is the feed aggregator. I remember these being very popular. You would create a web site and configure it with a list of web feeds that you were interested in. The site would be driven by a piece of software that every few hours would poll the web feeds in the configuration and use the information it found to create a) a web page made up of information from the feeds and b) another feed that contained all of the information from the source feeds. The most popular software for building these sites was called Planet Planet and was written in Python (it seems to have vanished sometime in the last twenty years, otherwise I would link to it). When I wrote a Perl version, I called it (for reasons I now regret) &lt;a href="https://metacpan.org/pod/Perlanet"&gt;Perlanet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I still use Perlanet to build planet sites. And they’re all listed at &lt;a href="https://theplanetarium.org/"&gt;The Planetarium&lt;/a&gt;. Recently, I’ve started hosting all my planets on &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;, using &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; to rebuild the sites periodically. I thought that maybe other people might be old-skool like me and might want to build their own planets – so in the rest of this post I’ll explain how to do that, using &lt;a href="https://perl.theplanetarium.org/"&gt;Planet Perl&lt;/a&gt; as an example.&lt;/p&gt;

&lt;p&gt;The first thing you’ll need is a GitHub account and a repo to store the code for your planet. I’m going to assume you know how to set those up (in the interest of keeping this tutorial short). You only actually need two files to create a planet – a config file and a template for the web site.&lt;/p&gt;

&lt;p&gt;Here’s part of the config for Planet Perl:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;title: Planet Perl
description: There's More Than One Way To Aggregate It
url: https://perl.theplanetarium.org/
author:
  name: Dave Cross
  email: dave@theplanetarium.org
  twitter: davorg
entries: 75
entries_per_feed: 5
opml_file: docs/opml.xml
page:
  file: docs/index.html
  template: index.tt
feed:
  file: docs/atom.xml
  format: Atom
google_ga: G-HD966GMRYP
cutoff_duration:
  months: 1
feeds:
  - feed: https://www.perl.com/article/index.xml
    title: perl.com
    web: https://perl.com/
  - feed: https://news.perlfoundation.org/atom.xml
    title: Perl Foundation News
    web: https://news.perlfoundation.org/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I’ve tried to make it self-explanatory. At the top, there are various config options for the output (the web page and the aggregated feed) and, below, are details of the feeds that you want to aggregate. Let’s look at the output options first.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;title and description: these are both strings that you can include on the web page that is created. They’re also used in the aggregate feed that is produced&lt;/li&gt;
&lt;li&gt;url: this is where the web page will be available on the web&lt;/li&gt;
&lt;li&gt;author: this contains details of the person publishing the aggregated site and feed. The Twitter handle is optional&lt;/li&gt;
&lt;li&gt;entries: is the maximum number of entries that your output will contain in total&lt;/li&gt;
&lt;li&gt;entries_per_feed: is the maximum number of entries that you will use from each of your feeds. This is to stop your output being swamped with entries from a particularly busy feed. This can be omitted, in which case there will be no limit&lt;/li&gt;
&lt;li&gt;opml_file: OPML stands for “Outline Processor Markup File”. It used to be trendy to publish an OPML file which is a machine-readable data file which contains a list of the feeds that you are aggregating. These days, no-one cares. If you omit this setting, the file won’t be created.&lt;/li&gt;
&lt;li&gt;page: this contains details of the web page you create. The template is the name of a template file that is used to create the HTML page (more on that below) and file is where the output page is written. If you keep the value used in my example, then things will work well with GitHub Pages as we’ll see later&lt;/li&gt;
&lt;li&gt;feed: this contains details of the aggregate feed we create. You can choose a format (Atom or RSS) and the filename. Again, the default filename will work well with GitHub Pages&lt;/li&gt;
&lt;li&gt;google_ga: if this value exists, then it will be used as the Google Analytics identifier for the web page that is created&lt;/li&gt;
&lt;li&gt;cutoff_duration: this is another way to control which entries are used in your output feed. Any entries that were published longer ago than this period of time will be ignored&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we have the section of the config file that defines the feeds that we are going to aggregate. Each feed has three data items:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;feed: the URL of the feed&lt;/li&gt;
&lt;li&gt;title: a string to use to describe the feed&lt;/li&gt;
&lt;li&gt;web: the URL of the feed’s original web page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that’s all you need for the config file. Create that, put it in a file called “perlanetrc” and add it to your repo.&lt;/p&gt;

&lt;p&gt;The other file you need is the template for the HTML page. This is usually called “index.tt”. &lt;a href="https://github.com/davorg/planetperl/blob/master/index.tt"&gt;The one I use for Planet Perl&lt;/a&gt; is rather complicated (there are all sorts of Javascript tricks in it). &lt;a href="https://github.com/davorg/planetdavorg/blob/main/index.tt"&gt;The one I use for Planet Davorg&lt;/a&gt; is far simpler – and should work well with the config file above. I suggest going with that initially and editing it once you’ve got everything else working.&lt;/p&gt;

&lt;p&gt;I said those are the only two files you need. And that’s true. But the site you create will be rather ugly. My default web page uses &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; for CSS, but you’ll probably want to add your own CSS to tweak the way it looks – along with, perhaps, some Javascript and some images. All of the files that you need to make your site work should be added to the /docs directory in your repo.&lt;/p&gt;

&lt;p&gt;Having got to this stage, we can test your web site. Well, we’ll need to install Perlanet first. There are two ways to do this. You can either install it from CPAN along with all of its (many) dependencies – using “cpan Perlanet” or there’s &lt;a href="https://hub.docker.com/r/davorg/perl-perlanet"&gt;a Docker image&lt;/a&gt; that you can use. Either way, once you have the software installed, running it is as simple as running “perlanet”. That will trundle along for a while and, when it has finished, you’ll find new files called “index.html” and “atom.xml” in the /docs directory. My favourite way to test the output locally is to use &lt;a href="https://metacpan.org/dist/App-HTTPThis"&gt;App::HTTPThis&lt;/a&gt;. Having installed this program, you can just run “http_this docs” from the repo’s main directory and then visit &lt;a href="http://localhost:7007/index.html"&gt;http://localhost:7007/index.html&lt;/a&gt; to see the site that was produced (or &lt;a href="http://localhost:7007/atom.xml"&gt;http://localhost:7007/atom.xml&lt;/a&gt; to see the feed.&lt;/p&gt;

&lt;p&gt;You now have a system to build your new planet. You could run that on a server that’s connected to the internet and set up a cronjob to regenerate the file every few hours. And that’s how I used to run all of my planets. But, recently, I’ve moved to running them on GitHub Pages instead. And that’s what we’ll look at next.&lt;/p&gt;

&lt;p&gt;There are two parts to this. We need to configure our repo to have a GitHub Pages site associated with it and we also need to configure GitHub Actions to rebuild the site every few hours. Let’s take those two in turn.&lt;/p&gt;

&lt;p&gt;Turning on GitHub Pages is simple enough. Just go to the “Pages” section in your repo’s settings. Choose “GitHub Actions” as the deployment source and tick the box marked “Enforce HTTPS”. Later on, you can look at setting up a custom domain for your site but, for now, let’s stick with the default URL which will be https://.github.io/. Nothing will appear yet, as we need to set up GitHub Actions next.&lt;/p&gt;

&lt;p&gt;Setting up a GitHub Action workflow is as simple as adding a YAML file to the /.github/workflows directory in your repo. You’ll obviously have to create that directory first. Here’s the workflow definition for Planet Perl (it’s in a file called “buildsite.yml”, but that name isn’t important).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Generate web page

on:
  push:
    branches: '*'
  schedule:
    - cron: '37 */4 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container: davorg/perl-perlanet:latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Create pages
      run: |
        mkdir -p docs
        perlanet &amp;gt; perlanet.log 2&amp;gt;&amp;amp;1
    - name: Commit new page
      if: github.repository == 'davorg/planetperl'
      run: |
        git config --global --add safe.directory /__w/planetperl/planetperl
        GIT_STATUS=$(git status --porcelain)
        echo $GIT_STATUS
        git config user.name github-actions[bot]
        git config user.email 41898282+github-actions[bot]@users.noreply.github.com
        git add docs/
        if ["$GIT_STATUS" != ""]; then git commit -m "Automated Web page generation"; fi
        if ["$GIT_STATUS" != ""]; then git push; fi
    - name: Archive perlanet logs
      uses: actions/upload-artifact@v3
      with:
        name: perlanet.log
        path: ./perlanet.log
        retention-days: 3

    - name: Update pages artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: docs/

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first section of the file defines the events that will trigger this workflow. I have defined three triggers:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pushing a commit. I could be cleverer here and only work when certain files are changed (for example, the config or the index.tt)&lt;/li&gt;
&lt;li&gt;On a schedule. My example runs at 37 minutes past the hour every four hours (so at 04:37, 08:37, etc.)&lt;/li&gt;
&lt;li&gt;Manually. The “workflow_dispatch” trigger adds a button to the repo’s “Actions” page on GitHub allowing you to run the workflow manually, whenever you want&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Following that, we define the jobs that need to be run and the steps that make up those jobs. We have two jobs – one that builds the new version of the site and one that deploys that new site to GitHub Pages. Remember how I mentioned earlier that there is a Perlanet container on the Docker Hub? Well, you’ll see that the build job runs on that container. This is because pulling a container from the Docker Hub is faster than using a standard Ubuntu container and installing Perlanet.&lt;/p&gt;

&lt;p&gt;The steps in these jobs should be pretty self-explanatory. Basically, we check out the repo, run “perlanet” to build the site and then deploy the contents of the /docs directory to the GitHub Pages server.&lt;/p&gt;

&lt;p&gt;Once you’ve created this file and added it to your repo, you’ll see details of this workflow on the “Actions” tab in your repo. And whenever you push a change or when a scheduled run takes place (or you press the manual run button) you’ll see logs for the run and (hopefully) your web site will update to contain the latest data.&lt;/p&gt;

&lt;p&gt;I reckon you can get a new planet up and running in about half an hour. Oh, and if you label your repo with the topic “perlanet”, then it will automatically be added to The Planetarium.&lt;/p&gt;

&lt;p&gt;So, what are you waiting for? What planet would you like to build?&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/"&gt;Building Planets with Perlanet and GitHub&lt;/a&gt; appeared first on &lt;a href="https://perlhacks.com"&gt;Perl Hacks&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/building-planets-with-perlanet-and-github-4jpe</id>
    <published>2023-04-02T17:54:37Z</published>
    <updated>2023-04-02T17:54:37Z</updated>
    <category term="atom"/>
    <category term="perlanet"/>
    <category term="planet"/>
    <category term="rss"/>
  </entry>
  <entry>
    <title>Deploying GitHub Pages sites with GitHub Workflows</title>
    <link rel="alternate" href="https://dev.to/davorg/deploying-github-pages-site-with-github-workflows-3bhh" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I've written before about <a href="https://dev.to/davorg/github-actions-for-semi-static-web-sites-597g">how I use GitHub Workflows to keep "semi-static" web sites up to date</a>. It's a technique that I've found really useful. When I wrote that blog post, things were pretty simple - you chose which branch held your web site (there was a tradition for a while to use <code>gh-pages</code>) and whether the web site pages were in the repos root directory or the directory called <code>/docs</code>. I usually put my web site files into the <code>/docs</code> directory in the <code>master</code> (now <code>main</code>) branch and things worked just fine.</p>

<p>The reason for storing the site in <code>/docs</code> was so that there was a separation between the files that were used to generate the site from the generated output site itself. Many of my repos would have a <code>/tt</code> directory that contained templates, a <code>/data</code> directory which contains JSON files or an SQLite database and a <code>/bin</code> directory with a <code>build</code> program that pulls all that stuff together and generates a pile of HTML files that end up in the <code>/docs</code> directory. In my original blog post on this subject, I demonstrated a GitHub Workflow definition that would regenerate the site (when input files changed or on a schedule) and committed any changed files in the <code>/docs</code> directory. Some GitHub magic would then ensure that the new version of the site was deployed to the GitHub Pages server. All was well with the world.</p>

<p>Then, a few months ago, things got a little more complicated. We gained options about how your GitHub Pages site was deployed. The standard version that I'd be using before was called "deploy from a branch" but there was another option called "GitHub Actions". It seemed likely to me that I really needed to start using the "GitHub Actions" option, but things were still working the old way, and I had far more interesting things to investigate, so I left things the way they were.</p>

<p>Well, I say things were still working in the old way... They were, but something was a bit different. It seemed that the old method was being powered by a new GitHub Workflow called "pages-build-deployment" that had been automatically added to all the repos that needed it. And looking into the details of that workflow, I noticed that it was doing some things that were unnecessary in my repos - for example it assumed that the site was being built using <a href="https://jekyllrb.com/">Jekyll</a> and that was only true for a couple of my repos. For most of them, that was unnecessary work. So I needed to look into the new deployment option in more detail.</p>

<p>I started a couple of weeks ago, by simply switching the option from "deploy from a branch" to "GitHub Actions" in the hope that, because I was already using GitHub Actions, things would Just Work. But, unfortunately, that wasn't the case. My new site was being generated and committed to the repo - but the changes weren't showing up on the live site. So I switched things back until I had time to look into in it more detail.</p>

<p>That time was today. It seemed that I needed to include code in my GitHub Workflow that would actually handle the deployment of the site to the GitHub Pages servers. A quick search of the <a href="https://github.com/marketplace?type=actions">GitHub Actions marketplace</a> found the <a href="https://github.com/marketplace/actions/deploy-github-pages-site">Deploy GitHub Pages site</a> action which seemed to be the right thing. But reading the documentation, I worked out that it wanted to deploy the site from an artifact, so I needed to create that first. And then I found <a href="https://github.com/marketplace/actions/upload-github-pages-artifact">Upload GitHub Pages artifact</a> which did the right thing. So it was just a case of adding these two actions to my workflows in the correct way.</p>

<p>Previously, my workflows for these sites just needed a single job (called <code>build</code>) but now I added a <code>deploy</code> job which depended on <code>build</code>. For example, the workflow that builds <a href="https://perl.theplanetarium.org/">Planet Perl</a> now looks like this:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>name: Generate web page

on:
  push:
    branches: '*'
  schedule:
    - cron: '37 */4 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container: davorg/perl-perlanet:latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Create pages
      run: |
        mkdir -p docs
        perlanet &gt; perlanet.log 2&gt;&amp;1
    - name: Commit new page
      if: github.repository == 'davorg/planetperl'
      run: |
        git config --global --add safe.directory /__w/planetperl/planetperl
        GIT_STATUS=$(git status --porcelain)
        echo $GIT_STATUS
        git config user.name github-actions[bot]
        git config user.email 41898282+github-actions[bot]@users.noreply.github.com
        git add docs/
        if [ "$GIT_STATUS" != "" ]; then git commit -m "Automated Web page generation"; fi
        if [ "$GIT_STATUS" != "" ]; then git push; fi
    - name: Archive perlanet logs
      uses: actions/upload-artifact@v3
      with:
        name: perlanet.log
        path: ./perlanet.log
        retention-days: 3

    - name: Update pages artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: docs/

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${\{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v1
</code></pre>

</div>

<p>The bits that I've added are the final step in the <code>build</code> job ("Update pages artifact") and the new <code>deploy</code> job. All of the code is largely copied from the documentation of the two actions I mentioned above.</p>

<p>Having made this changes to one of my planet sites, I switched the deployment method and forced the workflow to run. And was very happy to see it ran successfully and the new version of the site appeared at the live URL as soon as the deployment had changed.</p>

<p>This makes me happy as I feel I'm using the GitHub Pages deployment the way that they're supposed to be used. I've updated all of my <a href="https://theplanetarium.org/">planet sites</a> to use this method, but I have several other sites that I'll need to get round to switching at some point.</p>

<p>As always when I find out something new about a GitHub feature, it leaves me with a couple of other suggestions for improvements:</p>

<ul>
<li>It's possible to <a href="https://docs.github.com/en/actions/using-workflows/reusing-workflows">call one workflow from another</a>. The planet workflows are all very similar. I wonder if I can define a single workflow that does all of the work and just call that from the individual workflow definition - passing in parameters to handle the differences.</li>
<li>Now I'm deploying the sites from artifacts, there is no need for the generated site to actually exist in the repo. That might well make a few things quite a bit easier.</li>
</ul>

<p>Anyway, I thought I'd share what I had discovered today. Is anyone else generating web sites this way? How do you do it?</p>

</div>
    </content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/deploying-github-pages-site-with-github-workflows-3bhh</id>
    <published>2023-03-20T17:32:53Z</published>
    <updated>2023-03-20T17:32:53Z</updated>
    <category term="github"/>
    <category term="githubpages"/>
    <category term="githubworkflows"/>
    <category term="githubactions"/>
  </entry>
  <entry>
    <title>Improvements to Planet Perl and Perlanet</title>
    <link rel="alternate" href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>This is a story of one of those nice incidents where something starts off simple, then spirals out of control for a while but, in the end, everyone wins.</p>
<p>On Reddit, a few days ago, someone asked <a href="https://www.reddit.com/r/perl/comments/119hu00/perl_rss_feeds/">‘Is there a “Planet Perl” with an RSS feed?’</a> and a few people replied, pointing out the existence of Planet Perl (which is the first Google result for <a href="https://www.google.com/search?q=planet+perl">“Planet Perl”</a>). I’m obviously not marketing that site very well as every time I mention it, I get people (pleasantly) surprised that it exists.</p>
<p>On this occasion, it was <a href="https://www.reddit.com/user/rwp0/">Elvin Aslanov</a> who seemed to discover my site for the first time. And, very soon afterwards, he started sending <a href="https://github.com/davorg/planetperl/pulls">pull requests</a> to add feeds to the site. As a result, we now have three more feeds that are being pulled into the site.</p>
<ul>
<li><a href="https://medium.com/tag/perl">Perl on Medium</a>. I’m slightly embarrassed that I hadn’t thought of this myself. I did, after all, once try to start <a href="https://medium.com/cultured-perl">a Perl publication on Medium</a>. I think I must have decided that there are better sites for technical blogging and blanked it from consideration. Medium’s not the busiest of places for Perl bloggers, but there are a few posts there and they’re mostly from people who are outside of the echo chamber – so getting more eyes on their posts is a good idea.</li>
<li><a href="https://stackoverflow.com/feeds/tag/perl">Perl questions on Stack Overflow</a>. Another one that would have been obvious if I had thought for a second. I’ve been answering questions on SO for years. It’s a good way to get more perspective on how Perl is being used across the industry. Unfortunately, the feed only includes the titles of the posts – you’ll need to click the link to actually see the question.</li>
<li><a href="https://github.com/Perl/perl5/commits/blead.atom">Perl commits on GitHub</a>. I’m interested in hearing how useful people think this is. I worry slightly that there will be times when the number of commits will overwhelm the other feeds. But maybe that’s a good idea. Perhaps it’s good for more people to see just how busy the Perl 5 Porters are. I’m a bit annoyed that the feed puts everything in a fixed-width font, but not (yet) annoyed enough to do anything about it.</li>
</ul>
<p>You might know that Planet Perl is driven by <a href="https://metacpan.org/pod/Perlanet">Perlanet</a>. So adding new feeds is just a case of adding a few lines to <a href="https://github.com/davorg/planetperl/blob/master/perlanetrc">a configuration file</a>. And looking at the pull requests I got from Elvin, showed a potential problem in the way the configuration was laid out. Each feed has three lines of YAML configuration. There’s a title for the feed, a URL for a web page that displays the content of the feed and the URL for the feed itself. They’re called “title”, “web” and “url”. And it’s that last name that’s slightly problematic – it’s just not clear enough. Elvin got “web” and “url” muddled up in one of his PRs and, when I pointed that out to him, he suggested that renaming “url” to “feed” would make things much clearer.</p>
<p>I agreed, and the next day I hacked away for a while before releasing <a href="https://metacpan.org/release/DAVECROSS/Perlanet-v3.0.0/view/lib/Perlanet.pm">version 3.0.0 of Perlanet</a>. In this version, the “url” key is renamed to “feed”. It still accepts the old name (so older config files will still work) but you’ll get a warning if you try to use a config name in the old config.</p>
<p>I didn’t stop there. Last year, I wrote <a href="https://perlhacks.com/2022/10/building-a-perlanet-container/">a blog post about producing a docker image that already had Perlanet installed</a> – so that it was quicker to rebuild my various planets every few hours. Since then I’ve been rebuilding <a href="https://hub.docker.com/repository/docker/davorg/perl-perlanet/general">that image</a> every time I updated Perlanet. But it’s been rather a manual process. And because I’m old and decrepit, I can never remember the steps I go through to rebuild it, tag it correctly and push it to the Docker Hub. This means it always takes far longer than it’s supposed to. So this time, I wrote <a href="https://github.com/davorg/perl-perlanet-docker/blob/main/build">a script to do that for me</a>. And because I now have the kind of mind set that sees GitHub Workflows everywhere I look, I wrote <a href="https://github.com/davorg/perl-perlanet-docker/blob/main/.github/workflows/publish_image.yml">a Workflow definition that builds and publishes the image</a> any time the Dockerfile changes. I guess the next step will be to write an action that automatically updates the Dockerfile (thereby triggering the rebuild) each time I release a new version of Perlanet.</p>
<p>But that’s a problem for another day. For now, I’m happy with the improvements I’ve made to Planet Perl, Perlanet and the Perlanet Docker infrastructure.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/">Improvements to Planet Perl and Perlanet</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>This is a story of one of those nice incidents where something starts off simple, then spirals out of control for a while but, in the end, everyone wins. On Reddit, a few days ago, someone asked ‘Is there a “Planet Perl” with an RSS feed?’ and a few people replied, pointing out the existence… <a class="more-link" href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/">Continue reading <span class="screen-reader-text">Improvements to Planet Perl and Perlanet</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/">Improvements to Planet Perl and Perlanet</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2097</id>
    <published>2023-03-03T10:16:30Z</published>
    <updated>2023-03-03T10:16:30Z</updated>
    <category term="Programming"/>
    <category term="docker"/>
    <category term="perlanet"/>
    <category term="planet perl"/>
  </entry>
  <entry>
    <title>Improvements to Planet Perl and Perlanet</title>
    <link rel="alternate" href="https://dev.to/davorg/improvements-to-planet-perl-and-perlanet-20d3" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>This is a story of one of those nice incidents where something starts off simple, then spirals out of control for a while but, in the end, everyone wins.</p>

<p>On Reddit, a few days ago, someone asked <a href="https://www.reddit.com/r/perl/comments/119hu00/perl_rss_feeds/">‘Is there a “Planet Perl” with an RSS feed?’</a> and a few people replied, pointing out the existence of Planet Perl (which is the first Google result for <a href="https://www.google.com/search?q=planet+perl">“Planet Perl”</a>). I’m obviously not marketing that site very well as every time I mention it, I get people (pleasantly) surprised that it exists.</p>

<p>On this occasion, it was <a href="https://www.reddit.com/user/rwp0/">Elvin Aslanov</a> who seemed to discover my site for the first time. And, very soon afterwards, he started sending <a href="https://github.com/davorg/planetperl/pulls">pull requests</a> to add feeds to the site. As a result, we now have three more feeds that are being pulled into the site.</p>

<ul>
<li>
<a href="https://medium.com/tag/perl">Perl on Medium</a>. I’m slightly embarrassed that I hadn’t thought of this myself. I did, after all, once try to start <a href="https://medium.com/cultured-perl">a Perl publication on Medium</a>. I think I must have decided that there are better sites for technical blogging and blanked it from consideration. Medium’s not the busiest of places for Perl bloggers, but there are a few posts there and they’re mostly from people who are outside of the echo chamber – so getting more eyes on their posts is a good idea.</li>
<li>
<a href="https://stackoverflow.com/feeds/tag/perl">Perl questions on Stack Overflow</a>. Another one that would have been obvious if I had thought for a second. I’ve been answering questions on SO for years. It’s a good way to get more perspective on how Perl is being used across the industry. Unfortunately, the feed only includes the titles of the posts – you’ll need to click the link to actually see the question.</li>
<li>
<a href="https://github.com/Perl/perl5/commits/blead.atom">Perl commits on GitHub</a>. I’m interested in hearing how useful people think this is. I worry slightly that there will be times when the number of commits will overwhelm the other feeds. But maybe that’s a good idea. Perhaps it’s good for more people to see just how busy the Perl 5 Porters are. I’m a bit annoyed that the feed puts everything in a fixed-width font, but not (yet) annoyed enough to do anything about it.</li>
</ul>

<p>You might know that Planet Perl is driven by <a href="https://metacpan.org/pod/Perlanet">Perlanet</a>. So adding new feeds is just a case of adding a few lines to <a href="https://github.com/davorg/planetperl/blob/master/perlanetrc">a configuration file</a>. And looking at the pull requests I got from Elvin, showed a potential problem in the way the configuration was laid out. Each feed has three lines of YAML configuration. There’s a title for the feed, a URL for a web page that displays the content of the feed and the URL for the feed itself. They’re called “title”, “web” and “url”. And it’s that last name that’s slightly problematic – it’s just not clear enough. Elvin got “web” and “url” muddled up in one of his PRs and, when I pointed that out to him, he suggested that renaming “url” to “feed” would make things much clearer.</p>

<p>I agreed, and the next day I hacked away for a while before releasing <a href="https://metacpan.org/release/DAVECROSS/Perlanet-v3.0.0/view/lib/Perlanet.pm">version 3.0.0 of Perlanet</a>. In this version, the “url” key is renamed to “feed”. It still accepts the old name (so older config files will still work) but you’ll get a warning if you try to use a config name in the old config.</p>

<p>I didn’t stop there. Last year, I wrote <a href="https://dev.to/davorg/building-a-perlanet-container-43cm">a blog post about producing a docker image that already had Perlanet installed</a> – so that it was quicker to rebuild my various planets every few hours. Since then I’ve been rebuilding <a href="https://hub.docker.com/repository/docker/davorg/perl-perlanet/general">that image</a> every time I updated Perlanet. But it’s been rather a manual process. And because I’m old and decrepit, I can never remember the steps I go through to rebuild it, tag it correctly and push it to the Docker Hub. This means it always takes far longer than it’s supposed to. So this time, I wrote <a href="https://github.com/davorg/perl-perlanet-docker/blob/main/build">a script to do that for me</a>. And because I now have the kind of mind set that sees GitHub Workflows everywhere I look, I wrote <a href="https://github.com/davorg/perl-perlanet-docker/blob/main/.github/workflows/publish_image.yml">a Workflow definition that builds and publishes the image</a> any time the Dockerfile changes. I guess the next step will be to write an action that automatically updates the Dockerfile (thereby triggering the rebuild) each time I release a new version of Perlanet.</p>

<p>But that’s a problem for another day. For now, I’m happy with the improvements I’ve made to Planet Perl, Perlanet and the Perlanet Docker infrastructure.</p>

<p>The post <a href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/">Improvements to Planet Perl and Perlanet</a> appeared first on <a href="https://perlhacks.com">Perl Hacks</a>.</p>

</div>
    </content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/improvements-to-planet-perl-and-perlanet-20d3</id>
    <published>2023-03-03T10:16:30Z</published>
    <updated>2023-03-03T10:16:30Z</updated>
    <category term="programming"/>
    <category term="docker"/>
    <category term="perlanet"/>
    <category term="planetperl"/>
  </entry>
  <entry>
    <title>Dependabot and GitHub Actions</title>
    <link rel="alternate" href="https://dev.to/davorg/dependabot-and-github-actions-3lai" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>If you're using GitHub Workflows to automate bits of your development process (test runs, deployment, stuff like that) then you're almost certainly using GitHub Actions as well. Actions are pre-build chunks of functionality that you can use in your workflows and which save you having to write a load of code yourself. I've never, for example, written a workflow definition that doesn't use <a href="https://github.com/marketplace/actions/checkout">actions/checkout</a> to checkout the current repo on the container that is running that workflow. Part of my workflow definition will always look like this:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>steps:
  - name: Check out code
    uses: actions/checkout@v3
</code></pre>

</div>

<p>Or, at least, it will look a lot like that. The bit that might change is that <code>v3</code> on the end there. That is, of course, the version of the action that I'm using. And that will change when the author of the action releases a new version. Well, strictly speaking, it will change when I notice that there's a new version and bother to update the workflow definition.</p>

<p>Recently, I noticed that two of the actions I use frequently (including the checkout action which I use <em>everywhere</em>) had updated their version numbers and I hadn't known about the change. It took a few hours of work to update the version numbers in all of my workflow definitions.</p>

<p>And life isn't supposed to be that much work.</p>

<p>But there's a solution. And I discovered it thanks to <a href="https://www.reddit.com/r/github/comments/1134qvp/github_actions_is_it_safe_to_use_master/">a discussion on Reddit</a>.</p>

<p>If you're doing much work on GitHub (particularly in the Javascript/Node) area, then you'll have met <a href="https://github.com/dependabot">Dependabot</a>. It's a bot that scans GitHub repos for dependencies that are out of date and then (and here's the really clever bit!) it generates pull requests that update the repo to use the updated versions.</p>

<p>To be honest, I don't have many projects on GitHub that use the technologies that Dependabot targets by default. The few I have are web sites that use frameworks I've cloned from elsewhere - so I get the occasional PR that updates <code>packages.json</code> and I just apply them and forget about it.</p>

<p>But it seems that Dependabot can do far more than that. You just need to configure it properly in your repo. And one of the things it can do is to scan for out of date actions being used in your workflow definitions. You just need a file called <code>dependabot.yml</code> in your <code>.github</code> directory and the contents should look like this:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code># Set update schedule for GitHub Actions

version: 2
updates:

  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      # Check for updates to GitHub Actions every week
      interval: "weekly"
</code></pre>

</div>

<p>Dependabot will then check your actions versions once a week and create PRs for any that are out of date. I know it works, because I added this to all of my repos this morning and it promptly created half a dozen PRs for repos where I had updated the versions but hadn't pushed the changes to GitHub. When I pushed the existing changes, Dependabot checked its PR against the new code, realised the PR was no longer needed and closed the PR. Which was nice :-)</p>

<p>It you're using GitHub Workflows (and I can't really think of any reason why you wouldn't be) then I recommend adding this file to your repos. Of course, GitHub has <a href="https://docs.github.com/en/code-security/dependabot/working-with-dependabot/keeping-your-actions-up-to-date-with-dependabot">documentation about this feature</a>.</p>

<p>Dependabot clearly has more uses than I thought it did. I'm going to have to investigate it further. I wonder if it can check CPAN dependencies.</p>

<p>Do you have any Dependabot tricks that I would find useful?</p>

</div>
    </content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/dependabot-and-github-actions-3lai</id>
    <published>2023-02-16T16:10:44Z</published>
    <updated>2023-02-16T16:10:44Z</updated>
    <category term="github"/>
    <category term="githubactions"/>
    <category term="dependabot"/>
  </entry>
  <entry>
    <title>2022 in Gigs</title>
    <link rel="alternate" href="https://blog.dave.org.uk/2023/02/2022-in-gigs.html" type="text/html"/>
    <content type="html">
&lt;p&gt;Rather later than usual (again!) here is my review of the best ten gigs I saw in 2022. For the first time since 2019, I did actually see more than ten gigs in 2022 although my total of sixteen falls well short of my pre-pandemic years.&lt;/p&gt;



&lt;p&gt;Here are my ten favourite gigs of the year. As always, they&amp;#8217;re in chronological order.&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/39759069-pale-waves-at-roundhouse"&gt;Pale Waves at the Roundhouse&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;I&amp;#8217;ve seen Pale Waves a few times now and I think they&amp;#8217;ve firmly established their place on my &amp;#8220;see them whenever they tour near me&amp;#8221; list. This show was every bit as good as I&amp;#8217;ve ever seen them.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/39529194-orchestral-manoeuvres-in-the-dark-at-royal-albert-hall"&gt;Orchestral Manoeuvres in the Dark at the Royal Albert Hall&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Another band I see whenever I can. This was a slightly different set where the first half was called &amp;#8220;Atmospheric&amp;#8221; and concentrated on some deeper cuts from their back catalogue and the second half included all the hits.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/39529194-orchestral-manoeuvres-in-the-dark-at-royal-albert-hall"&gt;Chvrches at Brixton Academy&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;In 2020, I moved to a flat that&amp;#8217;s about fifteen minutes&amp;#8217; walk from Brixton Academy. But I had to wait about eighteen months in order to take advantage of that fact. The last couple of times I&amp;#8217;ve seen Chvrches were at Alexandra Palace, so it was nice to see them at a smaller venue again. This show featured a not-entirely unexpected guest appearance from Robert Smith.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/40060742-sunflower-bean-at-electric-ballroom"&gt;Sunflower Bean at Electric Ballroom&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Another act who I see live as often as I can. And this was a great venue to see them in.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/39584368-pet-shop-boys-at-o2"&gt;Pet Shop Boys at the O2 Arena&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;There&amp;#8217;s always one show a year that draws me to the soulless barn that is the O2 Arena. Every time I go there, I vow it&amp;#8217;ll be the last time &amp;#8211; but something always pulls me back. This year it was the chance to see a band I loved in the 80s and have never seen live. This was a fabulous greatest hits show that had been postponed from 2020.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/39894954-lorde-at-roundhouse"&gt;Lorde at the Roundhouse&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;A new Lorde album means another Lorde tour. And, like Chvrches, she swapped the huge expanse of Alexandra Palace for multiple nights at a smaller venue. This was a very theatrical show that matched the vibe of the &lt;em&gt;Solar Power&lt;/em&gt; album really well.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/40274226-lcd-soundsystem-at-o2-academy-brixton"&gt;LCD Soundsystem at Brixton Academy&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Another show at Brixton Academy. For some reason, I didn&amp;#8217;t know about this show until I walked past the venue a few days before and saw the &amp;#8220;sold out&amp;#8221; signs. But a day or so later, I got an email from the venue offering tickets. So I snapped one up and had an amazing evening. It was the first time I&amp;#8217;d seen them, but I strongly suspect it won&amp;#8217;t be the last. That&amp;#8217;s them in the photo at the top of this post.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/40320756-roxy-music-at-o2"&gt;Roxy Music at the O2 Arena&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Some years there are two shows that force me to the O2 Arena. And this was one of those years. I&amp;#8217;ve been a fan of Roxy Music since the 70s but I&amp;#8217;ve never seen them live. Honestly, it would have been better to have seen them in the 70s or 80s, but it was still a great show.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/40313030-beabadoobee-at-o2-academy-brixton"&gt;Beabadoobee at Brixton Academy&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Sometimes you go to see an artist because of one song and it just works out. This was one of those nights. In fact, it turns out I didn&amp;#8217;t actually know &amp;#8220;Coffee For Your Head&amp;#8221; very well &amp;#8211; I just knew the sample that was used in another artist&amp;#8217;s record. But this was a great night and I hope to see her again very soon.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/40493394-sugababes-at-eventim-apollo"&gt;Sugababes at Eventim Apollo&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Another night of fabulous nostalgia. The Eventim Apollo seems to have become my venue of choice to see re-formed girl groups from the 80s and 90s &amp;#8211; having seen Bananarama, All Saints and now The Sugababes there in recent years. They have a surprising number of hits (far more than I remembered before the show) and they put on a great show.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Not everything could make the top ten though. I think was the first year that I saw Stealing Sheep and they didn&amp;#8217;t make the list (their stage shows just get weirder and weirder and the Moth Club wasn&amp;#8217;t a great venue for it) and I was astonished to find myself slightly bored at the Nine Inch Nails show at Brixton Academy.&lt;/p&gt;



&lt;p&gt;A few shows sit just outside of the top ten &amp;#8211; St. Vincent at the Eventim Apollo, John Grant at the Shepherd&amp;#8217;s Bush Empire and Damon Albarn at the Barbican spring to mind.&lt;/p&gt;



&lt;p&gt;But, all in all, it was a good year for live music and I&amp;#8217;m looking forward to seeing more than sixteen shows this year.&lt;/p&gt;



&lt;p&gt;Did you see any great shows this year? Tell us about them in the comments.&lt;/p&gt;
&lt;p&gt;The post &lt;a rel="nofollow" href="https://blog.dave.org.uk/2023/02/2022-in-gigs.html"&gt;2022 in Gigs&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://blog.dave.org.uk"&gt;Davblog&lt;/a&gt;.&lt;/p&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Rather later than usual (again!) here is my review of the best ten gigs I saw in 2022. For the first time since 2019, I did actually see more than ten gigs in 2022 although my total of sixteen falls well short of my pre-pandemic years. Here are my ten favourite gigs of the year.… <a class="more-link" href="https://blog.dave.org.uk/2023/02/2022-in-gigs.html">Continue reading <span class="screen-reader-text">2022 in Gigs</span></a></p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2023/02/2022-in-gigs.html">2022 in Gigs</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://blog.dave.org.uk/?p=3897</id>
    <published>2023-02-03T16:32:37Z</published>
    <updated>2023-02-03T16:32:37Z</updated>
    <category term="music"/>
    <category term="2022"/>
    <category term="gigs"/>
    <category term="review"/>
    <category term="year in gigs"/>
  </entry>
  <entry>
    <title>Writing a CPAN module that talks to ChatGPT</title>
    <link rel="alternate" href="https://perlhacks.com/2022/12/writing-a-cpan-module-that-talks-to-chatgpt/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://chat.openai.com/chat">ChatGPT</a> exposes an API, but there’s no CPAN module for taking advantage of that. Let’s put that right (with help from ChatGPT)…</p>
<hr/>
<p><em>Write a Perl CPAN module for connecting to a ChatGPT server</em></p>
<p>To create a Perl CPAN module for connecting to a ChatGPT server, you will need to have Perl and the necessary dependencies installed on your system.</p>
<p>To begin, create a new directory for your module and create a file called “ChatGPT.pm” with the following content:</p><pre class="urvanov-syntax-highlighter-plain-tag">package ChatGPT;

use strict;
use warnings;

use Net::WebSocket::Client;
use Net::WebSocket::Server;
use HTTP::Async;

sub new {
  my ($class, %params) = @_;
  my $self = {
    host =&gt; $params{host},
    port =&gt; $params{port},
  };

  bless $self, $class;

  return $self;
}

sub send_prompt {
  my ($self, $prompt) = @_;

  my $http = HTTP::Async-&gt;new;
  my $client = Net::WebSocket::Client-&gt;new(
    url =&gt; "ws://$self-&gt;{host}:$self-&gt;{port}"
  );

  $client-&gt;connect;
  $client-&gt;send_utf8($prompt);

  my $response = $client-&gt;recv;

  $client-&gt;disconnect;

  return $response;
}

1;</pre><p>To use this module in your Perl code, you can create a new ChatGPT object and call the <code>send_prompt</code> method like this:</p><pre class="urvanov-syntax-highlighter-plain-tag">use ChatGPT;

my $chatgpt = ChatGPT-&gt;new(host =&gt; 'localhost', port =&gt; 8080);
my $response = $chatgpt-&gt;send_prompt('What is your name?');
print "Response: $response\n";</pre><p>This will send the text prompt “What is your name?” to the ChatGPT server running on localhost at port 8080, and print the response to the console.</p>
<p>Note: This is just a basic example of how you can create a Perl CPAN module for connecting to a ChatGPT server. There are many other features and considerations that you may want to add to your module, such as error handling and customization options.</p>
<p>To make your module available on CPAN, you will need to follow the guidelines for creating and distributing CPAN modules, which can be found in the Perl documentation and online resources.</p>
<p><em>Use Moose to create the class</em></p>
<p>To use Moose to create the <code>ChatGPT</code> class, you will need to have Moose installed on your system. You can install Moose by running the following command:</p><pre class="urvanov-syntax-highlighter-plain-tag">cpanm Moose</pre><p>With Moose installed, you can modify the class like this:</p><pre class="urvanov-syntax-highlighter-plain-tag">package ChatGPT;

use Moose;
use Net::WebSocket::Client;
use Net::WebSocket::Server;
use HTTP::Async;

has host =&gt; (
  is =&gt; 'ro',
  isa =&gt; 'Str',
  required =&gt; 1,
);

has port =&gt; (
  is =&gt; 'ro',
  isa =&gt; 'Int', required =&gt; 1,
);

sub send_prompt {
  my ($self, $prompt) = @_;

  my $http = HTTP::Async-&gt;new;
  my $client = Net::WebSocket::Client-&gt;new(
    url =&gt; "ws://$self-&gt;{host}:$self-&gt;{port}"
  );

  $client-&gt;connect; $client-&gt;send_utf8($prompt);
  my $response = $client-&gt;recv;
  $client-&gt;disconnect;

  return $response;
}

1;</pre><p>In this version of the class, the <code>host</code> and <code>port</code> attributes are defined using Moose’s <code>has</code> keyword. These attributes are required and must be specified when creating a new <code>ChatGPT</code> object. The <code>send_prompt</code> method is unchanged from the previous example.</p>
<p>To create a new <code>ChatGPT</code> object, you can use the <code>new</code> method provided by Moose like this:</p><pre class="urvanov-syntax-highlighter-plain-tag">use ChatGPT;

my $chatgpt = ChatGPT-&gt;new(host =&gt; 'localhost', port =&gt; 8080);

my $response = $chatgpt-&gt;send_prompt('What is your name?');

print "Response: $response\n";</pre><p>This will create a new <code>ChatGPT</code> object with the specified <code>host</code> and <code>port</code> attributes, and send the text prompt “What is your name?” to the ChatGPT server running on localhost at port 8080. The response will be printed to the console.</p>
<p>Note: This is just one way to use Moose to create the <code>ChatGPT</code> class. There are many other features and customization options available in Moose that you may want to consider adding to your class, such as type constraints, default values, and methods.</p>
<p><em>Call the class WebService::ChatGPT</em></p>
<p>To rename the <code>ChatGPT</code> class to <code>WebService::ChatGPT</code>, you will need to update the package name at the top of the file and update the <code>use</code> statements to refer to the new package name.</p>
<p>Here is how you can update the <code>ChatGPT</code> class to use the new package name:</p><pre class="urvanov-syntax-highlighter-plain-tag">package WebService::ChatGPT;

use Moose;
use Net::WebSocket::Client;
use Net::WebSocket::Server;

use HTTP::Async;

has host =&gt; (
  is =&gt; 'ro',
  isa =&gt; 'Str',
  required =&gt; 1,
);

has port =&gt; (
  is =&gt; 'ro',
  isa =&gt; 'Int',
  required =&gt; 1,
);

sub send_prompt {
  my ($self, $prompt) = @_;

  my $http = HTTP::Async-&gt;new;
  my $client = Net::WebSocket::Client-&gt;new(
    url =&gt; "ws://$self-&gt;{host}:$self-&gt;{port}"
  );

  $client-&gt;connect; $client-&gt;send_utf8($prompt);
  my $response = $client-&gt;recv;
  $client-&gt;disconnect;

  return $response;
}

1;</pre><p>With these changes, the class is now called <code>WebService::ChatGPT</code> and can be used like this:</p><pre class="urvanov-syntax-highlighter-plain-tag">use WebService::ChatGPT;

my $chatgpt = WebService::ChatGPT-&gt;new(host =&gt; 'localhost', port =&gt; 8080);

my $response = $chatgpt-&gt;send_prompt('What is your name?');
print "Response: $response\n";</pre><p>This will create a new <code>WebService::ChatGPT</code> object with the specified <code>host</code> and <code>port</code> attributes, and send the text prompt “What is your name?” to the ChatGPT server running on localhost at port 8080. The response will be printed to the console.,/p&gt;</p>
<p>Note: This is just one way to rename the <code>ChatGPT</code> class to <code>WebService::ChatGPT</code>. You may also need to update any other references to the class name in your code and documentation, as well as update the module file name and directory structure to reflect the new package name.</p>
<p><em>Suggest some tests using the standard Perl testing framework</em></p>
<p>Here are some examples of tests that you could write for the <code>WebService::ChatGPT</code> module using the standard Perl testing framework (Test::More):</p><pre class="urvanov-syntax-highlighter-plain-tag">use Test::More;
use WebService::ChatGPT;

# Test creating a new ChatGPT object
my $chatgpt = WebService::ChatGPT-&gt;new(host =&gt; 'localhost', port =&gt; 8080);
isa_ok($chatgpt, 'WebService::ChatGPT', 'Object is a ChatGPT');

# Test sending a prompt and receiving a response
my $response = $chatgpt-&gt;send_prompt('What is your name?');
is($response, 'My name is ChatGPT.', 'Response is correct');

# Test sending an invalid prompt
eval { $chatgpt-&gt;send_prompt('') };
like($@, qr/Invalid prompt/, 'Invalid prompt error is thrown');

done_testing();</pre><p>The first test uses the <code>isa_ok</code> function to check that the object created by the <code>new</code> method is an instance of the <code>WebService::ChatGPT</code> class.</p>
<p>The second test uses the <code>is</code> function to compare the expected response to the actual response returned by the <code>send_prompt</code> method.</p>
<p>The third test uses the <code>eval</code> function to catch any exceptions thrown by the <code>send_prompt</code> method when an invalid prompt is provided, and the <code>like</code> function to check that the exception message matches the expected error message.</p>
<p>These tests can be run using the <code>prove</code> command:</p><pre class="urvanov-syntax-highlighter-plain-tag">prove -l t/chatgpt.t</pre><p/>
<hr/>
<p>I haven’t uploaded it to CPAN yet. Do you think I should?</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/12/writing-a-cpan-module-that-talks-to-chatgpt/">Writing a CPAN module that talks to ChatGPT</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>ChatGPT exposes an API, but there’s no CPAN module for taking advantage of that. Let’s put that right (with help from ChatGPT)… Write a Perl CPAN module for connecting to a ChatGPT server To create a Perl CPAN module for connecting to a ChatGPT server, you will need to have Perl and the necessary dependencies… <a class="more-link" href="https://perlhacks.com/2022/12/writing-a-cpan-module-that-talks-to-chatgpt/">Continue reading <span class="screen-reader-text">Writing a CPAN module that talks to ChatGPT</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/12/writing-a-cpan-module-that-talks-to-chatgpt/">Writing a CPAN module that talks to ChatGPT</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2093</id>
    <published>2022-12-20T16:12:38Z</published>
    <updated>2022-12-20T16:12:38Z</updated>
    <category term="Programming"/>
    <category term="ai"/>
    <category term="chatgpt"/>
    <category term="cpan"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>5 Reasons Why Using AI to Generate Blog Posts Can Destroy Your SEO</title>
    <link rel="alternate" href="https://davorg.medium.com/5-reasons-why-using-ai-to-generate-blog-posts-can-destroy-your-seo-f8db298de65b?source=rss-3781feb8a4f4------2" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://davorg.medium.com/5-reasons-why-using-ai-to-generate-blog-posts-can-destroy-your-seo-f8db298de65b?source=rss-3781feb8a4f4------2"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1568/0*g61hVmjPNir439PR.jpg" width="1568"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Using artificial intelligence (AI) to generate blog posts can be bad for search engine optimization (SEO) for several reasons.&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://davorg.medium.com/5-reasons-why-using-ai-to-generate-blog-posts-can-destroy-your-seo-f8db298de65b?source=rss-3781feb8a4f4------2"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://medium.com/p/f8db298de65b</id>
    <published>2022-12-11T11:39:17Z</published>
    <updated>2022-12-11T11:41:05.321000Z</updated>
    <category term="blogging"/>
    <category term="ai"/>
    <category term="seo"/>
    <category term="tech"/>
  </entry>
  <entry>
    <title>5 Reasons Why Using AI to Generate Blog Posts Can Destroy Your SEO</title>
    <link rel="alternate" href="https://blog.dave.org.uk/2022/12/5-reasons-why-using-ai-to-generate-blog-posts-can-destroy-your-seo.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Using artificial intelligence (AI) to generate blog posts can be bad for search engine optimization (SEO) for several reasons.</p>



<p>First and foremost, AI-generated content is often low quality and lacks the depth and substance that search engines look for when ranking content. Because AI algorithms are not capable of understanding the nuances and complexities of human language, the content they produce is often generic, repetitive, and lacks originality. This can make it difficult for search engines to understand the context and relevance of the content, which can negatively impact its ranking.</p>



<p>Additionally, AI-generated content is often not well-written or structured, which can make it difficult for readers to understand and engage with. This can lead to a high bounce rate (the percentage of visitors who leave a website after only viewing one page), which can also hurt the website’s ranking.</p>



<p>Furthermore, AI-generated content is often not aligned with the website’s overall content strategy and goals. Because AI algorithms are not capable of understanding the website’s target audience, brand voice, and core messaging, the content they produce may not be relevant or useful to the website’s visitors. This can lead to a poor user experience, which can also hurt the website’s ranking.</p>



<p>Another issue with AI-generated content is that it can be seen as spammy or low quality by both search engines and readers. Because AI-generated content is often produced in large quantities and lacks originality, it can be seen as an attempt to manipulate search engine rankings or trick readers into engaging with the website. This can lead to the website being penalized by search engines or losing the trust and loyalty of its visitors.</p>



<p>In conclusion, using AI to generate blog posts can be bad for SEO for several reasons. AI-generated content is often low quality, poorly written, and not aligned with the website’s content strategy. It can also be seen as spammy or low quality by both search engines and readers, which can hurt the website’s ranking and reputation. It is important for websites to prioritize creating high-quality, original, and relevant content to improve their SEO and provide a positive user experience.</p>



<p>[This post was generated using <a href="https://chat.openai.com/">ChatGPT</a>]</p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2022/12/5-reasons-why-using-ai-to-generate-blog-posts-can-destroy-your-seo.html">5 Reasons Why Using AI to Generate Blog Posts Can Destroy Your SEO</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Using artificial intelligence (AI) to generate blog posts can be bad for search engine optimization (SEO) for several reasons. First and foremost, AI-generated content is often low quality and lacks the depth and substance that search engines look for when ranking content. Because AI algorithms are not capable of understanding the nuances and complexities of… <a class="more-link" href="https://blog.dave.org.uk/2022/12/5-reasons-why-using-ai-to-generate-blog-posts-can-destroy-your-seo.html">Continue reading <span class="screen-reader-text">5 Reasons Why Using AI to Generate Blog Posts Can Destroy Your SEO</span></a></p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2022/12/5-reasons-why-using-ai-to-generate-blog-posts-can-destroy-your-seo.html">5 Reasons Why Using AI to Generate Blog Posts Can Destroy Your SEO</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://blog.dave.org.uk/?p=3890</id>
    <published>2022-12-11T11:38:18Z</published>
    <updated>2022-12-11T11:38:18Z</updated>
    <category term="tech"/>
    <category term="ai"/>
    <category term="blogging"/>
    <category term="seo"/>
  </entry>
  <entry>
    <title>Containers for Coverage</title>
    <link rel="alternate" href="https://davorg.medium.com/containers-for-coverage-1db8dfc76c2d?source=rss-3781feb8a4f4------2" type="text/html"/>
    <content type="html">&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/0*YjwJ59dr4XVoMb1b.png" /&gt;&lt;/figure&gt;&lt;p&gt;I’ve been building Docker containers again. And I think you’ll find this one a little more useful than &lt;a href="https://perlhacks.com/2022/10/building-a-perlanet-container/"&gt;the Perlanet one&lt;/a&gt; I wrote about a couple of weeks ago.&lt;/p&gt;&lt;p&gt;Several years ago I got into &lt;a href="https://www.travis-ci.com/"&gt;Travis CI&lt;/a&gt; and set up lots of &lt;a href="https://github.com/davorg?tab=repositories"&gt;my GitHub repos&lt;/a&gt; so they automatically ran the tests each time I committed to the repo. Later on, I also worked out how to tie those test runs into &lt;a href="https://coveralls.io/"&gt;Coveralls.io&lt;/a&gt; so I got pretty graphs of how my test coverage was looking. I gave &lt;a href="https://www.slideshare.net/davorg/github-travisci-and-perl"&gt;a talk about what I had done&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;But two things changed.&lt;/p&gt;&lt;p&gt;Firstly, Travis CI got too popular and, eventually, removed their free service. And, secondly, &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; was introduced. Over the last few years, I’ve set up many of my repos to use GitHub Actions for CI. But, basically because I’m lazy, I didn’t remove the Travis CI configuration from those repos.&lt;/p&gt;&lt;p&gt;But last week I decided the time was right to start work on that. And when I went to remove the .travis.yml I realised that something was missing from my GitHub Actions CI workflows — they were running the unit tests, but they weren’t reporting on test coverage. So it was time to fix that.&lt;/p&gt;&lt;p&gt;I needed to reimplement the logic that connected Travis CI to Coveralls.io in a GitHub workflow. That actually turned out to be pretty simple. There’s a CPAN module called &lt;a href="https://metacpan.org/pod/Devel::Cover::Report::Coveralls"&gt;Devel::Cover::Report::Coveralls&lt;/a&gt; which takes the output from Devel::Cover, converts it to the correct format and sends it to Coveralls.io. And, as a bonus, it has documentation showing how to implement that in a GitHub workflow.&lt;/p&gt;&lt;p&gt;So I hacked at my workflow definition file for one of my CPAN modules and within a few minutes I had it working.&lt;/p&gt;&lt;p&gt;Well, I say “a few minutes”, but it took over thirteen minutes to run. It turns out that Devel::Cover::Report::Coveralls is a pretty heavyweight module and needs to install a lot of other modules in order to do its work.&lt;/p&gt;&lt;p&gt;At this point, you can probably guess where this is going. And you’d be right.&lt;/p&gt;&lt;p&gt;I’ve created a Docker container that has Devel::Cover::Report::Coveralls already installed. And, obviously, it’s available for everyone to use from the Docker hub — &lt;a href="https://hub.docker.com/repository/docker/davorg/perl-coveralls"&gt;davorg/perl-coveralls&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;A couple of small adjustments to my GitHub workflow and the coverage job is now running on my new container — and takes 29 seconds instead of 13 minutes. So that’s a win.&lt;/p&gt;&lt;p&gt;The relevant section of my &lt;a href="https://github.com/davorg/calendar-simple/blob/master/.github/workflows/perltest.yml"&gt;workflow file&lt;/a&gt; is here:&lt;/p&gt;&lt;pre&gt;coverage:&lt;br&gt;    runs-on: ubuntu-latest&lt;br&gt;    container: davorg/perl-coveralls:latest&lt;br&gt;    name: Test coverage&lt;br&gt;    steps:&lt;br&gt;      - uses: actions/checkout@v3&lt;br&gt;      - name: Install modules&lt;br&gt;        run: cpanm -n --installdeps .&lt;br&gt;      - name: Coverage&lt;br&gt;        env:&lt;br&gt;          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&lt;br&gt;        run: cover -test -report Coveralls&lt;/pre&gt;&lt;p&gt;And it’s producing nice graphs on Coveralls.io like the one above.&lt;/p&gt;&lt;p&gt;Let me know if you find it useful.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Originally published at &lt;/em&gt;&lt;a href="https://perlhacks.com/2022/10/containers-for-coverage/"&gt;&lt;em&gt;Perl Hacks&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1db8dfc76c2d" width="1" height="1" alt=""&gt;</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://medium.com/p/1db8dfc76c2d</id>
    <published>2022-10-18T17:02:45Z</published>
    <updated>2022-10-18T17:02:31.930000Z</updated>
    <category term="docker"/>
    <category term="test-coverage"/>
    <category term="testing"/>
    <category term="containers"/>
  </entry>
  <entry>
    <title>Containers for Coverage</title>
    <link rel="alternate" href="https://perlhacks.com/2022/10/containers-for-coverage/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve been building Docker containers again. And I think you’ll find this one a little more useful than <a href="https://perlhacks.com/2022/10/building-a-perlanet-container/">the Perlanet one</a> I wrote about a couple of weeks ago.</p>
<p>Several years ago I got into <a href="https://www.travis-ci.com/">Travis CI</a> and set up lots of <a href="https://github.com/davorg?tab=repositories">my GitHub repos</a> so they automatically ran the tests each time I committed to the repo. Later on, I also worked out how to tie those test runs into <a href="https://coveralls.io/">Coveralls.io</a> so I got pretty graphs of how my test coverage was looking. I gave <a href="https://www.slideshare.net/davorg/github-travisci-and-perl">a talk about what I had done</a>.</p>
<p>But two things changed.</p>
<p>Firstly, Travis CI got too popular and, eventually, removed their free service. And, secondly, <a href="https://github.com/features/actions">GitHub Actions</a> was introduced. Over the last few years, I’ve set up many of my repos to use GitHub Actions for CI. But, basically because I’m lazy, I didn’t remove the Travis CI configuration from those repos.</p>
<p>But last week I decided the time was right to start work on that. And when I went to remove the .travis.yml I realised that something was missing from my GitHub Actions CI workflows – they were running the unit tests, but they weren’t reporting on test coverage. So it was time to fix that.</p>
<p>I needed to reimplement the logic that connected Travis CI to Coveralls.io in a GitHub workflow. That actually turned out to be pretty simple. There’s a CPAN module called <a href="https://metacpan.org/pod/Devel::Cover::Report::Coveralls">Devel::Cover::Report::Coveralls</a> which takes the output from Devel::Cover, converts it to the correct format and sends it to Coveralls.io. And, as a bonus, it has documentation showing how to implement that in a GitHub workflow.</p>
<p>So I hacked at my workflow definition file for one of my CPAN modules and within a few minutes I had it working.</p>
<p>Well, I say “a few minutes”, but it took over thirteen minutes to run. It turns out that Devel::Cover::Report::Coveralls is a pretty heavyweight module and needs to install a lot of other modules in order to do its work.</p>
<p>At this point, you can probably guess where this is going. And you’d be right.</p>
<p>I’ve created a Docker container that has Devel::Cover::Report::Coveralls already installed. And, obviously, it’s available for everyone to use from the Docker hub – <a href="https://hub.docker.com/repository/docker/davorg/perl-coveralls">davorg/perl-coveralls</a>.</p>
<p>A couple of small adjustments to my GitHub workflow and the coverage job is now running on my new container – and takes 29 seconds instead of 13 minutes. So that’s a win.</p>
<p>The relevant section of my <a href="https://github.com/davorg/calendar-simple/blob/master/.github/workflows/perltest.yml">workflow file</a> is here:</p><pre class="urvanov-syntax-highlighter-plain-tag">coverage:
    runs-on: ubuntu-latest
    container: davorg/perl-coveralls:latest
    name: Test coverage
    steps:
      - uses: actions/checkout@v3
      - name: Install modules
        run: cpanm -n --installdeps .
      - name: Coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cover -test -report Coveralls</pre><p>And it’s producing nice graphs on Coveralls.io like the one above.</p>
<p>Let me know if you find it useful.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/containers-for-coverage/">Containers for Coverage</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve been building Docker containers again. And I think you’ll find this one a little more useful than the Perlanet one I wrote about a couple of weeks ago. Several years ago I got into Travis CI and set up lots of my GitHub repos so they automatically ran the tests each time I committed… <a class="more-link" href="https://perlhacks.com/2022/10/containers-for-coverage/">Continue reading <span class="screen-reader-text">Containers for Coverage</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/containers-for-coverage/">Containers for Coverage</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2087</id>
    <published>2022-10-18T17:01:50Z</published>
    <updated>2022-10-18T17:01:50Z</updated>
    <category term="Packaging"/>
    <category term="container"/>
    <category term="coveralls.io"/>
    <category term="docker"/>
    <category term="test coverage"/>
    <category term="testing"/>
  </entry>
  <entry>
    <title>Not that PR, thanks</title>
    <link rel="alternate" href="https://davorg.medium.com/not-that-pr-thanks-a1b15653a75?source=rss-3781feb8a4f4------2" type="text/html"/>
    <content type="html">&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/966/0*pLISkpVDhfg0_iwn.png" /&gt;&lt;/figure&gt;&lt;p&gt;It’s October. And that means that &lt;a href="https://hacktoberfest.com/"&gt;Hacktoberfest&lt;/a&gt; has started. If you can get four pull requests accepted on other people’s code repositories during October then you can win a t-shirt.&lt;/p&gt;&lt;p&gt;In many ways, I think it’s a great idea. It encourages people to get involved in open source software. But in other ways, it can be a bit of a pain in the arse. Some people go crazy for a free t-shirt and that means you’ll almost certainly get several pull requests that aren’t really of the quality you’d hope for.&lt;/p&gt;&lt;p&gt;I have a particular problem that probably isn’t very common. I’ve talked before about the “semi-static” sites I run on GitHub Pages. There’s some data in a GitHub Repo and every couple of hours the system wakes up and runs some code which generates a few HTML pages and commits those HTML pages into the repo’s “/docs” directory. And — hey presto! — there’s a new version of your web site.&lt;/p&gt;&lt;p&gt;A good example is &lt;a href="https://perl.theplanetarium.org/"&gt;Planet Perl&lt;/a&gt;. The data is a YAML file which mostly consists of a list of web feeds. Every couple of hours we run &lt;a href="https://metacpan.org/dist/Perlanet/view/bin/perlanet"&gt;perlanet&lt;/a&gt; to pull in those web feeds and build a new version of the web site containing the latest articles about Perl.&lt;/p&gt;&lt;p&gt;Can you see what the problem is?&lt;/p&gt;&lt;p&gt;The problem is that the most obvious file in the repo is the “index.html” which is the web site. So when people find that repo and want to make a small change to the web site they’ll change that “index.html” file. But that file is generated. Every few hours, any changes to that file are overwritten as a new version is created. You actually want to change “index.tt”. But that uses &lt;a href="https://metacpan.org/dist/Template-Toolkit/view/lib/Template/Manual/Directives.pod"&gt;Template Toolkit syntax&lt;/a&gt;, so it’s easy enough to see why people with no Perl knowledge might want to avoid editing that.&lt;/p&gt;&lt;p&gt;The &lt;a href="https://github.com/davorg/planetperl/blob/master/README.md"&gt;README file&lt;/a&gt; for the project explains which files you might want to change in order to make different types of changes. But people don’t read that. Or, if they do read it, they ignore the bits that they don’t like.&lt;/p&gt;&lt;p&gt;So I get pull requests that I have to reject because they change the wrong files.&lt;/p&gt;&lt;p&gt;Last year I got enough of these problematic pull requests that I decided to automate a solution. And it’s &lt;a href="https://github.com/davorg/planetperl/blob/master/.github/workflows/reject-pr.yml"&gt;this pretty simple GitHub Workflow&lt;/a&gt;. It runs whenever my repo receives a pull request and looks at the files that have been changed. If that list of files includes “docs/index.html” then the PR is automatically closed with a polite message explaining what they’ve done wrong.&lt;/p&gt;&lt;p&gt;This makes my life easier. It’s possible it might make your life easier too.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Originally published at &lt;/em&gt;&lt;a href="https://perlhacks.com/2022/10/not-that-pr-thanks/"&gt;&lt;em&gt;Perl Hacks&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a1b15653a75" width="1" height="1" alt=""&gt;</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://medium.com/p/a1b15653a75</id>
    <published>2022-10-10T16:02:07Z</published>
    <updated>2022-10-10T16:02:20.401000Z</updated>
    <category term="github-actions"/>
    <category term="pull-request"/>
    <category term="workflow"/>
    <category term="semi-static-sites"/>
    <category term="github"/>
  </entry>
  <entry>
    <title>Should Children be Polite While Using Smart Speakers?</title>
    <link rel="alternate" href="https://blog.dave.org.uk/2022/05/should-children-be-polite-while-using-smart-speakers.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>‘Okay Google. Where is Antarctica?”</p>
<p>Children can now get answers to all their questions using smart speakers and digital voice assistants.</p>
<p>A few years ago, children would run to their parents or grandparents to answer their questions. But with the ascendence of voice assistants to the mainstream in recent years, many children rely more on technology than humans.</p>
<p>Is this a good idea?</p>
<p>How does it impact the children?</p>
<p>When children interact with people, it helps them be more thoughtful, creative, and imaginative.</p>
<p>When they use artificial intelligence instead, several issues come into the foreground. These include access to age-inappropriate content and increasing the possibility of being rude or unpleasant, affecting how they treat others.</p>
<p>As mentioned, technology has both pros and cons. There are benefits to children using these devices, including improving diction, communication, social skills, and gaining information without bothering their parents.</p>
<p>Many families find that smart speakers like Amazon Echo and Google Home are useful. They use them for several functions, ranging from answering questions to setting the thermostat. Research shows that up to nine out of ten children between the ages of four and eleven in the US are regularly using smart speakers — often without parental guidance and control. So, what is the best approach for a parent to take?</p>
<p>Children up to seven years old can find it challenging to differentiate between humans and devices, and this can lead to one of the biggest dangers. If the device fulfils their requests through rude behaviour, children may behave similarly to other humans.</p>
<h2>Do Parents Think Smart Devices Should Encourage Polite Conversations?</h2>
<p>Most parents consider it essential that smart devices should encourage polite conversations as a part of nurturing good habits in children. The Campaign for a Commercial-Free Childhood or CCFA is a US coalition of concerned parents, healthcare professionals, and educators. Recently, CCFA protested against Amazon Echo Dot Kids Edition, stating that it may affect children’s wellbeing. Because of this, they requested parents avoid buying Amazon Echo.</p>
<p>However, in reality, these smart devices have improved a lot and focus on encouraging polite conversations with children. It is all about how parents use and present these devices to their children, as these factors can influence them a lot.</p>
<p>But in simple terms, parents wish these devices to encourage politeness in their children. At the same time, they want their kids to understand the difference between artificial intelligence and humans while using these technological innovations.</p>
<h2>Do Parents Think Their Children are Less Polite While Using Smart Speakers?</h2>
<p>Many parents have seen their children behave rudely to smart speakers. Several parents have expressed their concerns through social media, blog posts and forums like Mumsnet. They fear these behaviours can impact their kids when they grow up.</p>
<p>A report published in Child Wise reached the conclusion that children who behave rudely to smart devices might be aggressive while they grow up, especially while dealing with other humans. It is, therefore, preferable if children use polite words while interacting with both humans and smart devices.</p>
<h2>What Approaches Have Been Taken By Tech Companies to Address the Problem?</h2>
<p>With interventions and rising concerns addressed by parents and health professionals, some tech companies have brought changes to virtual assistants and smart speakers.</p>
<p>The parental control features available in Alexa focus on training kids to be more polite. Amazon brands it as Magic Word, where the focus is on bringing positive enforcement. However, there is no penalty if children don’t speak politely. Available on Amazon Echo, this tool has added features like setting bedtimes, switching off devices, and blocking songs with explicit lyrics.</p>
<p>When it comes to Google Home, it has brought in a new feature called Pretty Please. Here, Google will perform an action only when children use, please. For instance, “Okay, Google. Please set the timer for 15 minutes.”</p>
<p>You can enable this feature through the Google Family Link, where you can find the settings for Home and Assistant. You can set these new standards for devices of your preference. Also, once you use it and figure things out, there will be no more issues in setting it up again.</p>
<p>These tools and their approaches are highly beneficial for kids and parents. As of now, these devices only offer basic features and limited replies. But with time, there could be technological changes that encourage children to have much more efficient and polite interactions.</p>
<h2>George and the Smart Home</h2>
<p>It was thinking about issues like this which led me to write my first children’s book — George and the Smart Home. In the book, George is a young boy who has problems getting the smart speakers in his house to do what he wants until he learns to be polite to them.</p>
<p>It is available now, as a paperback and a Kindle book, from Amazon.</p>
<p>Buy it from: <a href="https://amazon.com.au/dp/B09VPLGMBN">AU</a> / <a href="https://amazon.com.br/dp/B09VPLGMBN">BR</a> / <a href="https://amazon.ca/dp/B09VPLGMBN">CA</a> / <a href="https://amazon.de/dp/B09VPLGMBN">DE</a> / <a href="https://amazon.es/dp/B09VPLGMBN">ES</a> / <a href="https://amazon.fr/dp/B09VPLGMBN">FR</a> / <a href="https://amazon.in/dp/B09VPLGMBN">IN</a> / <a href="https://amazon.it/dp/B09VPLGMBN">IT</a> / <a href="https://amazon.co.jp/dp/B09VPLGMBN">JP</a> / <a href="https://amazon.com.mx/dp/B09VPLGMBN">MX</a> / <a href="https://amazon.nl/dp/B09VPLGMBN">NL</a> / <a href="https://amazon.co.uk/dp/B09VPLGMBN">UK</a> / <a href="https://amazon.com/dp/B09VPLGMBN">US</a></p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2022/05/should-children-be-polite-while-using-smart-speakers.html">Should Children be Polite While Using Smart Speakers?</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>‘Okay Google. Where is Antarctica?” Children can now get answers to all their questions using smart speakers and digital voice assistants. A few years ago, children would run to their parents or grandparents to answer their questions. But with the ascendence of voice assistants to the mainstream in recent years, many children rely more on… <a class="more-link" href="https://blog.dave.org.uk/2022/05/should-children-be-polite-while-using-smart-speakers.html">Continue reading <span class="screen-reader-text">Should Children be Polite While Using Smart Speakers?</span></a></p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2022/05/should-children-be-polite-while-using-smart-speakers.html">Should Children be Polite While Using Smart Speakers?</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://blog.dave.org.uk/?p=3885</id>
    <published>2022-05-02T13:09:10Z</published>
    <updated>2022-05-02T13:09:10Z</updated>
    <category term="media"/>
    <category term="books"/>
    <category term="children"/>
    <category term="george and the smart home"/>
    <category term="smart speakers"/>
  </entry>
  <entry>
    <title>2021 in Gigs</title>
    <link rel="alternate" href="https://blog.dave.org.uk/2022/01/2021-in-gigs.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>A little later than usual, here’s my review of the gigs I saw last year.</p>
<p>In 2020, I saw four gigs. In 2021, I almost doubled that to seven. Obviously, we spent a lot of the year with most music venues closed, so those few gigs I saw were all in the second half of the year. Usually, I’d list my top ten gigs. This year (as last year) I’ll be listing them all. So here they are in chronological order.</p>
<ul>
<li><strong><a href="https://www.songkick.com/concerts/39755096-mike-oldfield-at-royal-festival-hall-southbank-centre">Tubular Bells at the Royal Festival Hall</a></strong><br/>
This was a strange show for several reasons. Firstly, it was advertised as commemorating the fiftieth anniversary of <em>Tubular Bells</em>. But the album was released in 1973, so it was two years early (apparently it was the fiftieth anniversary of when Mike Oldfield started writing the piece). Secondly, Mike Oldfield wasn’t performing – but you needed to examine the publicity very carefully to work that out. And thirdly, there was a troupe of acrobats that were pointlessly leaping around the stage while the musicians played. All in all, I thought this was slightly disappointing.</li>
<li><strong><a href="https://www.songkick.com/concerts/38968289-heaven-17-at-roundhouse">Heaven 17 at the Roundhouse</a></strong><br/>
Many of these shows were postponed from 2020. This was originally intended to celebrate the fortieth anniversary of the Human League album, <em>Travelogue</em>, but it ended but being the forty-first anniversary. But none of that mattered. This was Heaven 17 playing all of the first two Human League albums and it was absolutely wonderful. Apparently, they had invited Phil Oakey to take part, but he wasn’t interested. That’s Heaven 17 in the photo above.</li>
<li><strong><a href="https://www.songkick.com/concerts/39828850-lump-at-scala">LUMP at the Scala</a></strong><br/>
LUMP is Laura Marling playing with Tunng’s Mike Lindsay. I kinda assumed that their first album was going to be a one-off, but they produced a second album in 2020. This was the first gig I’d been to in a cramped venue like the Scala for a couple of years and it all got a bit too much for me. I really didn’t enjoy the atmosphere and left during the third or fourth song. I still love the album though and I hope to build up my tolerance for gig crowds over the coming months.</li>
<li><strong><a href="https://www.songkick.com/concerts/39773071-staves-at-o2-shepherds-bush-empire">The Staves at Shepherd’s Bush Empire</a></strong><br/>
Actually, this was only two-thirds of the Staves. One of the sisters has has a baby recently and has decided to sit out tours for a couple of years. But the two remaining sisters still put on a great show.</li>
<li><strong><a href="https://www.songkick.com/concerts/39786793-laura-marling-at-roundhouse">Laura Marling at the Roundhouse</a></strong><br/>
Given how few gigs I saw last year, it’s surprising how repetitive they were. Here’s Laura Marling again (and the Roundhouse again!) Although she has yet to match the heights of the <em>Short Movie</em> tour, Laura Marling is always worth seeing and this show was no exception.</li>
<li><strong><a href="https://www.songkick.com/concerts/39662320-heaven-17-at-o2-shepherds-bush-empire">Heaven 17 at the Shepherd’s Bush</a></strong><strong><a href="https://www.songkick.com/concerts/39662320-heaven-17-at-o2-shepherds-bush-empire"> Empire</a></strong><br/>
More repetition. I think the two Heaven 17 gigs were originally supposed to be several months apart, but the vagaries of the Covid scheduling changes led to them being just two months apart. This one celebrated the fortieth (actually forty-first) anniversary of Heaven 17 starting and was a glorious journey through their back catalogue. Oh, and the support was Pete Wylie, so I can finally say I’ve seen all three members of the <a href="https://en.wikipedia.org/wiki/Crucial_Three">Crucial Three</a> live.</li>
<li><strong><a href="https://www.songkick.com/concerts/39709208-orchestral-manoeuvres-in-the-dark-at-eventim-apollo">Orchestral Manoeuvres in the Dark at Hammersmith Apollo</a></strong><br/>
OMD are just one of those bands that I see live whenever I can. I’ve now been seeing them for over forty years (since they supported Gary Numan in 1980). They have such a massive back catalogue that they can just play hit after hit for two hours. But this show was a bit different as they started by playing all of their 1981 album, <em>Architecture and Morality</em>. They were as good as I’ve ever seen them.</li>
</ul>
<p>And that was 2021. What will happen in 2022? Well, I have tickets for a dozen or shows but who knows how many of them I’ll actually see? I’ve already had emails postponing the Wolf Alice and Peter Hook shows I was going to see this month. I guess I’ll just have to wait and see how the rest of the year pans out.</p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2022/01/2021-in-gigs.html">2021 in Gigs</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>A little later than usual, here’s my review of the gigs I saw last year. In 2020, I saw four gigs. In 2021, I almost doubled that to seven. Obviously, we spent a lot of the year with most music venues closed, so those few gigs I saw were all in the second half of… <a class="more-link" href="https://blog.dave.org.uk/2022/01/2021-in-gigs.html">Continue reading <span class="screen-reader-text">2021 in Gigs</span></a></p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2022/01/2021-in-gigs.html">2021 in Gigs</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://blog.dave.org.uk/?p=3864</id>
    <published>2022-01-09T20:06:09Z</published>
    <updated>2022-01-09T20:06:09Z</updated>
    <category term="music"/>
    <category term="2021"/>
    <category term="gigs"/>
    <category term="review"/>
    <category term="year in gigs"/>
  </entry>
  <entry>
    <title>The Return of RTD</title>
    <link rel="alternate" href="https://blog.dave.org.uk/2021/09/the-return-of-rtd.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><em>Doctor Who</em> has a new showrunner. But he’s actually an old showrunner. Is that a good idea?</p>
<p>Since <a href="https://www.bbc.co.uk/news/entertainment-arts-58682472">the news broke</a> yesterday, <em>Doctor Who</em> fan forums have been discussing nothing but the fact that Russell T Davies is returning as showrunner after Chris Chibnall’s regeneration special is broadcast next year. Most fans seem to be very excited by this prospect; I’m not so sure.</p>
<p>Before I start, I should point out that I’ve been a big fan of Russell T Davies since long before he brought <em>Doctor Who</em> back to our screens in 2005. I’ll always be grateful for the work he did to bring the show back and I believe that he’s responsible for some great moments in <em>Doctor Who</em> history.</p>
<p>But I’m not sure I want to see him back as the showrunner. Let me explain why I’m so out of step with most of the show’s fans.</p>
<p>Firstly, although I’m grateful to him for bringing the show back, he’s not my favourite showrunner. Obviously, any <em>Doctor Who</em> is better than no <em>Doctor Who</em> but there was a lot of stuff in Davies’ first run that I didn’t like. For example, He was the person who first introduced us to companions’ families, which brought a slight soap opera feel to some of the episodes. Also, I thought that he often wrote himself into a bit of a corner. This was most apparent in the end of season two-parters. There were many occasions when the first part set up a fantastic premise only to be let down by a finale that just couldn’t live up to the promise. <em>The Stolen Earth</em> was great; <em>Journey’s End</em> was terrible. Then there’s <em>The End of Time</em>. Again, it started off well but had verged well into the ridiculous by the end of the first part. And don’t get me started on the self-indulgent, mawkish nonsense that made up the last twenty minutes of that story — leading to the Tenth Doctor’s regeneration.</p>
<p>I admit, however, that my opinions on Davies’ writing are purely personal. And, because of the massive rise in popularity of the show during his tenure, many viewers see his approach as the gold standard for how the show should work. My other points are, I hope, less opinion-based.</p>
<p>Secondly, <em>Doctor Who</em> is a show that should always be moving forward. In the classic era of the show, previous Doctors and companions would reappear very rarely. When someone left the show, you knew the chances of seeing them again were very slim. When an executive producer left (we didn’t call them showrunners back then) you knew that the show would change in new and experimental ways. Sometimes the changes didn’t work; most of the time they did. Change is fundamental to the show. It’s how the show has kept going for (most of) sixty years.</p>
<p>The newer sections of the audience don’t seem to realise that. I constantly hear fans wanting things to go back to how things were. As soon as Rose was written out at the end of series two, there were calls for her to come back. And while series four has some pretty good stuff in it, I think that bringing Rose back was pandering to the fanbase in an unhealthy way. We now have a situation where fans expect every character who has been written out of the show to be brought back at their whim. There aren’t very many weeks that pass without me seeing someone in a Facebook group suggesting some convoluted way that David Tennant could be brought back to be the Doctor again.</p>
<p>The show must always move forward. It must always change. I believe that RTD knows that, so I hope that his second era in charge will be sufficiently different to his first. But I worry that fans will start asking for Tennant back as the Doctor with Billie Piper by his side. For some fans, that seems to be the only version of the show they will be happy with.</p>
<p>Finally, I worry about what RTD’s reappointment means for the future of the show. When Chibnall’s departure was announced, all of the news stories claimed that he and Whittaker had a “three and out agreement” between themselves and that he only ever planned to do three years running the show. That’s rather at odds with the talk of him having a five-year plan for the show when he was appointed to the role. I realise that he will have done five years in the post by the time he goes, but he will have made three seasons and a handful of specials — so I’m not sure that counts.</p>
<p>No, I think it’s clear that Chibnall has been hounded out of the role by that toxic sector of the fanbase that refuses to give his work on the show a decent chance. And, given that Moffat also put up with a lot of abuse from certain fans, I begin to wonder how easy it is to find someone to take over the job. Chibnall’s departure was announced at the end of July and the BBC would certainly have known about it for some time before that. But they have failed to find someone new and exciting to take over the job and I wonder if it has become a bit of a poison chalice. People want to do the job because, hey, it’s running Doctor Who! But, on the other hand, if you don’t please the fanbase (and no-one can please all of the fanbase) then you’ll be vilified online and hounded off social media. Add to that the fact that both Davies and Moffat cited insane working schedules as part of their reason for leaving and, suddenly, the job doesn’t look quite as tempting.</p>
<p>I have no inside information here at all, but I wonder if the reappointment of RTD was an act of desperation on the part of the BBC. We know that Chibnall is steering the show up to and including a BBC centenary special that will be broadcast in 2022. But the show’s 60th anniversary is the year after that and without a showrunner, you can’t cast a new Doctor and without a new Doctor in place pretty soon, the 60th-anniversary celebrations would seem to be in danger.</p>
<p>The news of the reappointment has all been very celebratory, of course, but I wonder if that’s actually the case. I wonder if the BBC’s approach to RTD was more like this:</p>
<p>“So, that show you resurrected back in 2005. Well, we can’t find anyone to take over as showrunner, and unless we get things moving pretty quickly we’re not going to have a 60th anniversary worth speaking off. Seriously, we’re thinking of just cancelling it… unless you can suggest something that we could do…”</p>
<p>This, of course, leaves RTD thinking that the only way to save his baby is to step in himself. Maybe he’s stepped in as a stop-gap until the BBC finds someone else to take over. The announcement says he’s signed on for the 60th special and following series. But that’s a bit vague (because the English language doesn’t have a plural for “series”!) so who knows how long he’ll hang around for. Time will tell, I guess.</p>
<p>But, if you’re one of those fans who think it’s big or clever to be unrelentingly negative about the showrunner on social media, please stop and consider whether you’re part of a problem that could end up with no-one wanting the job and the show being cancelled.</p>
<p>All-in-all, I wish that the BBC hadn’t done this. I would have far preferred to see the show moving forward. But if, as I suspect, the alternative was no new Doctor Who for the foreseeable future, then obviously this is a good plan. I’m keen to see what Davies has in store.</p>
<p>But first I’m really excited to see what Chibnall has in store for his final series and the subsequent specials. If series 13 improves on series 12 to the extent that series 12 improved on series 11, then it’s going to be great.</p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2021/09/the-return-of-rtd.html">The Return of RTD</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Doctor Who has a new showrunner. But he’s actually an old showrunner. Is that a good idea? Since the news broke yesterday, Doctor Who fan forums have been discussing nothing but the fact that Russell T Davies is returning as showrunner after Chris Chibnall’s regeneration special is broadcast next year. Most fans seem to be… <a class="more-link" href="https://blog.dave.org.uk/2021/09/the-return-of-rtd.html">Continue reading <span class="screen-reader-text">The Return of RTD</span></a></p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2021/09/the-return-of-rtd.html">The Return of RTD</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://blog.dave.org.uk/?p=3882</id>
    <published>2021-09-25T12:59:24Z</published>
    <updated>2021-09-25T12:59:24Z</updated>
    <category term="media"/>
    <category term="Uncategorized"/>
  </entry>
</feed>
