<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>planet davorg</title>
  <link rel="alternate" href="https://davorg.theplanetarium.org/" type="text/html"/>
  <subtitle>Aggregating Dave's stuff</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2023-02-09T19:06:31Z</updated>
  <link rel="self" href="https://davorg.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://davorg.theplanetarium.org/</id>
  <entry>
    <title>Digital Witness - St. Vincent</title>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Digital Witness - St. Vincent</div>
    </summary>
    <link rel="alternate" href="https://www.last.fm/music/St.+Vincent/_/Digital+Witness" type="text/html"/>
    <updated>2023-02-09T16:54:11Z</updated>
    <author>
      <name>St. Vincent</name>
    </author>
    <id>https://musicbrainz.org/recording/20cdc750-47f9-4b81-b09e-a8aeaa11c369</id>
  </entry>
  <entry>
    <title>Bitter Symphony - Sylvan</title>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Bitter Symphony - Sylvan</div>
    </summary>
    <link rel="alternate" href="https://www.last.fm/music/Sylvan/_/Bitter+Symphony" type="text/html"/>
    <updated>2023-02-09T16:50:34Z</updated>
    <author>
      <name>Sylvan</name>
    </author>
    <id>https://musicbrainz.org/recording/19273b37-e301-336e-aecd-fb3864b9dc3a</id>
  </entry>
  <entry>
    <title>Comfortably Numb 2022 - Roger Waters</title>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Comfortably Numb 2022 - Roger Waters</div>
    </summary>
    <link rel="alternate" href="https://www.last.fm/music/Roger+Waters/_/Comfortably+Numb+2022" type="text/html"/>
    <updated>2023-02-09T16:41:51Z</updated>
    <author>
      <name>Roger Waters</name>
    </author>
    <id>https://musicbrainz.org/recording/42c899df-74c0-4a6f-9a6e-830379fba235</id>
  </entry>
  <entry>
    <title>High Rise - Ladytron</title>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">High Rise - Ladytron</div>
    </summary>
    <link rel="alternate" href="https://www.last.fm/music/Ladytron/_/High+Rise" type="text/html"/>
    <updated>2023-02-09T16:35:46Z</updated>
    <author>
      <name>Ladytron</name>
    </author>
    <id>https://musicbrainz.org/recording/11b5eaed-30ae-31cf-963c-f260552194e7</id>
  </entry>
  <entry>
    <title>The Night - Ladytron</title>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The Night - Ladytron</div>
    </summary>
    <link rel="alternate" href="https://www.last.fm/music/Ladytron/_/The+Night" type="text/html"/>
    <updated>2023-02-09T16:31:28Z</updated>
    <author>
      <name>Ladytron</name>
    </author>
    <id>https://musicbrainz.org/recording/b544c0ec-061f-4c9c-9080-a4173e6cbdc0</id>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:IssuesEvent/26979917355</id>
    <published>2023-02-09T12:21:40Z</published>
    <updated>2023-02-09T12:21:40Z</updated>
    <link type="text/html" rel="alternate" href="https://github.com/davorg/feeds/issues/8"/>
    <title type="html">davorg closed an issue in davorg/feeds</title>
    <author>
      <name>davorg</name>
      <email>dave@davecross.co.uk</email>
      <uri>https://github.com/davorg</uri>
    </author>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/24642?s=30&amp;v=4"/>
    <content type="html">&lt;div class="issues_closed js-feed-item-view" data-hydro-view="{&amp;quot;event_type&amp;quot;:&amp;quot;news_feed.event.view&amp;quot;,&amp;quot;payload&amp;quot;:{&amp;quot;event&amp;quot;:{&amp;quot;repo_id&amp;quot;:355866877,&amp;quot;actor_id&amp;quot;:24642,&amp;quot;public&amp;quot;:true,&amp;quot;type&amp;quot;:&amp;quot;IssuesEvent&amp;quot;,&amp;quot;target_id&amp;quot;:null,&amp;quot;id&amp;quot;:26979917355,&amp;quot;additional_details_shown&amp;quot;:false,&amp;quot;grouped&amp;quot;:false},&amp;quot;event_group&amp;quot;:null,&amp;quot;org_id&amp;quot;:null,&amp;quot;target_type&amp;quot;:&amp;quot;event&amp;quot;,&amp;quot;user_id&amp;quot;:null,&amp;quot;feed_card&amp;quot;:{&amp;quot;card_retrieved_id&amp;quot;:&amp;quot;39afc698-5a9e-4d2f-a780-b3da47d92609&amp;quot;},&amp;quot;originating_url&amp;quot;:&amp;quot;https://github.com/davorg.atom&amp;quot;}}" data-hydro-view-hmac="36d3ddcbe0f1931b6c65fe0a49027fc9e35eedfe4dcfc8eed0f771ead81e4937"&gt;&lt;div class="body"&gt;
&lt;!-- issues --&gt;
&lt;div class="d-flex flex-items-baseline py-4"&gt;
  &lt;div class="d-flex flex-column width-full"&gt;
    &lt;div class="d-flex flex-items-baseline mb-2"&gt;
      &lt;div class="color-fg-muted"&gt;
          &lt;span class="mr-2"&gt;&lt;a class="d-inline-block" href="/davorg" rel="noreferrer"&gt;&lt;img class="avatar avatar-user" src="https://avatars.githubusercontent.com/u/24642?s=64&amp;amp;v=4" width="32" height="32" alt="@davorg"&gt;&lt;/a&gt;&lt;/span&gt;
          &lt;a class="Link--primary no-underline wb-break-all" href="/davorg" rel="noreferrer"&gt;davorg&lt;/a&gt;
          
          closed
          an issue in
          &lt;a class="Link--primary no-underline wb-break-all" href="/davorg/feeds" rel="noreferrer"&gt;davorg/feeds&lt;/a&gt;
        &lt;span&gt;
          · &lt;relative-time datetime="2023-02-09T12:21:40Z" class="no-wrap" tense="past" format="micro"&gt;Feb 9, 2023&lt;/relative-time&gt;
        &lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="Box p-3 wb-break-all color-shadow-medium "&gt;
      &lt;svg height="16" aria-label="Issue" class="octicon octicon-issue-closed closed d-inline-block mt-1 float-left" viewBox="0 0 16 16" version="1.1" width="16" role="img"&gt;&lt;path d="M11.28 6.78a.75.75 0 00-1.06-1.06L7.25 8.69 5.78 7.22a.75.75 0 00-1.06 1.06l2 2a.75.75 0 001.06 0l3.5-3.5z"&gt;&lt;/path&gt;&lt;path fill-rule="evenodd" d="M16 8A8 8 0 110 8a8 8 0 0116 0zm-1.5 0a6.5 6.5 0 11-13 0 6.5 6.5 0 0113 0z"&gt;&lt;/path&gt;&lt;/svg&gt;
      &lt;div class="ml-4"&gt;
        &lt;span class="f4 lh-condensed text-bold color-fg-default"&gt;
          &lt;a title="Use HTTP::Exception" class="color-fg-default" aria-label="Use HTTP::Exception" href="/davorg/feeds/issues/8" rel="noreferrer"&gt;Use HTTP::Exception&lt;/a&gt;
        &lt;/span&gt;
        &lt;span class="f4 color-fg-muted ml-1"&gt;#8&lt;/span&gt;

      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:PushEvent/26979832358</id>
    <published>2023-02-09T12:18:08Z</published>
    <updated>2023-02-09T12:18:08Z</updated>
    <link type="text/html" rel="alternate" href="https://github.com/davorg/feeds/compare/a88b12e32b...54d90140fe"/>
    <title type="html">davorg pushed to main in davorg/feeds</title>
    <author>
      <name>davorg</name>
      <email>dave@davecross.co.uk</email>
      <uri>https://github.com/davorg</uri>
    </author>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/24642?s=30&amp;v=4"/>
    <content type="html">&lt;div class="push js-feed-item-view" data-hydro-view="{&amp;quot;event_type&amp;quot;:&amp;quot;news_feed.event.view&amp;quot;,&amp;quot;payload&amp;quot;:{&amp;quot;event&amp;quot;:{&amp;quot;repo_id&amp;quot;:355866877,&amp;quot;actor_id&amp;quot;:24642,&amp;quot;public&amp;quot;:true,&amp;quot;type&amp;quot;:&amp;quot;PushEvent&amp;quot;,&amp;quot;target_id&amp;quot;:null,&amp;quot;id&amp;quot;:26979832358,&amp;quot;additional_details_shown&amp;quot;:false,&amp;quot;grouped&amp;quot;:false},&amp;quot;event_group&amp;quot;:null,&amp;quot;org_id&amp;quot;:null,&amp;quot;target_type&amp;quot;:&amp;quot;event&amp;quot;,&amp;quot;user_id&amp;quot;:null,&amp;quot;feed_card&amp;quot;:{&amp;quot;card_retrieved_id&amp;quot;:&amp;quot;37de9f52-0d2e-4322-969d-9f29274361c5&amp;quot;},&amp;quot;originating_url&amp;quot;:&amp;quot;https://github.com/davorg.atom&amp;quot;}}" data-hydro-view-hmac="e173ef8b5f7b97899da91c5c22a891a7b7c6d6e82351db55c0f4789c8e974617"&gt;&lt;div class="body"&gt;
&lt;!-- push --&gt;
&lt;div class="d-flex flex-items-baseline py-4"&gt;
  &lt;div class="d-flex flex-column width-full"&gt;
    &lt;div class="color-fg-muted"&gt;
      &lt;span class="mr-2"&gt;&lt;a class="d-inline-block" href="/davorg" rel="noreferrer"&gt;&lt;img class="avatar avatar-user" src="https://avatars.githubusercontent.com/u/24642?s=64&amp;amp;v=4" width="32" height="32" alt="@davorg"&gt;&lt;/a&gt;&lt;/span&gt;
      &lt;a class="Link--primary no-underline wb-break-all" href="/davorg" rel="noreferrer"&gt;davorg&lt;/a&gt;
      
      pushed to
        &lt;a class="branch-name" href="/davorg/feeds/tree/main" rel="noreferrer"&gt;main&lt;/a&gt;
        in
      &lt;a class="Link--primary no-underline wb-break-all" href="/davorg/feeds" rel="noreferrer"&gt;davorg/feeds&lt;/a&gt;
      &lt;span&gt;
        · &lt;relative-time datetime="2023-02-09T12:18:08Z" class="no-wrap" tense="past" format="micro"&gt;Feb 9, 2023&lt;/relative-time&gt;
      &lt;/span&gt;

        &lt;div class="Box p-3 mt-2 color-shadow-medium "&gt;
          &lt;span&gt;1 commit to&lt;/span&gt;
          &lt;a class="branch-name" href="/davorg/feeds/tree/main" rel="noreferrer"&gt;main&lt;/a&gt;

          &lt;div class="commits pusher-is-only-committer"&gt;
            &lt;ul class="list-style-none"&gt;
                &lt;li class="d-flex flex-items-baseline"&gt;
                  &lt;span title="davorg"&gt;
                    &lt;a class="d-inline-block" href="/davorg" rel="noreferrer"&gt;&lt;img class="mr-1 avatar-user" src="https://avatars.githubusercontent.com/u/24642?s=32&amp;amp;v=4" width="16" height="16" alt="@davorg"&gt;&lt;/a&gt;
                  &lt;/span&gt;
                  &lt;code&gt;&lt;a class="mr-1" href="/davorg/feeds/commit/54d90140fe1851f2b27491f673cb5965ba1f598f" rel="noreferrer"&gt;54d9014&lt;/a&gt;&lt;/code&gt;
                  &lt;div class="dashboard-break-word lh-condensed"&gt;
                    &lt;blockquote&gt;
                      Use HTTP::Exception
                    &lt;/blockquote&gt;
                  &lt;/div&gt;
                &lt;/li&gt;


            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:IssuesEvent/26979676723</id>
    <published>2023-02-09T12:11:41Z</published>
    <updated>2023-02-09T12:11:41Z</updated>
    <link type="text/html" rel="alternate" href="https://github.com/davorg/feeds/issues/8"/>
    <title type="html">davorg opened an issue in davorg/feeds</title>
    <author>
      <name>davorg</name>
      <email>dave@davecross.co.uk</email>
      <uri>https://github.com/davorg</uri>
    </author>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/24642?s=30&amp;v=4"/>
    <content type="html">&lt;div class="issues_opened js-feed-item-view" data-hydro-view="{&amp;quot;event_type&amp;quot;:&amp;quot;news_feed.event.view&amp;quot;,&amp;quot;payload&amp;quot;:{&amp;quot;event&amp;quot;:{&amp;quot;repo_id&amp;quot;:355866877,&amp;quot;actor_id&amp;quot;:24642,&amp;quot;public&amp;quot;:true,&amp;quot;type&amp;quot;:&amp;quot;IssuesEvent&amp;quot;,&amp;quot;target_id&amp;quot;:null,&amp;quot;id&amp;quot;:26979676723,&amp;quot;additional_details_shown&amp;quot;:false,&amp;quot;grouped&amp;quot;:false},&amp;quot;event_group&amp;quot;:null,&amp;quot;org_id&amp;quot;:null,&amp;quot;target_type&amp;quot;:&amp;quot;event&amp;quot;,&amp;quot;user_id&amp;quot;:null,&amp;quot;feed_card&amp;quot;:{&amp;quot;card_retrieved_id&amp;quot;:&amp;quot;c6ca98c0-c690-42b5-9ec9-4250cc2749d9&amp;quot;},&amp;quot;originating_url&amp;quot;:&amp;quot;https://github.com/davorg.atom&amp;quot;}}" data-hydro-view-hmac="0631a76bcfdb26913cff8e1d2ea9396ceabd95df3b2b18e45596cdb425e1a96c"&gt;&lt;div class="body"&gt;
&lt;!-- issues --&gt;
&lt;div class="d-flex flex-items-baseline py-4"&gt;
  &lt;div class="d-flex flex-column width-full"&gt;
    &lt;div class="d-flex flex-items-baseline mb-2"&gt;
      &lt;div class="color-fg-muted"&gt;
          &lt;span class="mr-2"&gt;&lt;a class="d-inline-block" href="/davorg" rel="noreferrer"&gt;&lt;img class="avatar avatar-user" src="https://avatars.githubusercontent.com/u/24642?s=64&amp;amp;v=4" width="32" height="32" alt="@davorg"&gt;&lt;/a&gt;&lt;/span&gt;
          &lt;a class="Link--primary no-underline wb-break-all" href="/davorg" rel="noreferrer"&gt;davorg&lt;/a&gt;
          
          opened
          an issue in
          &lt;a class="Link--primary no-underline wb-break-all" href="/davorg/feeds" rel="noreferrer"&gt;davorg/feeds&lt;/a&gt;
        &lt;span&gt;
          · &lt;relative-time datetime="2023-02-09T12:11:41Z" class="no-wrap" tense="past" format="micro"&gt;Feb 9, 2023&lt;/relative-time&gt;
        &lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="Box p-3 wb-break-all color-shadow-medium "&gt;
      &lt;svg height="16" aria-label="Issue" class="octicon octicon-issue-opened open d-inline-block mt-1 float-left" viewBox="0 0 16 16" version="1.1" width="16" role="img"&gt;&lt;path d="M8 9.5a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"&gt;&lt;/path&gt;&lt;path fill-rule="evenodd" d="M8 0a8 8 0 100 16A8 8 0 008 0zM1.5 8a6.5 6.5 0 1113 0 6.5 6.5 0 01-13 0z"&gt;&lt;/path&gt;&lt;/svg&gt;
      &lt;div class="ml-4"&gt;
        &lt;span class="f4 lh-condensed text-bold color-fg-default"&gt;
          &lt;a title="Use HTTP::Exception" class="color-fg-default" aria-label="Use HTTP::Exception" href="/davorg/feeds/issues/8" rel="noreferrer"&gt;Use HTTP::Exception&lt;/a&gt;
        &lt;/span&gt;
        &lt;span class="f4 color-fg-muted ml-1"&gt;#8&lt;/span&gt;

      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:IssuesEvent/26979668993</id>
    <published>2023-02-09T12:11:22Z</published>
    <updated>2023-02-09T12:11:22Z</updated>
    <link type="text/html" rel="alternate" href="https://github.com/davorg/feeds/issues/6"/>
    <title type="html">davorg closed an issue in davorg/feeds</title>
    <author>
      <name>davorg</name>
      <email>dave@davecross.co.uk</email>
      <uri>https://github.com/davorg</uri>
    </author>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/24642?s=30&amp;v=4"/>
    <content type="html">&lt;div class="issues_closed js-feed-item-view" data-hydro-view="{&amp;quot;event_type&amp;quot;:&amp;quot;news_feed.event.view&amp;quot;,&amp;quot;payload&amp;quot;:{&amp;quot;event&amp;quot;:{&amp;quot;repo_id&amp;quot;:355866877,&amp;quot;actor_id&amp;quot;:24642,&amp;quot;public&amp;quot;:true,&amp;quot;type&amp;quot;:&amp;quot;IssuesEvent&amp;quot;,&amp;quot;target_id&amp;quot;:null,&amp;quot;id&amp;quot;:26979668993,&amp;quot;additional_details_shown&amp;quot;:false,&amp;quot;grouped&amp;quot;:false},&amp;quot;event_group&amp;quot;:null,&amp;quot;org_id&amp;quot;:null,&amp;quot;target_type&amp;quot;:&amp;quot;event&amp;quot;,&amp;quot;user_id&amp;quot;:null,&amp;quot;feed_card&amp;quot;:{&amp;quot;card_retrieved_id&amp;quot;:&amp;quot;b7ab476d-480c-4a53-bbaa-43a75b4ba1e3&amp;quot;},&amp;quot;originating_url&amp;quot;:&amp;quot;https://github.com/davorg.atom&amp;quot;}}" data-hydro-view-hmac="83517a8a5263bcf39bdd49656e445222686effad0cbddf7793678183bdb90037"&gt;&lt;div class="body"&gt;
&lt;!-- issues --&gt;
&lt;div class="d-flex flex-items-baseline py-4"&gt;
  &lt;div class="d-flex flex-column width-full"&gt;
    &lt;div class="d-flex flex-items-baseline mb-2"&gt;
      &lt;div class="color-fg-muted"&gt;
          &lt;span class="mr-2"&gt;&lt;a class="d-inline-block" href="/davorg" rel="noreferrer"&gt;&lt;img class="avatar avatar-user" src="https://avatars.githubusercontent.com/u/24642?s=64&amp;amp;v=4" width="32" height="32" alt="@davorg"&gt;&lt;/a&gt;&lt;/span&gt;
          &lt;a class="Link--primary no-underline wb-break-all" href="/davorg" rel="noreferrer"&gt;davorg&lt;/a&gt;
          
          closed
          an issue in
          &lt;a class="Link--primary no-underline wb-break-all" href="/davorg/feeds" rel="noreferrer"&gt;davorg/feeds&lt;/a&gt;
        &lt;span&gt;
          · &lt;relative-time datetime="2023-02-09T12:11:22Z" class="no-wrap" tense="past" format="micro"&gt;Feb 9, 2023&lt;/relative-time&gt;
        &lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="Box p-3 wb-break-all color-shadow-medium "&gt;
      &lt;svg height="16" aria-label="Issue" class="octicon octicon-issue-closed closed d-inline-block mt-1 float-left" viewBox="0 0 16 16" version="1.1" width="16" role="img"&gt;&lt;path d="M11.28 6.78a.75.75 0 00-1.06-1.06L7.25 8.69 5.78 7.22a.75.75 0 00-1.06 1.06l2 2a.75.75 0 001.06 0l3.5-3.5z"&gt;&lt;/path&gt;&lt;path fill-rule="evenodd" d="M16 8A8 8 0 110 8a8 8 0 0116 0zm-1.5 0a6.5 6.5 0 11-13 0 6.5 6.5 0 0113 0z"&gt;&lt;/path&gt;&lt;/svg&gt;
      &lt;div class="ml-4"&gt;
        &lt;span class="f4 lh-condensed text-bold color-fg-default"&gt;
          &lt;a title="Be smarter about decode/encode" class="color-fg-default" aria-label="Be smarter about decode/encode" href="/davorg/feeds/issues/6" rel="noreferrer"&gt;Be smarter about decode/encode&lt;/a&gt;
        &lt;/span&gt;
        &lt;span class="f4 color-fg-muted ml-1"&gt;#6&lt;/span&gt;

      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:IssuesEvent/26979639000</id>
    <published>2023-02-09T12:10:06Z</published>
    <updated>2023-02-09T12:10:06Z</updated>
    <link type="text/html" rel="alternate" href="https://github.com/davorg/feeds/issues/4"/>
    <title type="html">davorg closed an issue in davorg/feeds</title>
    <author>
      <name>davorg</name>
      <email>dave@davecross.co.uk</email>
      <uri>https://github.com/davorg</uri>
    </author>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/24642?s=30&amp;v=4"/>
    <content type="html">&lt;div class="issues_closed js-feed-item-view" data-hydro-view="{&amp;quot;event_type&amp;quot;:&amp;quot;news_feed.event.view&amp;quot;,&amp;quot;payload&amp;quot;:{&amp;quot;event&amp;quot;:{&amp;quot;repo_id&amp;quot;:355866877,&amp;quot;actor_id&amp;quot;:24642,&amp;quot;public&amp;quot;:true,&amp;quot;type&amp;quot;:&amp;quot;IssuesEvent&amp;quot;,&amp;quot;target_id&amp;quot;:null,&amp;quot;id&amp;quot;:26979639000,&amp;quot;additional_details_shown&amp;quot;:false,&amp;quot;grouped&amp;quot;:false},&amp;quot;event_group&amp;quot;:null,&amp;quot;org_id&amp;quot;:null,&amp;quot;target_type&amp;quot;:&amp;quot;event&amp;quot;,&amp;quot;user_id&amp;quot;:null,&amp;quot;feed_card&amp;quot;:{&amp;quot;card_retrieved_id&amp;quot;:&amp;quot;4f417e95-0690-4e8a-8a88-942eeaedc39d&amp;quot;},&amp;quot;originating_url&amp;quot;:&amp;quot;https://github.com/davorg.atom&amp;quot;}}" data-hydro-view-hmac="6bebfeb17e38772172fe243014dc04452230ad862427c31eb7341316b2854b59"&gt;&lt;div class="body"&gt;
&lt;!-- issues --&gt;
&lt;div class="d-flex flex-items-baseline py-4"&gt;
  &lt;div class="d-flex flex-column width-full"&gt;
    &lt;div class="d-flex flex-items-baseline mb-2"&gt;
      &lt;div class="color-fg-muted"&gt;
          &lt;span class="mr-2"&gt;&lt;a class="d-inline-block" href="/davorg" rel="noreferrer"&gt;&lt;img class="avatar avatar-user" src="https://avatars.githubusercontent.com/u/24642?s=64&amp;amp;v=4" width="32" height="32" alt="@davorg"&gt;&lt;/a&gt;&lt;/span&gt;
          &lt;a class="Link--primary no-underline wb-break-all" href="/davorg" rel="noreferrer"&gt;davorg&lt;/a&gt;
          
          closed
          an issue in
          &lt;a class="Link--primary no-underline wb-break-all" href="/davorg/feeds" rel="noreferrer"&gt;davorg/feeds&lt;/a&gt;
        &lt;span&gt;
          · &lt;relative-time datetime="2023-02-09T12:10:06Z" class="no-wrap" tense="past" format="micro"&gt;Feb 9, 2023&lt;/relative-time&gt;
        &lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="Box p-3 wb-break-all color-shadow-medium "&gt;
      &lt;svg height="16" aria-label="Issue" class="octicon octicon-issue-closed closed d-inline-block mt-1 float-left" viewBox="0 0 16 16" version="1.1" width="16" role="img"&gt;&lt;path d="M11.28 6.78a.75.75 0 00-1.06-1.06L7.25 8.69 5.78 7.22a.75.75 0 00-1.06 1.06l2 2a.75.75 0 001.06 0l3.5-3.5z"&gt;&lt;/path&gt;&lt;path fill-rule="evenodd" d="M16 8A8 8 0 110 8a8 8 0 0116 0zm-1.5 0a6.5 6.5 0 11-13 0 6.5 6.5 0 0113 0z"&gt;&lt;/path&gt;&lt;/svg&gt;
      &lt;div class="ml-4"&gt;
        &lt;span class="f4 lh-condensed text-bold color-fg-default"&gt;
          &lt;a title="Be cleverer about setting the content type" class="color-fg-default" aria-label="Be cleverer about setting the content type" href="/davorg/feeds/issues/4" rel="noreferrer"&gt;Be cleverer about setting the content type&lt;/a&gt;
        &lt;/span&gt;
        &lt;span class="f4 color-fg-muted ml-1"&gt;#4&lt;/span&gt;
          &lt;div class="dashboard-break-word lh-condensed mb-2 mt-1"&gt;
            &lt;p&gt;Use the content type from the source feed.&lt;/p&gt;
          &lt;/div&gt;

      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>@smithsam Yeah. Hence "Twitter-based apps", not "Twitter apps" :-)</title>
    <link rel="alternate" href="https://twitter.com/davorg/status/1623258009001394178" type="text/html"/>
    <id>https://twitter.com/davorg/status/1623258009001394178</id>
    <author>
      <name>Dave Cross</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">@smithsam Yeah. Hence "Twitter-based apps", not "Twitter apps" :-)</div>
    </content>
    <updated>2023-02-08T09:50:42Z</updated>
  </entry>
  <entry>
    <title>This is supposed to be happening tomorrow and, as far as I can see, there's still no information about this "paid b… https://t.co/uhNU8SR6I4</title>
    <link rel="alternate" href="https://twitter.com/davorg/status/1623252150250872836" type="text/html"/>
    <id>https://twitter.com/davorg/status/1623252150250872836</id>
    <author>
      <name>Dave Cross</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This is supposed to be happening tomorrow and, as far as I can see, there's still no information about this "paid b… https://t.co/uhNU8SR6I4</div>
    </content>
    <updated>2023-02-08T09:27:25Z</updated>
  </entry>
  <entry>
    <title>Ratio: The Simple Codes Behind the Craft of Everyday Cooking</title>
    <link rel="alternate" href="https://www.goodreads.com/review/show/5328005075?utm_medium=api&amp;utm_source=rss" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
      
      <a href="https://www.goodreads.com/book/show/3931154-ratio?utm_medium=api&amp;utm_source=rss"><img alt="Ratio: The Simple Codes Behind the Craft of Everyday Cooking" src="https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1348460187l/3931154._SY75_.jpg"/></a><br/>
                                      author: Michael Ruhlman<br/>
                                      name: David<br/>
                                      average rating: 4.06<br/>
                                      book published: 2009<br/>
                                      rating: 0<br/>
                                      read at: <br/>
                                      date added: 2023/02/06<br/>
                                      shelves: currently-reading<br/>
                                      review: <br/><br/>
                                      
    </div>
    </content>
    <id>https://www.goodreads.com/review/show/5328005075?utm_medium=api&amp;utm_source=rss</id>
    <published>2023-02-06T14:03:05-08:00</published>
    <updated>2023-02-06T14:03:05-08:00</updated>
  </entry>
  <entry>
    <title>♫ My Top 5 #lastfm artists: Billy Bragg (144), Belle and Sebastian (51), Pink Floyd (15), Lloyd Cole and The Commot… https://t.co/E7EUoyG3Wy</title>
    <link rel="alternate" href="https://twitter.com/davorg/status/1622143045356638208" type="text/html"/>
    <id>https://twitter.com/davorg/status/1622143045356638208</id>
    <author>
      <name>Dave Cross</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">♫ My Top 5 #lastfm artists: Billy Bragg (144), Belle and Sebastian (51), Pink Floyd (15), Lloyd Cole and The Commot… https://t.co/E7EUoyG3Wy</div>
    </content>
    <updated>2023-02-05T08:00:14Z</updated>
  </entry>
  <entry>
    <title>Interesting to see that @virginmedia have put the @TalkTV Dorries/Johnson "interview" behind parental control 😃</title>
    <link rel="alternate" href="https://twitter.com/davorg/status/1621825863862870016" type="text/html"/>
    <id>https://twitter.com/davorg/status/1621825863862870016</id>
    <author>
      <name>Dave Cross</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Interesting to see that @virginmedia have put the @TalkTV Dorries/Johnson "interview" behind parental control 😃</div>
    </content>
    <updated>2023-02-04T10:59:52Z</updated>
  </entry>
  <entry>
    <title>I did writing! A list of my ten favourite gigs of 2022.

https://t.co/IAfScB66YW</title>
    <link rel="alternate" href="https://twitter.com/davorg/status/1621547475419930629" type="text/html"/>
    <id>https://twitter.com/davorg/status/1621547475419930629</id>
    <author>
      <name>Dave Cross</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I did writing! A list of my ten favourite gigs of 2022.

https://t.co/IAfScB66YW</div>
    </content>
    <updated>2023-02-03T16:33:39Z</updated>
  </entry>
  <entry>
    <title>2022 in Gigs</title>
    <link rel="alternate" href="https://blog.dave.org.uk/2023/02/2022-in-gigs.html" type="text/html"/>
    <content type="html">
&lt;p&gt;Rather later than usual (again!) here is my review of the best ten gigs I saw in 2022. For the first time since 2019, I did actually see more than ten gigs in 2022 although my total of sixteen falls well short of my pre-pandemic years.&lt;/p&gt;



&lt;p&gt;Here are my ten favourite gigs of the year. As always, they&amp;#8217;re in chronological order.&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/39759069-pale-waves-at-roundhouse"&gt;Pale Waves at the Roundhouse&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;I&amp;#8217;ve seen Pale Waves a few times now and I think they&amp;#8217;ve firmly established their place on my &amp;#8220;see them whenever they tour near me&amp;#8221; list. This show was every bit as good as I&amp;#8217;ve ever seen them.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/39529194-orchestral-manoeuvres-in-the-dark-at-royal-albert-hall"&gt;Orchestral Manoeuvres in the Dark at the Royal Albert Hall&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Another band I see whenever I can. This was a slightly different set where the first half was called &amp;#8220;Atmospheric&amp;#8221; and concentrated on some deeper cuts from their back catalogue and the second half included all the hits.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/39529194-orchestral-manoeuvres-in-the-dark-at-royal-albert-hall"&gt;Chvrches at Brixton Academy&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;In 2020, I moved to a flat that&amp;#8217;s about fifteen minutes&amp;#8217; walk from Brixton Academy. But I had to wait about eighteen months in order to take advantage of that fact. The last couple of times I&amp;#8217;ve seen Chvrches were at Alexandra Palace, so it was nice to see them at a smaller venue again. This show featured a not-entirely unexpected guest appearance from Robert Smith.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/40060742-sunflower-bean-at-electric-ballroom"&gt;Sunflower Bean at Electric Ballroom&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Another act who I see live as often as I can. And this was a great venue to see them in.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/39584368-pet-shop-boys-at-o2"&gt;Pet Shop Boys at the O2 Arena&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;There&amp;#8217;s always one show a year that draws me to the soulless barn that is the O2 Arena. Every time I go there, I vow it&amp;#8217;ll be the last time &amp;#8211; but something always pulls me back. This year it was the chance to see a band I loved in the 80s and have never seen live. This was a fabulous greatest hits show that had been postponed from 2020.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/39894954-lorde-at-roundhouse"&gt;Lorde at the Roundhouse&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;A new Lorde album means another Lorde tour. And, like Chvrches, she swapped the huge expanse of Alexandra Palace for multiple nights at a smaller venue. This was a very theatrical show that matched the vibe of the &lt;em&gt;Solar Power&lt;/em&gt; album really well.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/40274226-lcd-soundsystem-at-o2-academy-brixton"&gt;LCD Soundsystem at Brixton Academy&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Another show at Brixton Academy. For some reason, I didn&amp;#8217;t know about this show until I walked past the venue a few days before and saw the &amp;#8220;sold out&amp;#8221; signs. But a day or so later, I got an email from the venue offering tickets. So I snapped one up and had an amazing evening. It was the first time I&amp;#8217;d seen them, but I strongly suspect it won&amp;#8217;t be the last. That&amp;#8217;s them in the photo at the top of this post.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/40320756-roxy-music-at-o2"&gt;Roxy Music at the O2 Arena&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Some years there are two shows that force me to the O2 Arena. And this was one of those years. I&amp;#8217;ve been a fan of Roxy Music since the 70s but I&amp;#8217;ve never seen them live. Honestly, it would have been better to have seen them in the 70s or 80s, but it was still a great show.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/40313030-beabadoobee-at-o2-academy-brixton"&gt;Beabadoobee at Brixton Academy&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Sometimes you go to see an artist because of one song and it just works out. This was one of those nights. In fact, it turns out I didn&amp;#8217;t actually know &amp;#8220;Coffee For Your Head&amp;#8221; very well &amp;#8211; I just knew the sample that was used in another artist&amp;#8217;s record. But this was a great night and I hope to see her again very soon.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.songkick.com/concerts/40493394-sugababes-at-eventim-apollo"&gt;Sugababes at Eventim Apollo&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Another night of fabulous nostalgia. The Eventim Apollo seems to have become my venue of choice to see re-formed girl groups from the 80s and 90s &amp;#8211; having seen Bananarama, All Saints and now The Sugababes there in recent years. They have a surprising number of hits (far more than I remembered before the show) and they put on a great show.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Not everything could make the top ten though. I think was the first year that I saw Stealing Sheep and they didn&amp;#8217;t make the list (their stage shows just get weirder and weirder and the Moth Club wasn&amp;#8217;t a great venue for it) and I was astonished to find myself slightly bored at the Nine Inch Nails show at Brixton Academy.&lt;/p&gt;



&lt;p&gt;A few shows sit just outside of the top ten &amp;#8211; St. Vincent at the Eventim Apollo, John Grant at the Shepherd&amp;#8217;s Bush Empire and Damon Albarn at the Barbican spring to mind.&lt;/p&gt;



&lt;p&gt;But, all in all, it was a good year for live music and I&amp;#8217;m looking forward to seeing more than sixteen shows this year.&lt;/p&gt;



&lt;p&gt;Did you see any great shows this year? Tell us about them in the comments.&lt;/p&gt;
&lt;p&gt;The post &lt;a rel="nofollow" href="https://blog.dave.org.uk/2023/02/2022-in-gigs.html"&gt;2022 in Gigs&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://blog.dave.org.uk"&gt;Davblog&lt;/a&gt;.&lt;/p&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Rather later than usual (again!) here is my review of the best ten gigs I saw in 2022. For the first time since 2019, I did actually see more than ten gigs in 2022 although my total of sixteen falls well short of my pre-pandemic years. Here are my ten favourite gigs of the year.… <a class="more-link" href="https://blog.dave.org.uk/2023/02/2022-in-gigs.html">Continue reading <span class="screen-reader-text">2022 in Gigs</span></a></p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2023/02/2022-in-gigs.html">2022 in Gigs</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://blog.dave.org.uk/?p=3897</id>
    <published>2023-02-03T16:32:37Z</published>
    <updated>2023-02-03T16:32:37Z</updated>
    <category term="music"/>
    <category term="2022"/>
    <category term="gigs"/>
    <category term="review"/>
    <category term="year in gigs"/>
  </entry>
  <entry>
    <title>Updating GitHub Pages using GitHub Actions</title>
    <link rel="alternate" href="https://dev.to/davorg/updating-github-pages-using-github-actions-395a" type="text/html"/>
    <content type="html">&lt;p&gt;I thought it might be fun to show how I spent an hour or so yesterday throwing together a simple web site that is hosted on &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; and is updated daily using &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  
  
  An itch to scratch
&lt;/h2&gt;

&lt;p&gt;So many web sites start out with an itch to scratch, and this one is no different. In this case, it was about wanting to stay more informed.&lt;/p&gt;

&lt;p&gt;Each day, the &lt;a href="https://bbc.co.uk/news/"&gt;BBC News web site&lt;/a&gt; publishes a story that shows the front pages of all of the British newspapers. Although a lot of the British press isn't particularly trustworthy, I still think it's good to get an overview of what they're saying about the day's news. So finding and reading this story on the BBC site is one of my morning rituals.&lt;/p&gt;

&lt;p&gt;But they don't make it easy to find the archive of those stories. So it's hard to read anything than the current day's front pages - and even that story tends to vanish from the BBC site by lunchtime. I decided I'd like a page that contains an archive to these stories.&lt;/p&gt;

&lt;h2&gt;
  
  
  Scraping the site
&lt;/h2&gt;

&lt;p&gt;The BBC don't publish an API for their web site, so we need to resort to screen-scraping. That, of course makes the process inherently fragile but it seems to be the best we can do at this stage.&lt;/p&gt;

&lt;p&gt;It wasn't hard to create a program that pulls what I want from the web site using &lt;a href="https://metacpan.org/pod/Web::Query"&gt;Web::Query&lt;/a&gt; (my tool of choice for scraping web sites).&lt;/p&gt;

&lt;p&gt;Of course, having scraped the data, we need to store it somewhere. I decided to store it in a JSON document and worry about displaying it later.&lt;/p&gt;

&lt;p&gt;So here's the code I wrote:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;say&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Time::&lt;/span&gt;&lt;span class="nv"&gt;Piece&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Web::&lt;/span&gt;&lt;span class="nv"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$site&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://bbc.co.uk&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$site&lt;/span&gt;&lt;span class="s2"&gt;/news/&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;docs/papers.json&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$js_p&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;pretty&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;canonical&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$js_p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$json&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$start_len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@$data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;wq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$q&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;find&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nv"&gt;$elem&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/^The Papers:/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@$data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;localtime&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;%Y-%m-%d&lt;/span&gt;&lt;span class="p"&gt;'),&lt;/span&gt;
    &lt;span class="s"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$elem&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;s/^The Papers:\s*//r&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$site&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$elem&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;href&lt;/span&gt;&lt;span class="p"&gt;'),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@$data&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$start_len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;warn&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No new article found&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt; &lt;span class="nv"&gt;$js_p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing too complex there. We look for all of the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags in the page and ignore the ones that don't contain text starting with "The Papers:". We then extract the information we want (the text, the link and the date) and store that all in the JSON document.&lt;/p&gt;

&lt;p&gt;At that point, I could run the code to create the JSON file. I then created the GitHub repository and turned on GitHub Pages for the repo. Once that was all working, I could browse to &lt;a href="https://davorg.github.io/bbc_papers/papers.json"&gt;https://davorg.github.io/bbc_papers/papers.json&lt;/a&gt; to see the JSON.&lt;/p&gt;

&lt;h2&gt;
  
  
  Doing it every day
&lt;/h2&gt;

&lt;p&gt;We need to run this code every day. That's simple enough with GitHub Actions. We simply add a workflow definition file to the repo. The workflow looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Overnight processing&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;9&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v3&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install cpanm&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install cpanminus&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install dependencies&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sudo cpanm -n --installdeps .&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Add data&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./get_link&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Commit new page&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;GIT_STATUS=$(git status --porcelain)&lt;/span&gt;
        &lt;span class="s"&gt;echo $GIT_STATUS&lt;/span&gt;
        &lt;span class="s"&gt;git config user.name github-actions[bot]&lt;/span&gt;
        &lt;span class="s"&gt;git config user.email 41898282+github-actions[bot]@users.noreply.github.com&lt;/span&gt;
        &lt;span class="s"&gt;git add docs/&lt;/span&gt;
        &lt;span class="s"&gt;if [ "$GIT_STATUS" != "" ]; then git commit -m "Overnight job"; fi&lt;/span&gt;
        &lt;span class="s"&gt;if [ "$GIT_STATUS" != "" ]; then git push; fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, this is all pretty much standard stuff. We run the workflow on a Ubuntu container. It's a three-phase process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install everything we need&lt;/li&gt;
&lt;li&gt;Run the program to get the new data&lt;/li&gt;
&lt;li&gt;Commit the new data file to the repo&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that the workflow is triggered in two ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It runs at 09:00 every morning&lt;/li&gt;
&lt;li&gt;You can run it manually from the Actions tab in the repo (that's what the &lt;code&gt;workflow_dispatch&lt;/code&gt; line does)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  
  
  Displaying our wares
&lt;/h2&gt;

&lt;p&gt;Having got a daily build of the data, we need to create a web page to display it. I'm not a web designer, so this is going to be necessarily basic. I threw together a simple page using &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The next step was to grab the &lt;code&gt;papers.json&lt;/code&gt; document, parse it and then display it on the page. Now, I can wrangle Javascript pretty successfully most of the time. but I wanted to get this working as quickly as possible, so I asked ChatGPT for some help. It only took a few iterations for it to give me this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;papers.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tableBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;table tbody&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;td&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;textLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;td&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;textLink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textLink&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;tableBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It didn't work first time. But that's because I'm an idiot and didn't tell ChatGPT the name of my JSON document or how to correctly identify the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; element in the HTML. But once I'd corrected my errors it all worked perfectly.&lt;/p&gt;

&lt;h2&gt;
  
  
  Summing up
&lt;/h2&gt;

&lt;p&gt;So that's how I spent yesterday's lunch break. I can now see an archive of the BBC's stories about each day'd front pages by just going to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://davorg.github.io/bbc_papers/"&gt;https://davorg.github.io/bbc_papers/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, just after I'd written it, I (once again) had a look to see if someone else had created something similar and found the &lt;a href="https://www.bbc.co.uk/news/topics/cpml2v678pxt"&gt;BBC's page&lt;/a&gt; listing all of the stories. Ah well, I had fun putting my version together.&lt;/p&gt;

&lt;p&gt;All of this code is available &lt;a href="https://github.com/davorg/bbc_papers"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/updating-github-pages-using-github-actions-395a</id>
    <published>2023-01-13T16:04:05Z</published>
    <updated>2023-01-13T16:04:05Z</updated>
    <category term="perl"/>
    <category term="github"/>
    <category term="githubpages"/>
    <category term="githubactions"/>
  </entry>
  <entry>
    <title>DAVECROSS has released Parse-RPM-Spec-v1.1.2</title>
    <link rel="alternate" href="https://metacpan.org/release/DAVECROSS/Parse-RPM-Spec-v1.1.2" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl extension to parse RPM spec files.</div>
    </content>
    <author>
      <name>DAVECROSS</name>
    </author>
    <id>https://metacpan.org/release/DAVECROSS/Parse-RPM-Spec-v1.1.2</id>
    <published>2023-01-13T10:52:30Z</published>
    <updated>2023-01-13T10:52:30Z</updated>
  </entry>
  <entry>
    <title>Robo-committer for automated commits</title>
    <link rel="alternate" href="https://dev.to/davorg/robo-committer-for-automated-commits-2kba" type="text/html"/>
    <content type="html">&lt;p&gt;That's an screenshot of &lt;a href="https://github.com/davorg/"&gt;my GitHub contributions&lt;/a&gt; for the last year. Almost 50,000 commits is a ridiculous number for one person to make in a year. Obviously I had some help.&lt;/p&gt;

&lt;p&gt;The explanation is in my previous article &lt;a href="https://dev.to/davorg/github-actions-for-semi-static-web-sites-597g"&gt;GitHub Actions for semi-static web sites&lt;/a&gt;. In that article I explained how I was using GitHub Actions to rebuild a number of web sites every few hours. It doesn't take very many of those web sites before you start getting into dozens of automated commits every day. And it is, of course, those automated commits that are artificially inflating my commit count.&lt;/p&gt;

&lt;p&gt;This has been mildly worrying me over the last year. I decided that I needed to do something about it. I needed to find a way to separate my real commits from these automated ones.&lt;/p&gt;

&lt;p&gt;The previous article includes a sample GitHub Workflow file that I was using to run these sites. And it's easy to see what's causing the problem. There's a step that commits the newly-generated site and that step includes the following:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name 'Dave Cross'
git config --global user.email 'my email address'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;That email address is associated with my GitHub account and, therefore, those commits are seen as being made by me.&lt;/p&gt;

&lt;p&gt;A few weeks ago, I made the first step towards fixing this. I changed that configuration to this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name 'Automated Workflow'
git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We're using a more descriptive name and an email address that GitHub generates for us based on the username of the user who is running the workflow. This is better (as it won't assign commits to me if someone were to fork my repo and run the workflow) but it's still using an email address which GitHub has assigned to me and, therefore, the automated commits are still associated with me.&lt;/p&gt;

&lt;p&gt;Yesterday I had another dig into this problem and I have found the solution. The new version I use it this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config user.name github-actions[bot]
git config user.email 41898282+github-actions[bot]@users.noreply.github.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It turns out that there is a special GitHub user account that can be used to commit to your repos. This user is specifically there to solve the exact problem that I wanted to solve. It's just not particularly well-documented (or, if it is, it's not in the documentation that I've been looking at!)&lt;/p&gt;

&lt;p&gt;You might notice that I've also removed the &lt;code&gt;--global&lt;/code&gt; setting from the commands. On reflection, it seemed pointless to make global changes on a Docker container that is going to cease to exist in a minute or so.&lt;/p&gt;

&lt;p&gt;So that's what I now use on all of my workflows that regenerate web sites. It will mean that I make substantially fewer commits this year and I can no longer be accused of trying to game the system in order to artificially inflate my number of commits.&lt;/p&gt;

&lt;p&gt;Oh, and as a bonus, the GitHub Actions Bot has its own Octocat avatar that now appears in the commits for my repos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--te-jPozW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1p8uxysiucvdrqcf3p1f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--te-jPozW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1p8uxysiucvdrqcf3p1f.png" alt="GitHub commits" width="880" height="253"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's possible, of course, that I'm the last person in the world to realise this. But, hopefully, sharing the information will be useful to someone out there.&lt;/p&gt;

</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/robo-committer-for-automated-commits-2kba</id>
    <published>2023-01-06T11:59:39Z</published>
    <updated>2023-01-06T11:59:39Z</updated>
    <category term="github"/>
    <category term="githubactions"/>
    <category term="devops"/>
    <category term="commitbot"/>
  </entry>
  <entry>
    <title>DAVECROSS has released Perlanet-v2.2.1</title>
    <link rel="alternate" href="https://metacpan.org/release/DAVECROSS/Perlanet-v2.2.1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A program for creating programs that aggregate web feeds (both</div>
    </content>
    <author>
      <name>DAVECROSS</name>
    </author>
    <id>https://metacpan.org/release/DAVECROSS/Perlanet-v2.2.1</id>
    <published>2023-01-03T11:38:47Z</published>
    <updated>2023-01-03T11:38:47Z</updated>
  </entry>
  <entry xmlns:flickr="urn:flickr:user" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <title>Goodbye Vivienne</title>
    <link rel="alternate" type="text/html" href="https://www.flickr.com/photos/davorg/52595592514/"/>
    <id>tag:flickr.com,2005:/photo/52595592514</id>
    <published>2022-12-30T09:15:29Z</published>
    <updated>2022-12-30T09:15:29Z</updated>
    <flickr:date_taken>2022-12-30T09:15:29-08:00</flickr:date_taken>
    <dc:date.Taken>2022-12-30T09:15:29-08:00</dc:date.Taken>
    <content type="html">			&lt;p&gt;&lt;a href="https://www.flickr.com/people/davorg/"&gt;Dave Cross&lt;/a&gt; posted a photo:&lt;/p&gt;
	
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/davorg/52595592514/" title="Goodbye Vivienne"&gt;&lt;img src="https://live.staticflickr.com/65535/52595592514_49586513b2_m.jpg" width="240" height="240" alt="Goodbye Vivienne" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;via Instagram &lt;a href="https://instagr.am/p/CmyT_MSNR3-/" rel="noreferrer nofollow"&gt;instagr.am/p/CmyT_MSNR3-/&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>Dave Cross</name>
      <uri>https://www.flickr.com/people/davorg/</uri>
      <flickr:nsid>39021241@N00</flickr:nsid>
      <flickr:buddyicon>https://farm5.staticflickr.com/4759/buddyicons/39021241@N00.jpg?1516110776#39021241@N00</flickr:buddyicon>
    </author>
    <link rel="license" type="text/html" href="https://creativecommons.org/licenses/by-nc-sa/2.0/deed.en"/>
    <link rel="enclosure" type="image/jpeg" href="https://live.staticflickr.com/65535/52595592514_49586513b2_b.jpg"/>
    <category term="ifttt" scheme="https://www.flickr.com/photos/tags/"/>
    <category term="instagram" scheme="https://www.flickr.com/photos/tags/"/>
    <displaycategories>
            </displaycategories>
    </entry>
  <entry xmlns:flickr="urn:flickr:user" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <title>Low sun on Clapham Common this morning</title>
    <link rel="alternate" type="text/html" href="https://www.flickr.com/photos/davorg/52593755903/"/>
    <id>tag:flickr.com,2005:/photo/52593755903</id>
    <published>2022-12-29T10:40:20Z</published>
    <updated>2022-12-29T10:40:20Z</updated>
    <flickr:date_taken>2022-12-29T10:40:20-08:00</flickr:date_taken>
    <dc:date.Taken>2022-12-29T10:40:20-08:00</dc:date.Taken>
    <content type="html">			&lt;p&gt;&lt;a href="https://www.flickr.com/people/davorg/"&gt;Dave Cross&lt;/a&gt; posted a photo:&lt;/p&gt;
	
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/davorg/52593755903/" title="Low sun on Clapham Common this morning"&gt;&lt;img src="https://live.staticflickr.com/65535/52593755903_ec090ddc46_m.jpg" width="240" height="240" alt="Low sun on Clapham Common this morning" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;via Instagram &lt;a href="https://instagr.am/p/Cmv4y1eNiPn/" rel="noreferrer nofollow"&gt;instagr.am/p/Cmv4y1eNiPn/&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>Dave Cross</name>
      <uri>https://www.flickr.com/people/davorg/</uri>
      <flickr:nsid>39021241@N00</flickr:nsid>
      <flickr:buddyicon>https://farm5.staticflickr.com/4759/buddyicons/39021241@N00.jpg?1516110776#39021241@N00</flickr:buddyicon>
    </author>
    <link rel="license" type="text/html" href="https://creativecommons.org/licenses/by-nc-sa/2.0/deed.en"/>
    <link rel="enclosure" type="image/jpeg" href="https://live.staticflickr.com/65535/52593755903_ec090ddc46_b.jpg"/>
    <category term="ifttt" scheme="https://www.flickr.com/photos/tags/"/>
    <category term="instagram" scheme="https://www.flickr.com/photos/tags/"/>
    <displaycategories>
            </displaycategories>
    </entry>
  <entry xmlns:flickr="urn:flickr:user" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <title>There are about a dozen parakeets in this tree. I can hear them and (occasionally) see them</title>
    <link rel="alternate" type="text/html" href="https://www.flickr.com/photos/davorg/52593496674/"/>
    <id>tag:flickr.com,2005:/photo/52593496674</id>
    <published>2022-12-29T10:40:17Z</published>
    <updated>2022-12-29T10:40:17Z</updated>
    <flickr:date_taken>2022-12-29T10:40:17-08:00</flickr:date_taken>
    <dc:date.Taken>2022-12-29T10:40:17-08:00</dc:date.Taken>
    <content type="html">			&lt;p&gt;&lt;a href="https://www.flickr.com/people/davorg/"&gt;Dave Cross&lt;/a&gt; posted a photo:&lt;/p&gt;
	
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/davorg/52593496674/" title="There are about a dozen parakeets in this tree. I can hear them and (occasionally) see them"&gt;&lt;img src="https://live.staticflickr.com/65535/52593496674_6b0a00304d_m.jpg" width="240" height="240" alt="There are about a dozen parakeets in this tree. I can hear them and (occasionally) see them" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;via Instagram &lt;a href="https://instagr.am/p/Cmv4rUAta58/" rel="noreferrer nofollow"&gt;instagr.am/p/Cmv4rUAta58/&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>Dave Cross</name>
      <uri>https://www.flickr.com/people/davorg/</uri>
      <flickr:nsid>39021241@N00</flickr:nsid>
      <flickr:buddyicon>https://farm5.staticflickr.com/4759/buddyicons/39021241@N00.jpg?1516110776#39021241@N00</flickr:buddyicon>
    </author>
    <link rel="license" type="text/html" href="https://creativecommons.org/licenses/by-nc-sa/2.0/deed.en"/>
    <link rel="enclosure" type="image/jpeg" href="https://live.staticflickr.com/65535/52593496674_6b0a00304d_b.jpg"/>
    <category term="ifttt" scheme="https://www.flickr.com/photos/tags/"/>
    <category term="instagram" scheme="https://www.flickr.com/photos/tags/"/>
    <displaycategories>
            </displaycategories>
    </entry>
  <entry xmlns:flickr="urn:flickr:user" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <title>Sunrise on Clapham Common</title>
    <link rel="alternate" type="text/html" href="https://www.flickr.com/photos/davorg/52589267684/"/>
    <id>tag:flickr.com,2005:/photo/52589267684</id>
    <published>2022-12-27T12:12:03Z</published>
    <updated>2022-12-27T12:12:03Z</updated>
    <flickr:date_taken>2022-12-27T12:12:03-08:00</flickr:date_taken>
    <dc:date.Taken>2022-12-27T12:12:03-08:00</dc:date.Taken>
    <content type="html">			&lt;p&gt;&lt;a href="https://www.flickr.com/people/davorg/"&gt;Dave Cross&lt;/a&gt; posted a photo:&lt;/p&gt;
	
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/davorg/52589267684/" title="Sunrise on Clapham Common"&gt;&lt;img src="https://live.staticflickr.com/65535/52589267684_b2cf79a732_m.jpg" width="240" height="240" alt="Sunrise on Clapham Common" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;via Instagram &lt;a href="https://instagr.am/p/Cmq759NtKtE/" rel="noreferrer nofollow"&gt;instagr.am/p/Cmq759NtKtE/&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>Dave Cross</name>
      <uri>https://www.flickr.com/people/davorg/</uri>
      <flickr:nsid>39021241@N00</flickr:nsid>
      <flickr:buddyicon>https://farm5.staticflickr.com/4759/buddyicons/39021241@N00.jpg?1516110776#39021241@N00</flickr:buddyicon>
    </author>
    <link rel="license" type="text/html" href="https://creativecommons.org/licenses/by-nc-sa/2.0/deed.en"/>
    <link rel="enclosure" type="image/jpeg" href="https://live.staticflickr.com/65535/52589267684_b2cf79a732_b.jpg"/>
    <category term="ifttt" scheme="https://www.flickr.com/photos/tags/"/>
    <category term="instagram" scheme="https://www.flickr.com/photos/tags/"/>
    <displaycategories>
            </displaycategories>
    </entry>
  <entry>
    <title>Writing a CPAN module that talks to ChatGPT</title>
    <link rel="alternate" href="https://perlhacks.com/2022/12/writing-a-cpan-module-that-talks-to-chatgpt/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://chat.openai.com/chat">ChatGPT</a> exposes an API, but there’s no CPAN module for taking advantage of that. Let’s put that right (with help from ChatGPT)…</p>
<hr/>
<p><em>Write a Perl CPAN module for connecting to a ChatGPT server</em></p>
<p>To create a Perl CPAN module for connecting to a ChatGPT server, you will need to have Perl and the necessary dependencies installed on your system.</p>
<p>To begin, create a new directory for your module and create a file called “ChatGPT.pm” with the following content:</p><pre class="urvanov-syntax-highlighter-plain-tag">package ChatGPT;

use strict;
use warnings;

use Net::WebSocket::Client;
use Net::WebSocket::Server;
use HTTP::Async;

sub new {
  my ($class, %params) = @_;
  my $self = {
    host =&gt; $params{host},
    port =&gt; $params{port},
  };

  bless $self, $class;

  return $self;
}

sub send_prompt {
  my ($self, $prompt) = @_;

  my $http = HTTP::Async-&gt;new;
  my $client = Net::WebSocket::Client-&gt;new(
    url =&gt; "ws://$self-&gt;{host}:$self-&gt;{port}"
  );

  $client-&gt;connect;
  $client-&gt;send_utf8($prompt);

  my $response = $client-&gt;recv;

  $client-&gt;disconnect;

  return $response;
}

1;</pre><p>To use this module in your Perl code, you can create a new ChatGPT object and call the <code>send_prompt</code> method like this:</p><pre class="urvanov-syntax-highlighter-plain-tag">use ChatGPT;

my $chatgpt = ChatGPT-&gt;new(host =&gt; 'localhost', port =&gt; 8080);
my $response = $chatgpt-&gt;send_prompt('What is your name?');
print "Response: $response\n";</pre><p>This will send the text prompt “What is your name?” to the ChatGPT server running on localhost at port 8080, and print the response to the console.</p>
<p>Note: This is just a basic example of how you can create a Perl CPAN module for connecting to a ChatGPT server. There are many other features and considerations that you may want to add to your module, such as error handling and customization options.</p>
<p>To make your module available on CPAN, you will need to follow the guidelines for creating and distributing CPAN modules, which can be found in the Perl documentation and online resources.</p>
<p><em>Use Moose to create the class</em></p>
<p>To use Moose to create the <code>ChatGPT</code> class, you will need to have Moose installed on your system. You can install Moose by running the following command:</p><pre class="urvanov-syntax-highlighter-plain-tag">cpanm Moose</pre><p>With Moose installed, you can modify the class like this:</p><pre class="urvanov-syntax-highlighter-plain-tag">package ChatGPT;

use Moose;
use Net::WebSocket::Client;
use Net::WebSocket::Server;
use HTTP::Async;

has host =&gt; (
  is =&gt; 'ro',
  isa =&gt; 'Str',
  required =&gt; 1,
);

has port =&gt; (
  is =&gt; 'ro',
  isa =&gt; 'Int', required =&gt; 1,
);

sub send_prompt {
  my ($self, $prompt) = @_;

  my $http = HTTP::Async-&gt;new;
  my $client = Net::WebSocket::Client-&gt;new(
    url =&gt; "ws://$self-&gt;{host}:$self-&gt;{port}"
  );

  $client-&gt;connect; $client-&gt;send_utf8($prompt);
  my $response = $client-&gt;recv;
  $client-&gt;disconnect;

  return $response;
}

1;</pre><p>In this version of the class, the <code>host</code> and <code>port</code> attributes are defined using Moose’s <code>has</code> keyword. These attributes are required and must be specified when creating a new <code>ChatGPT</code> object. The <code>send_prompt</code> method is unchanged from the previous example.</p>
<p>To create a new <code>ChatGPT</code> object, you can use the <code>new</code> method provided by Moose like this:</p><pre class="urvanov-syntax-highlighter-plain-tag">use ChatGPT;

my $chatgpt = ChatGPT-&gt;new(host =&gt; 'localhost', port =&gt; 8080);

my $response = $chatgpt-&gt;send_prompt('What is your name?');

print "Response: $response\n";</pre><p>This will create a new <code>ChatGPT</code> object with the specified <code>host</code> and <code>port</code> attributes, and send the text prompt “What is your name?” to the ChatGPT server running on localhost at port 8080. The response will be printed to the console.</p>
<p>Note: This is just one way to use Moose to create the <code>ChatGPT</code> class. There are many other features and customization options available in Moose that you may want to consider adding to your class, such as type constraints, default values, and methods.</p>
<p><em>Call the class WebService::ChatGPT</em></p>
<p>To rename the <code>ChatGPT</code> class to <code>WebService::ChatGPT</code>, you will need to update the package name at the top of the file and update the <code>use</code> statements to refer to the new package name.</p>
<p>Here is how you can update the <code>ChatGPT</code> class to use the new package name:</p><pre class="urvanov-syntax-highlighter-plain-tag">package WebService::ChatGPT;

use Moose;
use Net::WebSocket::Client;
use Net::WebSocket::Server;

use HTTP::Async;

has host =&gt; (
  is =&gt; 'ro',
  isa =&gt; 'Str',
  required =&gt; 1,
);

has port =&gt; (
  is =&gt; 'ro',
  isa =&gt; 'Int',
  required =&gt; 1,
);

sub send_prompt {
  my ($self, $prompt) = @_;

  my $http = HTTP::Async-&gt;new;
  my $client = Net::WebSocket::Client-&gt;new(
    url =&gt; "ws://$self-&gt;{host}:$self-&gt;{port}"
  );

  $client-&gt;connect; $client-&gt;send_utf8($prompt);
  my $response = $client-&gt;recv;
  $client-&gt;disconnect;

  return $response;
}

1;</pre><p>With these changes, the class is now called <code>WebService::ChatGPT</code> and can be used like this:</p><pre class="urvanov-syntax-highlighter-plain-tag">use WebService::ChatGPT;

my $chatgpt = WebService::ChatGPT-&gt;new(host =&gt; 'localhost', port =&gt; 8080);

my $response = $chatgpt-&gt;send_prompt('What is your name?');
print "Response: $response\n";</pre><p>This will create a new <code>WebService::ChatGPT</code> object with the specified <code>host</code> and <code>port</code> attributes, and send the text prompt “What is your name?” to the ChatGPT server running on localhost at port 8080. The response will be printed to the console.,/p&gt;</p>
<p>Note: This is just one way to rename the <code>ChatGPT</code> class to <code>WebService::ChatGPT</code>. You may also need to update any other references to the class name in your code and documentation, as well as update the module file name and directory structure to reflect the new package name.</p>
<p><em>Suggest some tests using the standard Perl testing framework</em></p>
<p>Here are some examples of tests that you could write for the <code>WebService::ChatGPT</code> module using the standard Perl testing framework (Test::More):</p><pre class="urvanov-syntax-highlighter-plain-tag">use Test::More;
use WebService::ChatGPT;

# Test creating a new ChatGPT object
my $chatgpt = WebService::ChatGPT-&gt;new(host =&gt; 'localhost', port =&gt; 8080);
isa_ok($chatgpt, 'WebService::ChatGPT', 'Object is a ChatGPT');

# Test sending a prompt and receiving a response
my $response = $chatgpt-&gt;send_prompt('What is your name?');
is($response, 'My name is ChatGPT.', 'Response is correct');

# Test sending an invalid prompt
eval { $chatgpt-&gt;send_prompt('') };
like($@, qr/Invalid prompt/, 'Invalid prompt error is thrown');

done_testing();</pre><p>The first test uses the <code>isa_ok</code> function to check that the object created by the <code>new</code> method is an instance of the <code>WebService::ChatGPT</code> class.</p>
<p>The second test uses the <code>is</code> function to compare the expected response to the actual response returned by the <code>send_prompt</code> method.</p>
<p>The third test uses the <code>eval</code> function to catch any exceptions thrown by the <code>send_prompt</code> method when an invalid prompt is provided, and the <code>like</code> function to check that the exception message matches the expected error message.</p>
<p>These tests can be run using the <code>prove</code> command:</p><pre class="urvanov-syntax-highlighter-plain-tag">prove -l t/chatgpt.t</pre><p/>
<hr/>
<p>I haven’t uploaded it to CPAN yet. Do you think I should?</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/12/writing-a-cpan-module-that-talks-to-chatgpt/">Writing a CPAN module that talks to ChatGPT</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>ChatGPT exposes an API, but there’s no CPAN module for taking advantage of that. Let’s put that right (with help from ChatGPT)… Write a Perl CPAN module for connecting to a ChatGPT server To create a Perl CPAN module for connecting to a ChatGPT server, you will need to have Perl and the necessary dependencies… <a class="more-link" href="https://perlhacks.com/2022/12/writing-a-cpan-module-that-talks-to-chatgpt/">Continue reading <span class="screen-reader-text">Writing a CPAN module that talks to ChatGPT</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/12/writing-a-cpan-module-that-talks-to-chatgpt/">Writing a CPAN module that talks to ChatGPT</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2093</id>
    <published>2022-12-20T16:12:38Z</published>
    <updated>2022-12-20T16:12:38Z</updated>
    <category term="Programming"/>
    <category term="ai"/>
    <category term="chatgpt"/>
    <category term="cpan"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>Writing a CPAN module that talks to ChatGPT</title>
    <link rel="alternate" href="https://dev.to/davorg/writing-a-cpan-module-that-talks-to-chatgpt-gb5" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://chat.openai.com/chat"&gt;ChatGPT&lt;/a&gt; exposes an API, but there’s no CPAN module for taking advantage of that. Let’s put that right (with help from ChatGPT)…&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Write a Perl CPAN module for connecting to a ChatGPT server&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To create a Perl CPAN module for connecting to a ChatGPT server, you will need to have Perl and the necessary dependencies installed on your system.&lt;/p&gt;

&lt;p&gt;To begin, create a new directory for your module and create a file called “ChatGPT.pm” with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;ChatGPT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Net::WebSocket::&lt;/span&gt;&lt;span class="nv"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Net::WebSocket::&lt;/span&gt;&lt;span class="nv"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;HTTP::&lt;/span&gt;&lt;span class="nv"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$params&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;host&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$params&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nb"&gt;bless&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;send_prompt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$prompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;HTTP::&lt;/span&gt;&lt;span class="nv"&gt;Async&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Net::WebSocket::&lt;/span&gt;&lt;span class="nv"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ws://&lt;/span&gt;&lt;span class="si"&gt;$self&lt;/span&gt;&lt;span class="s2"&gt;-&amp;gt;{host}:&lt;/span&gt;&lt;span class="si"&gt;$self&lt;/span&gt;&lt;span class="s2"&gt;-&amp;gt;{port}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;send_utf8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$prompt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use this module in your Perl code, you can create a new ChatGPT object and call the &lt;code&gt;send_prompt&lt;/code&gt; method like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;ChatGPT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$chatgpt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;ChatGPT&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$chatgpt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;send_prompt&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;What is your name?&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Response: &lt;/span&gt;&lt;span class="si"&gt;$response&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will send the text prompt “What is your name?” to the ChatGPT server running on localhost at port 8080, and print the response to the console.&lt;/p&gt;

&lt;p&gt;Note: This is just a basic example of how you can create a Perl CPAN module for connecting to a ChatGPT server. There are many other features and considerations that you may want to add to your module, such as error handling and customization options.&lt;/p&gt;

&lt;p&gt;To make your module available on CPAN, you will need to follow the guidelines for creating and distributing CPAN modules, which can be found in the Perl documentation and online resources.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Use Moose to create the class&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To use Moose to create the &lt;code&gt;ChatGPT&lt;/code&gt; class, you will need to have Moose installed on your system. You can install Moose by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cpanm Moose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Moose installed, you can modify the class like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;ChatGPT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Net::WebSocket::&lt;/span&gt;&lt;span class="nv"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Net::WebSocket::&lt;/span&gt;&lt;span class="nv"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;HTTP::&lt;/span&gt;&lt;span class="nv"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;required&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;required&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;send_prompt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$prompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;HTTP::&lt;/span&gt;&lt;span class="nv"&gt;Async&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Net::WebSocket::&lt;/span&gt;&lt;span class="nv"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ws://&lt;/span&gt;&lt;span class="si"&gt;$self&lt;/span&gt;&lt;span class="s2"&gt;-&amp;gt;{host}:&lt;/span&gt;&lt;span class="si"&gt;$self&lt;/span&gt;&lt;span class="s2"&gt;-&amp;gt;{port}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;send_utf8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$prompt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this version of the class, the &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; attributes are defined using Moose’s &lt;code&gt;has&lt;/code&gt; keyword. These attributes are required and must be specified when creating a new &lt;code&gt;ChatGPT&lt;/code&gt; object. The &lt;code&gt;send_prompt&lt;/code&gt; method is unchanged from the previous example.&lt;/p&gt;

&lt;p&gt;To create a new &lt;code&gt;ChatGPT&lt;/code&gt; object, you can use the &lt;code&gt;new&lt;/code&gt; method provided by Moose like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;ChatGPT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$chatgpt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;ChatGPT&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$chatgpt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;send_prompt&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;What is your name?&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Response: &lt;/span&gt;&lt;span class="si"&gt;$response&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a new &lt;code&gt;ChatGPT&lt;/code&gt; object with the specified &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; attributes, and send the text prompt “What is your name?” to the ChatGPT server running on localhost at port 8080. The response will be printed to the console.&lt;/p&gt;

&lt;p&gt;Note: This is just one way to use Moose to create the &lt;code&gt;ChatGPT&lt;/code&gt; class. There are many other features and customization options available in Moose that you may want to consider adding to your class, such as type constraints, default values, and methods.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Call the class WebService::ChatGPT&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To rename the &lt;code&gt;ChatGPT&lt;/code&gt; class to &lt;code&gt;WebService::ChatGPT&lt;/code&gt;, you will need to update the package name at the top of the file and update the &lt;code&gt;use&lt;/code&gt; statements to refer to the new package name.&lt;/p&gt;

&lt;p&gt;Here is how you can update the &lt;code&gt;ChatGPT&lt;/code&gt; class to use the new package name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;WebService::&lt;/span&gt;&lt;span class="nv"&gt;ChatGPT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Net::WebSocket::&lt;/span&gt;&lt;span class="nv"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Net::WebSocket::&lt;/span&gt;&lt;span class="nv"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;HTTP::&lt;/span&gt;&lt;span class="nv"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;required&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;required&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;send_prompt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$prompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;HTTP::&lt;/span&gt;&lt;span class="nv"&gt;Async&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Net::WebSocket::&lt;/span&gt;&lt;span class="nv"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ws://&lt;/span&gt;&lt;span class="si"&gt;$self&lt;/span&gt;&lt;span class="s2"&gt;-&amp;gt;{host}:&lt;/span&gt;&lt;span class="si"&gt;$self&lt;/span&gt;&lt;span class="s2"&gt;-&amp;gt;{port}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;send_utf8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$prompt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With these changes, the class is now called &lt;code&gt;WebService::ChatGPT&lt;/code&gt; and can be used like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;WebService::&lt;/span&gt;&lt;span class="nv"&gt;ChatGPT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$chatgpt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;WebService::&lt;/span&gt;&lt;span class="nv"&gt;ChatGPT&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$chatgpt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;send_prompt&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;What is your name?&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Response: &lt;/span&gt;&lt;span class="si"&gt;$response&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a new &lt;code&gt;WebService::ChatGPT&lt;/code&gt; object with the specified &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; attributes, and send the text prompt “What is your name?” to the ChatGPT server running on localhost at port 8080. The response will be printed to the console.,/p&amp;gt;&lt;/p&gt;

&lt;p&gt;Note: This is just one way to rename the &lt;code&gt;ChatGPT&lt;/code&gt; class to &lt;code&gt;WebService::ChatGPT&lt;/code&gt;. You may also need to update any other references to the class name in your code and documentation, as well as update the module file name and directory structure to reflect the new package name.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Suggest some tests using the standard Perl testing framework&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here are some examples of tests that you could write for the &lt;code&gt;WebService::ChatGPT&lt;/code&gt; module using the standard Perl testing framework (Test::More):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;More&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;WebService::&lt;/span&gt;&lt;span class="nv"&gt;ChatGPT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Test creating a new ChatGPT object&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$chatgpt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;WebService::&lt;/span&gt;&lt;span class="nv"&gt;ChatGPT&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;isa_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$chatgpt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;WebService::ChatGPT&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Object is a ChatGPT&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="c1"&gt;# Test sending a prompt and receiving a response&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$chatgpt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;send_prompt&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;What is your name?&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My name is ChatGPT.&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Response is correct&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="c1"&gt;# Test sending an invalid prompt&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$chatgpt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;send_prompt&lt;/span&gt;&lt;span class="p"&gt;('')&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nv"&gt;like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$@&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sx"&gt;qr/Invalid prompt/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Invalid prompt error is thrown&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="nv"&gt;done_testing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first test uses the &lt;code&gt;isa_ok&lt;/code&gt; function to check that the object created by the &lt;code&gt;new&lt;/code&gt; method is an instance of the &lt;code&gt;WebService::ChatGPT&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;The second test uses the &lt;code&gt;is&lt;/code&gt; function to compare the expected response to the actual response returned by the &lt;code&gt;send_prompt&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The third test uses the &lt;code&gt;eval&lt;/code&gt; function to catch any exceptions thrown by the &lt;code&gt;send_prompt&lt;/code&gt; method when an invalid prompt is provided, and the &lt;code&gt;like&lt;/code&gt; function to check that the exception message matches the expected error message.&lt;/p&gt;

&lt;p&gt;These tests can be run using the &lt;code&gt;prove&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;prove &lt;span class="nt"&gt;-l&lt;/span&gt; t/chatgpt.t
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;I haven’t uploaded it to CPAN yet. Do you think I should?&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://perlhacks.com/2022/12/writing-a-cpan-module-that-talks-to-chatgpt/"&gt;Writing a CPAN module that talks to ChatGPT&lt;/a&gt; appeared first on &lt;a href="https://perlhacks.com"&gt;Perl Hacks&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/writing-a-cpan-module-that-talks-to-chatgpt-gb5</id>
    <published>2022-12-20T16:12:38Z</published>
    <updated>2022-12-20T16:12:38Z</updated>
    <category term="programming"/>
    <category term="ai"/>
    <category term="chatgpt"/>
    <category term="cpan"/>
  </entry>
  <entry xmlns:flickr="urn:flickr:user" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <title>Brixton Academy</title>
    <link rel="alternate" type="text/html" href="https://www.flickr.com/photos/davorg/52566997229/"/>
    <id>tag:flickr.com,2005:/photo/52566997229</id>
    <published>2022-12-16T11:16:52Z</published>
    <updated>2022-12-16T11:16:52Z</updated>
    <flickr:date_taken>2022-12-16T11:16:52-08:00</flickr:date_taken>
    <dc:date.Taken>2022-12-16T11:16:52-08:00</dc:date.Taken>
    <content type="html">			&lt;p&gt;&lt;a href="https://www.flickr.com/people/davorg/"&gt;Dave Cross&lt;/a&gt; posted a photo:&lt;/p&gt;
	
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/davorg/52566997229/" title="Brixton Academy"&gt;&lt;img src="https://live.staticflickr.com/65535/52566997229_4108602407_m.jpg" width="240" height="240" alt="Brixton Academy" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;via Instagram &lt;a href="https://instagr.am/p/CmOfgfLtwL_/" rel="noreferrer nofollow"&gt;instagr.am/p/CmOfgfLtwL_/&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>Dave Cross</name>
      <uri>https://www.flickr.com/people/davorg/</uri>
      <flickr:nsid>39021241@N00</flickr:nsid>
      <flickr:buddyicon>https://farm5.staticflickr.com/4759/buddyicons/39021241@N00.jpg?1516110776#39021241@N00</flickr:buddyicon>
    </author>
    <link rel="license" type="text/html" href="https://creativecommons.org/licenses/by-nc-sa/2.0/deed.en"/>
    <link rel="enclosure" type="image/jpeg" href="https://live.staticflickr.com/65535/52566997229_4108602407_b.jpg"/>
    <category term="ifttt" scheme="https://www.flickr.com/photos/tags/"/>
    <category term="instagram" scheme="https://www.flickr.com/photos/tags/"/>
    <displaycategories>
            </displaycategories>
    </entry>
  <entry>
    <title>5 Reasons Why Using AI to Generate Blog Posts Can Destroy Your SEO</title>
    <link rel="alternate" href="https://davorg.medium.com/5-reasons-why-using-ai-to-generate-blog-posts-can-destroy-your-seo-f8db298de65b?source=rss-3781feb8a4f4------2" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://davorg.medium.com/5-reasons-why-using-ai-to-generate-blog-posts-can-destroy-your-seo-f8db298de65b?source=rss-3781feb8a4f4------2"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1568/0*g61hVmjPNir439PR.jpg" width="1568"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Using artificial intelligence (AI) to generate blog posts can be bad for search engine optimization (SEO) for several reasons.&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://davorg.medium.com/5-reasons-why-using-ai-to-generate-blog-posts-can-destroy-your-seo-f8db298de65b?source=rss-3781feb8a4f4------2"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://medium.com/p/f8db298de65b</id>
    <published>2022-12-11T11:39:17Z</published>
    <updated>2022-12-11T11:41:05.321000Z</updated>
    <category term="blogging"/>
    <category term="ai"/>
    <category term="seo"/>
    <category term="tech"/>
  </entry>
  <entry>
    <title>5 Reasons Why Using AI to Generate Blog Posts Can Destroy Your SEO</title>
    <link rel="alternate" href="https://blog.dave.org.uk/2022/12/5-reasons-why-using-ai-to-generate-blog-posts-can-destroy-your-seo.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Using artificial intelligence (AI) to generate blog posts can be bad for search engine optimization (SEO) for several reasons.</p>



<p>First and foremost, AI-generated content is often low quality and lacks the depth and substance that search engines look for when ranking content. Because AI algorithms are not capable of understanding the nuances and complexities of human language, the content they produce is often generic, repetitive, and lacks originality. This can make it difficult for search engines to understand the context and relevance of the content, which can negatively impact its ranking.</p>



<p>Additionally, AI-generated content is often not well-written or structured, which can make it difficult for readers to understand and engage with. This can lead to a high bounce rate (the percentage of visitors who leave a website after only viewing one page), which can also hurt the website’s ranking.</p>



<p>Furthermore, AI-generated content is often not aligned with the website’s overall content strategy and goals. Because AI algorithms are not capable of understanding the website’s target audience, brand voice, and core messaging, the content they produce may not be relevant or useful to the website’s visitors. This can lead to a poor user experience, which can also hurt the website’s ranking.</p>



<p>Another issue with AI-generated content is that it can be seen as spammy or low quality by both search engines and readers. Because AI-generated content is often produced in large quantities and lacks originality, it can be seen as an attempt to manipulate search engine rankings or trick readers into engaging with the website. This can lead to the website being penalized by search engines or losing the trust and loyalty of its visitors.</p>



<p>In conclusion, using AI to generate blog posts can be bad for SEO for several reasons. AI-generated content is often low quality, poorly written, and not aligned with the website’s content strategy. It can also be seen as spammy or low quality by both search engines and readers, which can hurt the website’s ranking and reputation. It is important for websites to prioritize creating high-quality, original, and relevant content to improve their SEO and provide a positive user experience.</p>



<p>[This post was generated using <a href="https://chat.openai.com/">ChatGPT</a>]</p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2022/12/5-reasons-why-using-ai-to-generate-blog-posts-can-destroy-your-seo.html">5 Reasons Why Using AI to Generate Blog Posts Can Destroy Your SEO</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Using artificial intelligence (AI) to generate blog posts can be bad for search engine optimization (SEO) for several reasons. First and foremost, AI-generated content is often low quality and lacks the depth and substance that search engines look for when ranking content. Because AI algorithms are not capable of understanding the nuances and complexities of… <a class="more-link" href="https://blog.dave.org.uk/2022/12/5-reasons-why-using-ai-to-generate-blog-posts-can-destroy-your-seo.html">Continue reading <span class="screen-reader-text">5 Reasons Why Using AI to Generate Blog Posts Can Destroy Your SEO</span></a></p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2022/12/5-reasons-why-using-ai-to-generate-blog-posts-can-destroy-your-seo.html">5 Reasons Why Using AI to Generate Blog Posts Can Destroy Your SEO</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://blog.dave.org.uk/?p=3890</id>
    <published>2022-12-11T11:38:18Z</published>
    <updated>2022-12-11T11:38:18Z</updated>
    <category term="tech"/>
    <category term="ai"/>
    <category term="blogging"/>
    <category term="seo"/>
  </entry>
  <entry>
    <title>DAVECROSS has released SVG-Timeline-0.1.3</title>
    <link rel="alternate" href="https://metacpan.org/release/DAVECROSS/SVG-Timeline-0.1.3" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Program to draw an SVG timeline diagram from events defined in a file</div>
    </content>
    <author>
      <name>DAVECROSS</name>
    </author>
    <id>https://metacpan.org/release/DAVECROSS/SVG-Timeline-0.1.3</id>
    <published>2022-11-01T12:44:59Z</published>
    <updated>2022-11-01T12:44:59Z</updated>
  </entry>
  <entry>
    <title>Containers for Coverage</title>
    <link rel="alternate" href="https://davorg.medium.com/containers-for-coverage-1db8dfc76c2d?source=rss-3781feb8a4f4------2" type="text/html"/>
    <content type="html">&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/0*YjwJ59dr4XVoMb1b.png" /&gt;&lt;/figure&gt;&lt;p&gt;I’ve been building Docker containers again. And I think you’ll find this one a little more useful than &lt;a href="https://perlhacks.com/2022/10/building-a-perlanet-container/"&gt;the Perlanet one&lt;/a&gt; I wrote about a couple of weeks ago.&lt;/p&gt;&lt;p&gt;Several years ago I got into &lt;a href="https://www.travis-ci.com/"&gt;Travis CI&lt;/a&gt; and set up lots of &lt;a href="https://github.com/davorg?tab=repositories"&gt;my GitHub repos&lt;/a&gt; so they automatically ran the tests each time I committed to the repo. Later on, I also worked out how to tie those test runs into &lt;a href="https://coveralls.io/"&gt;Coveralls.io&lt;/a&gt; so I got pretty graphs of how my test coverage was looking. I gave &lt;a href="https://www.slideshare.net/davorg/github-travisci-and-perl"&gt;a talk about what I had done&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;But two things changed.&lt;/p&gt;&lt;p&gt;Firstly, Travis CI got too popular and, eventually, removed their free service. And, secondly, &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; was introduced. Over the last few years, I’ve set up many of my repos to use GitHub Actions for CI. But, basically because I’m lazy, I didn’t remove the Travis CI configuration from those repos.&lt;/p&gt;&lt;p&gt;But last week I decided the time was right to start work on that. And when I went to remove the .travis.yml I realised that something was missing from my GitHub Actions CI workflows — they were running the unit tests, but they weren’t reporting on test coverage. So it was time to fix that.&lt;/p&gt;&lt;p&gt;I needed to reimplement the logic that connected Travis CI to Coveralls.io in a GitHub workflow. That actually turned out to be pretty simple. There’s a CPAN module called &lt;a href="https://metacpan.org/pod/Devel::Cover::Report::Coveralls"&gt;Devel::Cover::Report::Coveralls&lt;/a&gt; which takes the output from Devel::Cover, converts it to the correct format and sends it to Coveralls.io. And, as a bonus, it has documentation showing how to implement that in a GitHub workflow.&lt;/p&gt;&lt;p&gt;So I hacked at my workflow definition file for one of my CPAN modules and within a few minutes I had it working.&lt;/p&gt;&lt;p&gt;Well, I say “a few minutes”, but it took over thirteen minutes to run. It turns out that Devel::Cover::Report::Coveralls is a pretty heavyweight module and needs to install a lot of other modules in order to do its work.&lt;/p&gt;&lt;p&gt;At this point, you can probably guess where this is going. And you’d be right.&lt;/p&gt;&lt;p&gt;I’ve created a Docker container that has Devel::Cover::Report::Coveralls already installed. And, obviously, it’s available for everyone to use from the Docker hub — &lt;a href="https://hub.docker.com/repository/docker/davorg/perl-coveralls"&gt;davorg/perl-coveralls&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;A couple of small adjustments to my GitHub workflow and the coverage job is now running on my new container — and takes 29 seconds instead of 13 minutes. So that’s a win.&lt;/p&gt;&lt;p&gt;The relevant section of my &lt;a href="https://github.com/davorg/calendar-simple/blob/master/.github/workflows/perltest.yml"&gt;workflow file&lt;/a&gt; is here:&lt;/p&gt;&lt;pre&gt;coverage:&lt;br&gt;    runs-on: ubuntu-latest&lt;br&gt;    container: davorg/perl-coveralls:latest&lt;br&gt;    name: Test coverage&lt;br&gt;    steps:&lt;br&gt;      - uses: actions/checkout@v3&lt;br&gt;      - name: Install modules&lt;br&gt;        run: cpanm -n --installdeps .&lt;br&gt;      - name: Coverage&lt;br&gt;        env:&lt;br&gt;          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&lt;br&gt;        run: cover -test -report Coveralls&lt;/pre&gt;&lt;p&gt;And it’s producing nice graphs on Coveralls.io like the one above.&lt;/p&gt;&lt;p&gt;Let me know if you find it useful.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Originally published at &lt;/em&gt;&lt;a href="https://perlhacks.com/2022/10/containers-for-coverage/"&gt;&lt;em&gt;Perl Hacks&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1db8dfc76c2d" width="1" height="1" alt=""&gt;</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://medium.com/p/1db8dfc76c2d</id>
    <published>2022-10-18T17:02:45Z</published>
    <updated>2022-10-18T17:02:31.930000Z</updated>
    <category term="docker"/>
    <category term="test-coverage"/>
    <category term="testing"/>
    <category term="containers"/>
  </entry>
  <entry>
    <title>Containers for Coverage</title>
    <link rel="alternate" href="https://perlhacks.com/2022/10/containers-for-coverage/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve been building Docker containers again. And I think you’ll find this one a little more useful than <a href="https://perlhacks.com/2022/10/building-a-perlanet-container/">the Perlanet one</a> I wrote about a couple of weeks ago.</p>
<p>Several years ago I got into <a href="https://www.travis-ci.com/">Travis CI</a> and set up lots of <a href="https://github.com/davorg?tab=repositories">my GitHub repos</a> so they automatically ran the tests each time I committed to the repo. Later on, I also worked out how to tie those test runs into <a href="https://coveralls.io/">Coveralls.io</a> so I got pretty graphs of how my test coverage was looking. I gave <a href="https://www.slideshare.net/davorg/github-travisci-and-perl">a talk about what I had done</a>.</p>
<p>But two things changed.</p>
<p>Firstly, Travis CI got too popular and, eventually, removed their free service. And, secondly, <a href="https://github.com/features/actions">GitHub Actions</a> was introduced. Over the last few years, I’ve set up many of my repos to use GitHub Actions for CI. But, basically because I’m lazy, I didn’t remove the Travis CI configuration from those repos.</p>
<p>But last week I decided the time was right to start work on that. And when I went to remove the .travis.yml I realised that something was missing from my GitHub Actions CI workflows – they were running the unit tests, but they weren’t reporting on test coverage. So it was time to fix that.</p>
<p>I needed to reimplement the logic that connected Travis CI to Coveralls.io in a GitHub workflow. That actually turned out to be pretty simple. There’s a CPAN module called <a href="https://metacpan.org/pod/Devel::Cover::Report::Coveralls">Devel::Cover::Report::Coveralls</a> which takes the output from Devel::Cover, converts it to the correct format and sends it to Coveralls.io. And, as a bonus, it has documentation showing how to implement that in a GitHub workflow.</p>
<p>So I hacked at my workflow definition file for one of my CPAN modules and within a few minutes I had it working.</p>
<p>Well, I say “a few minutes”, but it took over thirteen minutes to run. It turns out that Devel::Cover::Report::Coveralls is a pretty heavyweight module and needs to install a lot of other modules in order to do its work.</p>
<p>At this point, you can probably guess where this is going. And you’d be right.</p>
<p>I’ve created a Docker container that has Devel::Cover::Report::Coveralls already installed. And, obviously, it’s available for everyone to use from the Docker hub – <a href="https://hub.docker.com/repository/docker/davorg/perl-coveralls">davorg/perl-coveralls</a>.</p>
<p>A couple of small adjustments to my GitHub workflow and the coverage job is now running on my new container – and takes 29 seconds instead of 13 minutes. So that’s a win.</p>
<p>The relevant section of my <a href="https://github.com/davorg/calendar-simple/blob/master/.github/workflows/perltest.yml">workflow file</a> is here:</p><pre class="urvanov-syntax-highlighter-plain-tag">coverage:
    runs-on: ubuntu-latest
    container: davorg/perl-coveralls:latest
    name: Test coverage
    steps:
      - uses: actions/checkout@v3
      - name: Install modules
        run: cpanm -n --installdeps .
      - name: Coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cover -test -report Coveralls</pre><p>And it’s producing nice graphs on Coveralls.io like the one above.</p>
<p>Let me know if you find it useful.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/containers-for-coverage/">Containers for Coverage</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve been building Docker containers again. And I think you’ll find this one a little more useful than the Perlanet one I wrote about a couple of weeks ago. Several years ago I got into Travis CI and set up lots of my GitHub repos so they automatically ran the tests each time I committed… <a class="more-link" href="https://perlhacks.com/2022/10/containers-for-coverage/">Continue reading <span class="screen-reader-text">Containers for Coverage</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/containers-for-coverage/">Containers for Coverage</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2087</id>
    <published>2022-10-18T17:01:50Z</published>
    <updated>2022-10-18T17:01:50Z</updated>
    <category term="Packaging"/>
    <category term="container"/>
    <category term="coveralls.io"/>
    <category term="docker"/>
    <category term="test coverage"/>
    <category term="testing"/>
  </entry>
  <entry>
    <title>Containers for Coverage</title>
    <link rel="alternate" href="https://dev.to/davorg/containers-for-coverage-1e7o" type="text/html"/>
    <content type="html">&lt;p&gt;I’ve been building Docker containers again. And I think you’ll find this one a little more useful than &lt;a href="https://dev.to/davorg/building-a-perlanet-container-43cm"&gt;the Perlanet one&lt;/a&gt; I wrote about a couple of weeks ago.&lt;/p&gt;

&lt;p&gt;Several years ago I got into &lt;a href="https://www.travis-ci.com/"&gt;Travis CI&lt;/a&gt; and set up lots of &lt;a href="https://github.com/davorg?tab=repositories"&gt;my GitHub repos&lt;/a&gt; so they automatically ran the tests each time I committed to the repo. Later on, I also worked out how to tie those test runs into &lt;a href="https://coveralls.io/"&gt;Coveralls.io&lt;/a&gt; so I got pretty graphs of how my test coverage was looking. I gave &lt;a href="https://www.slideshare.net/davorg/github-travisci-and-perl"&gt;a talk about what I had done&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But two things changed.&lt;/p&gt;

&lt;p&gt;Firstly, Travis CI got too popular and, eventually, removed their free service. And, secondly, &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; was introduced. Over the last few years, I’ve set up many of my repos to use GitHub Actions for CI. But, basically because I’m lazy, I didn’t remove the Travis CI configuration from those repos.&lt;/p&gt;

&lt;p&gt;But last week I decided the time was right to start work on that. And when I went to remove the .travis.yml I realised that something was missing from my GitHub Actions CI workflows – they were running the unit tests, but they weren’t reporting on test coverage. So it was time to fix that.&lt;/p&gt;

&lt;p&gt;I needed to reimplement the logic that connected Travis CI to Coveralls.io in a GitHub workflow. That actually turned out to be pretty simple. There’s a CPAN module called &lt;a href="https://metacpan.org/pod/Devel::Cover::Report::Coveralls"&gt;Devel::Cover::Report::Coveralls&lt;/a&gt; which takes the output from Devel::Cover, converts it to the correct format and sends it to Coveralls.io. And, as a bonus, it has documentation showing how to implement that in a GitHub workflow.&lt;/p&gt;

&lt;p&gt;So I hacked at my workflow definition file for one of my CPAN modules and within a few minutes I had it working.&lt;/p&gt;

&lt;p&gt;Well, I say “a few minutes”, but it took over thirteen minutes to run. It turns out that Devel::Cover::Report::Coveralls is a pretty heavyweight module and needs to install a lot of other modules in order to do its work.&lt;/p&gt;

&lt;p&gt;At this point, you can probably guess where this is going. And you’d be right.&lt;/p&gt;

&lt;p&gt;I’ve created a Docker container that has Devel::Cover::Report::Coveralls already installed. And, obviously, it’s available for everyone to use from the Docker hub – &lt;a href="https://hub.docker.com/repository/docker/davorg/perl-coveralls"&gt;davorg/perl-coveralls&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A couple of small adjustments to my GitHub workflow and the coverage job is now running on my new container – and takes 29 seconds instead of 13 minutes. So that’s a win.&lt;/p&gt;

&lt;p&gt;The relevant section of my &lt;a href="https://github.com/davorg/calendar-simple/blob/master/.github/workflows/perltest.yml"&gt;workflow file&lt;/a&gt; is here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;coverage:
    runs-on: ubuntu-latest
    container: davorg/perl-coveralls:latest
    name: Test coverage
    steps:
      - uses: actions/checkout@v3
      - name: Install modules
        run: cpanm -n --installdeps .
      - name: Coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cover -test -report Coveralls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it’s producing nice graphs on Coveralls.io like the one above.&lt;/p&gt;

&lt;p&gt;Let me know if you find it useful.&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://perlhacks.com/2022/10/containers-for-coverage/"&gt;Containers for Coverage&lt;/a&gt; appeared first on &lt;a href="https://perlhacks.com"&gt;Perl Hacks&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/containers-for-coverage-1e7o</id>
    <published>2022-10-18T17:01:50Z</published>
    <updated>2022-10-18T17:01:50Z</updated>
    <category term="packaging"/>
    <category term="container"/>
    <category term="coverallsio"/>
    <category term="docker"/>
  </entry>
  <entry>
    <title>DAVECROSS has released Feed-Find-0.13</title>
    <link rel="alternate" href="https://metacpan.org/release/DAVECROSS/Feed-Find-0.13" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Syndication feed auto-discovery</div>
    </content>
    <author>
      <name>DAVECROSS</name>
    </author>
    <id>https://metacpan.org/release/DAVECROSS/Feed-Find-0.13</id>
    <published>2022-10-18T14:58:35Z</published>
    <updated>2022-10-18T14:58:35Z</updated>
  </entry>
  <entry>
    <title>Not that PR, thanks</title>
    <link rel="alternate" href="https://davorg.medium.com/not-that-pr-thanks-a1b15653a75?source=rss-3781feb8a4f4------2" type="text/html"/>
    <content type="html">&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/966/0*pLISkpVDhfg0_iwn.png" /&gt;&lt;/figure&gt;&lt;p&gt;It’s October. And that means that &lt;a href="https://hacktoberfest.com/"&gt;Hacktoberfest&lt;/a&gt; has started. If you can get four pull requests accepted on other people’s code repositories during October then you can win a t-shirt.&lt;/p&gt;&lt;p&gt;In many ways, I think it’s a great idea. It encourages people to get involved in open source software. But in other ways, it can be a bit of a pain in the arse. Some people go crazy for a free t-shirt and that means you’ll almost certainly get several pull requests that aren’t really of the quality you’d hope for.&lt;/p&gt;&lt;p&gt;I have a particular problem that probably isn’t very common. I’ve talked before about the “semi-static” sites I run on GitHub Pages. There’s some data in a GitHub Repo and every couple of hours the system wakes up and runs some code which generates a few HTML pages and commits those HTML pages into the repo’s “/docs” directory. And — hey presto! — there’s a new version of your web site.&lt;/p&gt;&lt;p&gt;A good example is &lt;a href="https://perl.theplanetarium.org/"&gt;Planet Perl&lt;/a&gt;. The data is a YAML file which mostly consists of a list of web feeds. Every couple of hours we run &lt;a href="https://metacpan.org/dist/Perlanet/view/bin/perlanet"&gt;perlanet&lt;/a&gt; to pull in those web feeds and build a new version of the web site containing the latest articles about Perl.&lt;/p&gt;&lt;p&gt;Can you see what the problem is?&lt;/p&gt;&lt;p&gt;The problem is that the most obvious file in the repo is the “index.html” which is the web site. So when people find that repo and want to make a small change to the web site they’ll change that “index.html” file. But that file is generated. Every few hours, any changes to that file are overwritten as a new version is created. You actually want to change “index.tt”. But that uses &lt;a href="https://metacpan.org/dist/Template-Toolkit/view/lib/Template/Manual/Directives.pod"&gt;Template Toolkit syntax&lt;/a&gt;, so it’s easy enough to see why people with no Perl knowledge might want to avoid editing that.&lt;/p&gt;&lt;p&gt;The &lt;a href="https://github.com/davorg/planetperl/blob/master/README.md"&gt;README file&lt;/a&gt; for the project explains which files you might want to change in order to make different types of changes. But people don’t read that. Or, if they do read it, they ignore the bits that they don’t like.&lt;/p&gt;&lt;p&gt;So I get pull requests that I have to reject because they change the wrong files.&lt;/p&gt;&lt;p&gt;Last year I got enough of these problematic pull requests that I decided to automate a solution. And it’s &lt;a href="https://github.com/davorg/planetperl/blob/master/.github/workflows/reject-pr.yml"&gt;this pretty simple GitHub Workflow&lt;/a&gt;. It runs whenever my repo receives a pull request and looks at the files that have been changed. If that list of files includes “docs/index.html” then the PR is automatically closed with a polite message explaining what they’ve done wrong.&lt;/p&gt;&lt;p&gt;This makes my life easier. It’s possible it might make your life easier too.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Originally published at &lt;/em&gt;&lt;a href="https://perlhacks.com/2022/10/not-that-pr-thanks/"&gt;&lt;em&gt;Perl Hacks&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a1b15653a75" width="1" height="1" alt=""&gt;</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://medium.com/p/a1b15653a75</id>
    <published>2022-10-10T16:02:07Z</published>
    <updated>2022-10-10T16:02:20.401000Z</updated>
    <category term="github-actions"/>
    <category term="pull-request"/>
    <category term="workflow"/>
    <category term="semi-static-sites"/>
    <category term="github"/>
  </entry>
  <entry>
    <title>Not that PR, thanks</title>
    <link rel="alternate" href="https://perlhacks.com/2022/10/not-that-pr-thanks/" type="text/html"/>
    <content type="html">&lt;p&gt;It&amp;#8217;s October. And that means that &lt;a href="https://hacktoberfest.com/"&gt;Hacktoberfest&lt;/a&gt; has started. If you can get four pull requests accepted on other people&amp;#8217;s code repositories during October then you can win a t-shirt.&lt;/p&gt;
&lt;p&gt;In many ways, I think it&amp;#8217;s a great idea. It encourages people to get involved in open source software. But in other ways, it can be a bit of a pain in the arse. Some people go crazy for a free t-shirt and that means you&amp;#8217;ll almost certainly get several pull requests that aren&amp;#8217;t really of the quality you&amp;#8217;d hope for.&lt;/p&gt;
&lt;p&gt;I have a particular problem that probably isn&amp;#8217;t very common. I&amp;#8217;ve talked before about the &amp;#8220;semi-static&amp;#8221; sites I run on GitHub Pages. There&amp;#8217;s some data in a GitHub Repo and every couple of hours the system wakes up and runs some code which generates a few HTML pages and commits those HTML pages into the repo&amp;#8217;s &amp;#8220;/docs&amp;#8221; directory. And &amp;#8211; hey presto! &amp;#8211; there&amp;#8217;s a new version of your web site.&lt;/p&gt;
&lt;p&gt;A good example is &lt;a href="https://perl.theplanetarium.org/"&gt;Planet Perl&lt;/a&gt;. The data is a YAML file which mostly consists of a list of web feeds. Every couple of hours we run &lt;a href="https://metacpan.org/dist/Perlanet/view/bin/perlanet"&gt;perlanet&lt;/a&gt; to pull in those web feeds and build a new version of the web site containing the latest articles about Perl.&lt;/p&gt;
&lt;p&gt;Can you see what the problem is?&lt;/p&gt;
&lt;p&gt;The problem is that the most obvious file in the repo is the &amp;#8220;index.html&amp;#8221; which is the web site. So when people find that repo and want to make a small change to the web site they&amp;#8217;ll change that &amp;#8220;index.html&amp;#8221; file. But that file is generated. Every few hours, any changes to that file are overwritten as a new version is created. You actually want to change &amp;#8220;index.tt&amp;#8221;. But that uses &lt;a href="https://metacpan.org/dist/Template-Toolkit/view/lib/Template/Manual/Directives.pod"&gt;Template Toolkit syntax&lt;/a&gt;, so it&amp;#8217;s easy enough to see why people with no Perl knowledge might want to avoid editing that.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/davorg/planetperl/blob/master/README.md"&gt;README file&lt;/a&gt; for the project explains which files you might want to change in order to make different types of changes. But people don&amp;#8217;t read that. Or, if they do read it, they ignore the bits that they don&amp;#8217;t like.&lt;/p&gt;
&lt;p&gt;So I get pull requests that I have to reject because they change the wrong files.&lt;/p&gt;
&lt;p&gt;Last year I got enough of these problematic pull requests that I decided to automate a solution. And it&amp;#8217;s &lt;a href="https://github.com/davorg/planetperl/blob/master/.github/workflows/reject-pr.yml"&gt;this pretty simple GitHub Workflow&lt;/a&gt;. It runs whenever my repo receives a pull request and looks at the files that have been changed. If that list of files includes &amp;#8220;docs/index.html&amp;#8221; then the PR is automatically closed with a polite message explaining what they&amp;#8217;ve done wrong.&lt;/p&gt;
&lt;p&gt;This makes my life easier. It&amp;#8217;s possible it might make your life easier too.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The post &lt;a rel="nofollow" href="https://perlhacks.com/2022/10/not-that-pr-thanks/"&gt;Not that PR, thanks&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://perlhacks.com"&gt;Perl Hacks&lt;/a&gt;.&lt;/p&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>It’s October. And that means that Hacktoberfest has started. If you can get four pull requests accepted on other people’s code repositories during October then you can win a t-shirt. In many ways, I think it’s a great idea. It encourages people to get involved in open source software. But in other ways, it can… <a class="more-link" href="https://perlhacks.com/2022/10/not-that-pr-thanks/">Continue reading <span class="screen-reader-text">Not that PR, thanks</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/not-that-pr-thanks/">Not that PR, thanks</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2082</id>
    <published>2022-10-10T16:01:43Z</published>
    <updated>2022-10-10T16:01:43Z</updated>
    <category term="Miscellaneous"/>
    <category term="github"/>
    <category term="github actions"/>
    <category term="pull request"/>
    <category term="semi-static sites"/>
    <category term="workflow"/>
  </entry>
  <entry>
    <title>Not that PR, thanks</title>
    <link rel="alternate" href="https://dev.to/davorg/not-that-pr-thanks-3m1c" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>It’s October. And that means that <a href="https://hacktoberfest.com/">Hacktoberfest</a> has started. If you can get four pull requests accepted on other people’s code repositories during October then you can win a t-shirt.</p>

<p>In many ways, I think it’s a great idea. It encourages people to get involved in open source software. But in other ways, it can be a bit of a pain in the arse. Some people go crazy for a free t-shirt and that means you’ll almost certainly get several pull requests that aren’t really of the quality you’d hope for.</p>

<p>I have a particular problem that probably isn’t very common. I’ve talked before about the “semi-static” sites I run on GitHub Pages. There’s some data in a GitHub Repo and every couple of hours the system wakes up and runs some code which generates a few HTML pages and commits those HTML pages into the repo’s “/docs” directory. And – hey presto! – there’s a new version of your web site.</p>

<p>A good example is <a href="https://perl.theplanetarium.org/">Planet Perl</a>. The data is a YAML file which mostly consists of a list of web feeds. Every couple of hours we run <a href="https://metacpan.org/dist/Perlanet/view/bin/perlanet">perlanet</a> to pull in those web feeds and build a new version of the web site containing the latest articles about Perl.</p>

<p>Can you see what the problem is?</p>

<p>The problem is that the most obvious file in the repo is the “index.html” which is the web site. So when people find that repo and want to make a small change to the web site they’ll change that “index.html” file. But that file is generated. Every few hours, any changes to that file are overwritten as a new version is created. You actually want to change “index.tt”. But that uses <a href="https://metacpan.org/dist/Template-Toolkit/view/lib/Template/Manual/Directives.pod">Template Toolkit syntax</a>, so it’s easy enough to see why people with no Perl knowledge might want to avoid editing that.</p>

<p>The <a href="https://github.com/davorg/planetperl/blob/master/README.md">README file</a> for the project explains which files you might want to change in order to make different types of changes. But people don’t read that. Or, if they do read it, they ignore the bits that they don’t like.</p>

<p>So I get pull requests that I have to reject because they change the wrong files.</p>

<p>Last year I got enough of these problematic pull requests that I decided to automate a solution. And it’s <a href="https://github.com/davorg/planetperl/blob/master/.github/workflows/reject-pr.yml">this pretty simple GitHub Workflow</a>. It runs whenever my repo receives a pull request and looks at the files that have been changed. If that list of files includes “docs/index.html” then the PR is automatically closed with a polite message explaining what they’ve done wrong.</p>

<p>This makes my life easier. It’s possible it might make your life easier too.</p>

<p>The post <a href="https://perlhacks.com/2022/10/not-that-pr-thanks/">Not that PR, thanks</a> appeared first on <a href="https://perlhacks.com">Perl Hacks</a>.</p>

</div>
    </content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/not-that-pr-thanks-3m1c</id>
    <published>2022-10-10T16:01:43Z</published>
    <updated>2022-10-10T16:01:43Z</updated>
    <category term="github"/>
    <category term="githubactions"/>
    <category term="pullrequest"/>
    <category term="semistaticsites"/>
  </entry>
  <entry>
    <title>Building a Perlanet Container</title>
    <link rel="alternate" href="https://davorg.medium.com/building-a-perlanet-container-86479f088e32?source=rss-3781feb8a4f4------2" type="text/html"/>
    <content type="html">&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/0*Qurz8La174s8M_YL.png" /&gt;&lt;/figure&gt;&lt;p&gt;I’m a dinosaur who still believes that web feeds are a pretty neat idea. I wrote and maintain &lt;a href="https://metacpan.org/pod/perlanet"&gt;perlanet&lt;/a&gt; (a Perl program for aggregating web feeds into a new feed — and building a web site based on that new feed) and I use it to build &lt;a href="https://theplanetarium.org/"&gt;a few sites on topics I’m interested in&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Last year, I worked out a way to use GitHub Actions to &lt;a href="https://dev.to/davorg/github-actions-for-semi-static-web-sites-597g"&gt;rebuild these sites automatically&lt;/a&gt; every few hours — thereby enabling me to host the sites on GitHub Pages (I still think it’s a useful technique, but I sometimes worry slightly about the large number of commits those repos have — someone at GitHub must surely notice one day!)&lt;/p&gt;&lt;p&gt;Yesterday, I was doing some light maintenance on one of those sites when I realised that each rebuild of these sites was taking a significant time (by which I mean four or five minutes) and started wondering if there was a way to speed them up and use less of GitHub’s resources. The problem is that Perlanet is a pretty hefty module and each rebuild was installing that module (and, therefore, dozens of other modules) on a pristine Ubuntu container.&lt;/p&gt;&lt;p&gt;When you say it like that, the solution is obvious.&lt;/p&gt;&lt;p&gt;You don’t need to run your GitHub Actions on the standard containers that GitHub supplies. You can run them on any container that’s available from any public container hosting service. So the solution was to build a Perlanet container and run the jobs using that instead. So that’s how I spent an hour or so yesterday.&lt;/p&gt;&lt;p&gt;Here’s the Dockerfile I ended up with:&lt;/p&gt;&lt;pre&gt;FROM perl:latest&lt;br&gt;&lt;br&gt;RUN apt-get update &amp;amp;&amp;amp; \&lt;br&gt;    apt-get -y upgrade &amp;amp;&amp;amp; \ &lt;br&gt;    apt-get install -y build-essential &amp;amp;&amp;amp; \&lt;br&gt;    apt-get install -y cpanminus libtidy-dev libxml++2.6-dev libhtml-tidy-perl &amp;amp;&amp;amp; \&lt;br&gt;    cpanm --notest Test::Exception &amp;amp;&amp;amp; \&lt;br&gt;    cpanm --notest Perlanet &amp;amp;&amp;amp; \&lt;br&gt;    cpanm --notest LWP::Protocol::https&lt;/pre&gt;&lt;p&gt;It’s (obviously) &lt;a href="https://github.com/davorg/perl-perlanet-docker"&gt;available on GitHub&lt;/a&gt; in case anyone wants to improve on my rather ropey knowledge of Docker.&lt;/p&gt;&lt;p&gt;I explicitly install Test::Exception because HTML::Tidy (one of Perlanet’s pre-requisites) needs it and I can’t work out why the standard installation procedure isn’t installing it. And while, LWP::Protocol::https is, strictly speaking, required by Perlanet, you wouldn’t get very far on the modern web if you only accessed web feeds that are available over HTTP.&lt;/p&gt;&lt;p&gt;A little bit of Docker Hub set-up and the container is &lt;a href="https://hub.docker.com/r/davorg/perl-perlanet"&gt;available for everyone to use&lt;/a&gt; (and rebuilt automatically whenever I commit to the repo).&lt;/p&gt;&lt;p&gt;It was then just a case of changing my GitHub Actions to use my container. Here’s an example of &lt;a href="https://github.com/davorg/planetdavorg/commit/5b65ce407e89dd16e74ad4b417b104c43dca96ef"&gt;one of the commits&lt;/a&gt; that did that.&lt;/p&gt;&lt;p&gt;I realise I’m pretty late to the party here, but I think this is a useful pattern. If you have a Perl library (or, indeed, any other software) that exists to provide a service to users then it’s a great idea to provide a containerised version of that software.&lt;/p&gt;&lt;p&gt;And I’m happy to report that my site rebuilds have gone from 4–5 minutes to about 45 seconds.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Originally published at &lt;/em&gt;&lt;a href="https://perlhacks.com/2022/10/building-a-perlanet-container/"&gt;&lt;em&gt;Perl Hacks&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=86479f088e32" width="1" height="1" alt=""&gt;</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://medium.com/p/86479f088e32</id>
    <published>2022-10-06T09:44:06Z</published>
    <updated>2022-10-10T07:57:15.509000Z</updated>
    <category term="docker"/>
    <category term="semi-static"/>
    <category term="containers"/>
    <category term="perlanet"/>
    <category term="packaging"/>
  </entry>
  <entry>
    <title>Building a Perlanet Container</title>
    <link rel="alternate" href="https://perlhacks.com/2022/10/building-a-perlanet-container/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I’m a dinosaur who still believes that web feeds are a pretty neat idea. I wrote and maintain <a href="https://metacpan.org/pod/perlanet">perlanet</a> (a Perl program for aggregating web feeds into a new feed – and building a web site based on that new feed) and I use it to build <a href="https://theplanetarium.org/">a few sites on topics I’m interested in</a>.</p>
<p>Last year, I worked out a way to use GitHub Actions to <a href="https://dev.to/davorg/github-actions-for-semi-static-web-sites-597g">rebuild these sites automatically</a> every few hours – thereby enabling me to host the sites on GitHub Pages (I still think it’s a useful technique, but I sometimes worry slightly about the large number of commits those repos have – someone at GitHub must surely notice one day!)</p>
<p>Yesterday, I was doing some light maintenance on one of those sites when I realised that each rebuild of these sites was taking a significant time (by which I mean four or five minutes) and started wondering if there was a way to speed them up and use less of GitHub’s resources. The problem is that Perlanet is a pretty hefty module and each rebuild was installing that module (and, therefore, dozens of other modules) on a pristine Ubuntu container.</p>
<p>When you say it like that, the solution is obvious.</p>
<p>You don’t need to run your GitHub Actions on the standard containers that GitHub supplies. You can run them on any container that’s available from any public container hosting service. So the solution was to build a Perlanet container and run the jobs using that instead. So that’s how I spent an hour or so yesterday.</p>
<p>Here’s the Dockerfile I ended up with:</p><pre class="urvanov-syntax-highlighter-plain-tag">FROM perl:latest

RUN apt-get update &amp;&amp; \
    apt-get -y upgrade &amp;&amp; \ 
    apt-get install -y build-essential &amp;&amp; \
    apt-get install -y cpanminus libtidy-dev libxml++2.6-dev libhtml-tidy-perl &amp;&amp; \
    cpanm --notest Test::Exception &amp;&amp; \
    cpanm --notest Perlanet &amp;&amp; \
    cpanm --notest LWP::Protocol::https</pre><p>It’s (obviously) <a href="https://github.com/davorg/perl-perlanet-docker">available on GitHub</a> in case anyone wants to improve on my rather ropey knowledge of Docker.</p>
<p>I explicitly install Test::Exception because HTML::Tidy (one of Perlanet’s pre-requisites) needs it and I can’t work out why the standard installation procedure isn’t installing it. And while, LWP::Protocol::https is, strictly speaking, not required by Perlanet, you wouldn’t get very far on the modern web if you only accessed web feeds that are available over HTTP.</p>
<p>A little bit of Docker Hub set-up and the container is <a href="https://hub.docker.com/r/davorg/perl-perlanet">available for everyone to use</a> (and rebuilt automatically whenever I commit to the repo).</p>
<p>It was then just a case of changing my GitHub Actions to use my container. Here’s an example of <a href="https://github.com/davorg/planetdavorg/commit/5b65ce407e89dd16e74ad4b417b104c43dca96ef">one of the commits</a> that did that.</p>
<p>I realise I’m pretty late to the party here, but I think this is a useful pattern. If you have a Perl library (or, indeed, any other software) that exists to provide a service to users then it’s a great idea to provide a containerised version of that software.</p>
<p>And I’m happy to report that my site rebuilds have gone from 4-5 minutes to about 45 seconds.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/building-a-perlanet-container/">Building a Perlanet Container</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I’m a dinosaur who still believes that web feeds are a pretty neat idea. I wrote and maintain perlanet (a Perl program for aggregating web feeds into a new feed – and building a web site based on that new feed) and I use it to build a few sites on topics I’m interested in.… <a class="more-link" href="https://perlhacks.com/2022/10/building-a-perlanet-container/">Continue reading <span class="screen-reader-text">Building a Perlanet Container</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/building-a-perlanet-container/">Building a Perlanet Container</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2076</id>
    <published>2022-10-06T09:43:46Z</published>
    <updated>2022-10-06T09:43:46Z</updated>
    <category term="Packaging"/>
    <category term="container"/>
    <category term="docker"/>
    <category term="packaging"/>
    <category term="perlanet"/>
    <category term="semi-static"/>
  </entry>
  <entry>
    <title>2021 in Gigs</title>
    <link rel="alternate" href="https://davorg.medium.com/2021-in-gigs-7ab20766b20f?source=rss-3781feb8a4f4------2" type="text/html"/>
    <content type="html">&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/0*a_nd3y_-Pb0z6dI0.jpg" /&gt;&lt;/figure&gt;&lt;p&gt;A little later than usual, here’s my review of the gigs I saw last year.&lt;/p&gt;&lt;p&gt;In 2020, I saw four gigs. In 2021, I almost doubled that to seven. Obviously, we spent a lot of the year with most music venues closed, so those few gigs I saw were all in the second half of the year. Usually, I’d list my top ten gigs. This year (as last year) I’ll be listing them all. So here they are in chronological order.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://www.songkick.com/concerts/39755096-mike-oldfield-at-royal-festival-hall-southbank-centre"&gt;&lt;strong&gt;Tubular Bells at the Royal Festival Hall&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;This was a strange show for several reasons. Firstly, it was advertised as commemorating the fiftieth anniversary of &lt;em&gt;Tubular Bells&lt;/em&gt;. But the album was released in 1973, so it was two years early (apparently it was the fiftieth anniversary of when Mike Oldfield started writing the piece). Secondly, Mike Oldfield wasn’t performing — but you needed to examine the publicity very carefully to work that out. And thirdly, there was a troupe of acrobats that were pointlessly leaping around the stage while the musicians played. All in all, I thought this was slightly disappointing.&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.songkick.com/concerts/38968289-heaven-17-at-roundhouse"&gt;&lt;strong&gt;Heaven 17 at the Roundhouse&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;Many of these shows were postponed from 2020. This was originally intended to celebrate the fortieth anniversary of the Human League album, &lt;em&gt;Travelogue&lt;/em&gt;, but it ended but being the forty-first anniversary. But none of that mattered. This was Heaven 17 playing all of the first two Human League albums and it was absolutely wonderful. Apparently, they had invited Phil Oakey to take part, but he wasn’t interested. That’s Heaven 17 in the photo above.&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.songkick.com/concerts/39828850-lump-at-scala"&gt;&lt;strong&gt;LUMP at the Scala&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;LUMP is Laura Marling playing with Tunng’s Mike Lindsay. I kinda assumed that their first album was going to be a one-off, but they produced a second album in 2020. This was the first gig I’d been to in a cramped venue like the Scala for a couple of years and it all got a bit too much for me. I really didn’t enjoy the atmosphere and left during the third or fourth song. I still love the album though and I hope to build up my tolerance for gig crowds over the coming months.&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.songkick.com/concerts/39773071-staves-at-o2-shepherds-bush-empire"&gt;&lt;strong&gt;The Staves at Shepherd’s Bush Empire&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;Actually, this was only two-thirds of the Staves. One of the sisters has had a baby recently and has decided to sit out tours for a couple of years. But the two remaining sisters still put on a great show.&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.songkick.com/concerts/39786793-laura-marling-at-roundhouse"&gt;&lt;strong&gt;Laura Marling at the Roundhouse&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;Given how few gigs I saw last year, it’s surprising how repetitive they were. Here’s Laura Marling again (and the Roundhouse again!) Although she has yet to match the heights of the &lt;em&gt;Short Movie&lt;/em&gt; tour, Laura Marling is always worth seeing and this show was no exception.&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.songkick.com/concerts/39662320-heaven-17-at-o2-shepherds-bush-empire"&gt;&lt;strong&gt;Heaven 17 at the Shepherd’s Bush&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;More repetition. I think the two Heaven 17 gigs were originally supposed to be several months apart, but the vagaries of the Covid scheduling changes led to them being just two months apart. This one celebrated the fortieth (actually forty-first) anniversary of Heaven 17 starting and was a glorious journey through their back catalogue. Oh, and the support was Pete Wylie, so I can finally say I’ve seen all three members of the &lt;a href="https://en.wikipedia.org/wiki/Crucial_Three"&gt;Crucial Three&lt;/a&gt; live.&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.songkick.com/concerts/39709208-orchestral-manoeuvres-in-the-dark-at-eventim-apollo"&gt;&lt;strong&gt;Orchestral Manoeuvres in the Dark at Hammersmith Apollo&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;OMD are just one of those bands that I see live whenever I can. I’ve now been seeing them for over forty years (since they supported Gary Numan in 1980). They have such a massive back catalogue that they can just play hit after hit for two hours. But this show was a bit different as they started by playing all of their 1981 album, &lt;em&gt;Architecture and Morality&lt;/em&gt;. They were as good as I’ve ever seen them.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And that was 2021. What will happen in 2022? Well, I have tickets for a dozen or so shows but who knows how many of them I’ll actually see? I’ve already had emails postponing the Wolf Alice and Peter Hook shows I was going to see this month. I guess I’ll just have to wait and see how the rest of the year pans out.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Originally published at &lt;/em&gt;&lt;a href="https://blog.dave.org.uk/2022/01/2021-in-gigs.html"&gt;&lt;em&gt;https://blog.dave.org.uk&lt;/em&gt;&lt;/a&gt;&lt;em&gt; on January 9, 2022.&lt;/em&gt;&lt;/p&gt;&lt;img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7ab20766b20f" width="1" height="1" alt=""&gt;</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://medium.com/p/7ab20766b20f</id>
    <published>2022-01-09T20:06:09Z</published>
    <updated>2022-06-13T13:17:27.465000Z</updated>
    <category term="music"/>
    <category term="2021"/>
    <category term="gigs"/>
    <category term="year-in-gigs"/>
    <category term="review"/>
  </entry>
  <entry>
    <title>Should Children be Polite While Using Smart Speakers?</title>
    <link rel="alternate" href="https://blog.dave.org.uk/2022/05/should-children-be-polite-while-using-smart-speakers.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>‘Okay Google. Where is Antarctica?”</p>
<p>Children can now get answers to all their questions using smart speakers and digital voice assistants.</p>
<p>A few years ago, children would run to their parents or grandparents to answer their questions. But with the ascendence of voice assistants to the mainstream in recent years, many children rely more on technology than humans.</p>
<p>Is this a good idea?</p>
<p>How does it impact the children?</p>
<p>When children interact with people, it helps them be more thoughtful, creative, and imaginative.</p>
<p>When they use artificial intelligence instead, several issues come into the foreground. These include access to age-inappropriate content and increasing the possibility of being rude or unpleasant, affecting how they treat others.</p>
<p>As mentioned, technology has both pros and cons. There are benefits to children using these devices, including improving diction, communication, social skills, and gaining information without bothering their parents.</p>
<p>Many families find that smart speakers like Amazon Echo and Google Home are useful. They use them for several functions, ranging from answering questions to setting the thermostat. Research shows that up to nine out of ten children between the ages of four and eleven in the US are regularly using smart speakers — often without parental guidance and control. So, what is the best approach for a parent to take?</p>
<p>Children up to seven years old can find it challenging to differentiate between humans and devices, and this can lead to one of the biggest dangers. If the device fulfils their requests through rude behaviour, children may behave similarly to other humans.</p>
<h2>Do Parents Think Smart Devices Should Encourage Polite Conversations?</h2>
<p>Most parents consider it essential that smart devices should encourage polite conversations as a part of nurturing good habits in children. The Campaign for a Commercial-Free Childhood or CCFA is a US coalition of concerned parents, healthcare professionals, and educators. Recently, CCFA protested against Amazon Echo Dot Kids Edition, stating that it may affect children’s wellbeing. Because of this, they requested parents avoid buying Amazon Echo.</p>
<p>However, in reality, these smart devices have improved a lot and focus on encouraging polite conversations with children. It is all about how parents use and present these devices to their children, as these factors can influence them a lot.</p>
<p>But in simple terms, parents wish these devices to encourage politeness in their children. At the same time, they want their kids to understand the difference between artificial intelligence and humans while using these technological innovations.</p>
<h2>Do Parents Think Their Children are Less Polite While Using Smart Speakers?</h2>
<p>Many parents have seen their children behave rudely to smart speakers. Several parents have expressed their concerns through social media, blog posts and forums like Mumsnet. They fear these behaviours can impact their kids when they grow up.</p>
<p>A report published in Child Wise reached the conclusion that children who behave rudely to smart devices might be aggressive while they grow up, especially while dealing with other humans. It is, therefore, preferable if children use polite words while interacting with both humans and smart devices.</p>
<h2>What Approaches Have Been Taken By Tech Companies to Address the Problem?</h2>
<p>With interventions and rising concerns addressed by parents and health professionals, some tech companies have brought changes to virtual assistants and smart speakers.</p>
<p>The parental control features available in Alexa focus on training kids to be more polite. Amazon brands it as Magic Word, where the focus is on bringing positive enforcement. However, there is no penalty if children don’t speak politely. Available on Amazon Echo, this tool has added features like setting bedtimes, switching off devices, and blocking songs with explicit lyrics.</p>
<p>When it comes to Google Home, it has brought in a new feature called Pretty Please. Here, Google will perform an action only when children use, please. For instance, “Okay, Google. Please set the timer for 15 minutes.”</p>
<p>You can enable this feature through the Google Family Link, where you can find the settings for Home and Assistant. You can set these new standards for devices of your preference. Also, once you use it and figure things out, there will be no more issues in setting it up again.</p>
<p>These tools and their approaches are highly beneficial for kids and parents. As of now, these devices only offer basic features and limited replies. But with time, there could be technological changes that encourage children to have much more efficient and polite interactions.</p>
<h2>George and the Smart Home</h2>
<p>It was thinking about issues like this which led me to write my first children’s book — George and the Smart Home. In the book, George is a young boy who has problems getting the smart speakers in his house to do what he wants until he learns to be polite to them.</p>
<p>It is available now, as a paperback and a Kindle book, from Amazon.</p>
<p>Buy it from: <a href="https://amazon.com.au/dp/B09VPLGMBN">AU</a> / <a href="https://amazon.com.br/dp/B09VPLGMBN">BR</a> / <a href="https://amazon.ca/dp/B09VPLGMBN">CA</a> / <a href="https://amazon.de/dp/B09VPLGMBN">DE</a> / <a href="https://amazon.es/dp/B09VPLGMBN">ES</a> / <a href="https://amazon.fr/dp/B09VPLGMBN">FR</a> / <a href="https://amazon.in/dp/B09VPLGMBN">IN</a> / <a href="https://amazon.it/dp/B09VPLGMBN">IT</a> / <a href="https://amazon.co.jp/dp/B09VPLGMBN">JP</a> / <a href="https://amazon.com.mx/dp/B09VPLGMBN">MX</a> / <a href="https://amazon.nl/dp/B09VPLGMBN">NL</a> / <a href="https://amazon.co.uk/dp/B09VPLGMBN">UK</a> / <a href="https://amazon.com/dp/B09VPLGMBN">US</a></p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2022/05/should-children-be-polite-while-using-smart-speakers.html">Should Children be Polite While Using Smart Speakers?</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>‘Okay Google. Where is Antarctica?” Children can now get answers to all their questions using smart speakers and digital voice assistants. A few years ago, children would run to their parents or grandparents to answer their questions. But with the ascendence of voice assistants to the mainstream in recent years, many children rely more on… <a class="more-link" href="https://blog.dave.org.uk/2022/05/should-children-be-polite-while-using-smart-speakers.html">Continue reading <span class="screen-reader-text">Should Children be Polite While Using Smart Speakers?</span></a></p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2022/05/should-children-be-polite-while-using-smart-speakers.html">Should Children be Polite While Using Smart Speakers?</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://blog.dave.org.uk/?p=3885</id>
    <published>2022-05-02T13:09:10Z</published>
    <updated>2022-05-02T13:09:10Z</updated>
    <category term="media"/>
    <category term="books"/>
    <category term="children"/>
    <category term="george and the smart home"/>
    <category term="smart speakers"/>
  </entry>
  <entry>
    <title>DAVECROSS has released Plack-Middleware-DirIndex-1.01</title>
    <link rel="alternate" href="https://metacpan.org/release/DAVECROSS/Plack-Middleware-DirIndex-1.01" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Append an index file to request PATH's ending with a /</div>
    </content>
    <author>
      <name>DAVECROSS</name>
    </author>
    <id>https://metacpan.org/release/DAVECROSS/Plack-Middleware-DirIndex-1.01</id>
    <published>2022-03-26T16:38:35Z</published>
    <updated>2022-03-26T16:38:35Z</updated>
  </entry>
  <entry>
    <title>S.</title>
    <link rel="alternate" href="https://www.goodreads.com/review/show/4481423010?utm_medium=api&amp;utm_source=rss" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
      
      <a href="https://www.goodreads.com/book/show/17860739-s?utm_medium=api&amp;utm_source=rss"><img alt="S." src="https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1378767595l/17860739._SY75_.jpg"/></a><br/>
                                      author: J.J. Abrams<br/>
                                      name: David<br/>
                                      average rating: 3.86<br/>
                                      book published: 2013<br/>
                                      rating: 0<br/>
                                      read at: <br/>
                                      date added: 2022/01/16<br/>
                                      shelves: currently-reading<br/>
                                      review: <br/><br/>
                                      
    </div>
    </content>
    <id>https://www.goodreads.com/review/show/4481423010?utm_medium=api&amp;utm_source=rss</id>
    <published>2022-01-16T14:03:01-08:00</published>
    <updated>2022-01-16T14:03:01-08:00</updated>
  </entry>
  <entry>
    <title>2021 in Gigs</title>
    <link rel="alternate" href="https://blog.dave.org.uk/2022/01/2021-in-gigs.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>A little later than usual, here’s my review of the gigs I saw last year.</p>
<p>In 2020, I saw four gigs. In 2021, I almost doubled that to seven. Obviously, we spent a lot of the year with most music venues closed, so those few gigs I saw were all in the second half of the year. Usually, I’d list my top ten gigs. This year (as last year) I’ll be listing them all. So here they are in chronological order.</p>
<ul>
<li><strong><a href="https://www.songkick.com/concerts/39755096-mike-oldfield-at-royal-festival-hall-southbank-centre">Tubular Bells at the Royal Festival Hall</a></strong><br/>
This was a strange show for several reasons. Firstly, it was advertised as commemorating the fiftieth anniversary of <em>Tubular Bells</em>. But the album was released in 1973, so it was two years early (apparently it was the fiftieth anniversary of when Mike Oldfield started writing the piece). Secondly, Mike Oldfield wasn’t performing – but you needed to examine the publicity very carefully to work that out. And thirdly, there was a troupe of acrobats that were pointlessly leaping around the stage while the musicians played. All in all, I thought this was slightly disappointing.</li>
<li><strong><a href="https://www.songkick.com/concerts/38968289-heaven-17-at-roundhouse">Heaven 17 at the Roundhouse</a></strong><br/>
Many of these shows were postponed from 2020. This was originally intended to celebrate the fortieth anniversary of the Human League album, <em>Travelogue</em>, but it ended but being the forty-first anniversary. But none of that mattered. This was Heaven 17 playing all of the first two Human League albums and it was absolutely wonderful. Apparently, they had invited Phil Oakey to take part, but he wasn’t interested. That’s Heaven 17 in the photo above.</li>
<li><strong><a href="https://www.songkick.com/concerts/39828850-lump-at-scala">LUMP at the Scala</a></strong><br/>
LUMP is Laura Marling playing with Tunng’s Mike Lindsay. I kinda assumed that their first album was going to be a one-off, but they produced a second album in 2020. This was the first gig I’d been to in a cramped venue like the Scala for a couple of years and it all got a bit too much for me. I really didn’t enjoy the atmosphere and left during the third or fourth song. I still love the album though and I hope to build up my tolerance for gig crowds over the coming months.</li>
<li><strong><a href="https://www.songkick.com/concerts/39773071-staves-at-o2-shepherds-bush-empire">The Staves at Shepherd’s Bush Empire</a></strong><br/>
Actually, this was only two-thirds of the Staves. One of the sisters has has a baby recently and has decided to sit out tours for a couple of years. But the two remaining sisters still put on a great show.</li>
<li><strong><a href="https://www.songkick.com/concerts/39786793-laura-marling-at-roundhouse">Laura Marling at the Roundhouse</a></strong><br/>
Given how few gigs I saw last year, it’s surprising how repetitive they were. Here’s Laura Marling again (and the Roundhouse again!) Although she has yet to match the heights of the <em>Short Movie</em> tour, Laura Marling is always worth seeing and this show was no exception.</li>
<li><strong><a href="https://www.songkick.com/concerts/39662320-heaven-17-at-o2-shepherds-bush-empire">Heaven 17 at the Shepherd’s Bush</a></strong><strong><a href="https://www.songkick.com/concerts/39662320-heaven-17-at-o2-shepherds-bush-empire"> Empire</a></strong><br/>
More repetition. I think the two Heaven 17 gigs were originally supposed to be several months apart, but the vagaries of the Covid scheduling changes led to them being just two months apart. This one celebrated the fortieth (actually forty-first) anniversary of Heaven 17 starting and was a glorious journey through their back catalogue. Oh, and the support was Pete Wylie, so I can finally say I’ve seen all three members of the <a href="https://en.wikipedia.org/wiki/Crucial_Three">Crucial Three</a> live.</li>
<li><strong><a href="https://www.songkick.com/concerts/39709208-orchestral-manoeuvres-in-the-dark-at-eventim-apollo">Orchestral Manoeuvres in the Dark at Hammersmith Apollo</a></strong><br/>
OMD are just one of those bands that I see live whenever I can. I’ve now been seeing them for over forty years (since they supported Gary Numan in 1980). They have such a massive back catalogue that they can just play hit after hit for two hours. But this show was a bit different as they started by playing all of their 1981 album, <em>Architecture and Morality</em>. They were as good as I’ve ever seen them.</li>
</ul>
<p>And that was 2021. What will happen in 2022? Well, I have tickets for a dozen or shows but who knows how many of them I’ll actually see? I’ve already had emails postponing the Wolf Alice and Peter Hook shows I was going to see this month. I guess I’ll just have to wait and see how the rest of the year pans out.</p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2022/01/2021-in-gigs.html">2021 in Gigs</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>A little later than usual, here’s my review of the gigs I saw last year. In 2020, I saw four gigs. In 2021, I almost doubled that to seven. Obviously, we spent a lot of the year with most music venues closed, so those few gigs I saw were all in the second half of… <a class="more-link" href="https://blog.dave.org.uk/2022/01/2021-in-gigs.html">Continue reading <span class="screen-reader-text">2021 in Gigs</span></a></p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2022/01/2021-in-gigs.html">2021 in Gigs</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://blog.dave.org.uk/?p=3864</id>
    <published>2022-01-09T20:06:09Z</published>
    <updated>2022-01-09T20:06:09Z</updated>
    <category term="music"/>
    <category term="2021"/>
    <category term="gigs"/>
    <category term="review"/>
    <category term="year in gigs"/>
  </entry>
  <entry>
    <title>The Return of RTD</title>
    <link rel="alternate" href="https://blog.dave.org.uk/2021/09/the-return-of-rtd.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><em>Doctor Who</em> has a new showrunner. But he’s actually an old showrunner. Is that a good idea?</p>
<p>Since <a href="https://www.bbc.co.uk/news/entertainment-arts-58682472">the news broke</a> yesterday, <em>Doctor Who</em> fan forums have been discussing nothing but the fact that Russell T Davies is returning as showrunner after Chris Chibnall’s regeneration special is broadcast next year. Most fans seem to be very excited by this prospect; I’m not so sure.</p>
<p>Before I start, I should point out that I’ve been a big fan of Russell T Davies since long before he brought <em>Doctor Who</em> back to our screens in 2005. I’ll always be grateful for the work he did to bring the show back and I believe that he’s responsible for some great moments in <em>Doctor Who</em> history.</p>
<p>But I’m not sure I want to see him back as the showrunner. Let me explain why I’m so out of step with most of the show’s fans.</p>
<p>Firstly, although I’m grateful to him for bringing the show back, he’s not my favourite showrunner. Obviously, any <em>Doctor Who</em> is better than no <em>Doctor Who</em> but there was a lot of stuff in Davies’ first run that I didn’t like. For example, He was the person who first introduced us to companions’ families, which brought a slight soap opera feel to some of the episodes. Also, I thought that he often wrote himself into a bit of a corner. This was most apparent in the end of season two-parters. There were many occasions when the first part set up a fantastic premise only to be let down by a finale that just couldn’t live up to the promise. <em>The Stolen Earth</em> was great; <em>Journey’s End</em> was terrible. Then there’s <em>The End of Time</em>. Again, it started off well but had verged well into the ridiculous by the end of the first part. And don’t get me started on the self-indulgent, mawkish nonsense that made up the last twenty minutes of that story — leading to the Tenth Doctor’s regeneration.</p>
<p>I admit, however, that my opinions on Davies’ writing are purely personal. And, because of the massive rise in popularity of the show during his tenure, many viewers see his approach as the gold standard for how the show should work. My other points are, I hope, less opinion-based.</p>
<p>Secondly, <em>Doctor Who</em> is a show that should always be moving forward. In the classic era of the show, previous Doctors and companions would reappear very rarely. When someone left the show, you knew the chances of seeing them again were very slim. When an executive producer left (we didn’t call them showrunners back then) you knew that the show would change in new and experimental ways. Sometimes the changes didn’t work; most of the time they did. Change is fundamental to the show. It’s how the show has kept going for (most of) sixty years.</p>
<p>The newer sections of the audience don’t seem to realise that. I constantly hear fans wanting things to go back to how things were. As soon as Rose was written out at the end of series two, there were calls for her to come back. And while series four has some pretty good stuff in it, I think that bringing Rose back was pandering to the fanbase in an unhealthy way. We now have a situation where fans expect every character who has been written out of the show to be brought back at their whim. There aren’t very many weeks that pass without me seeing someone in a Facebook group suggesting some convoluted way that David Tennant could be brought back to be the Doctor again.</p>
<p>The show must always move forward. It must always change. I believe that RTD knows that, so I hope that his second era in charge will be sufficiently different to his first. But I worry that fans will start asking for Tennant back as the Doctor with Billie Piper by his side. For some fans, that seems to be the only version of the show they will be happy with.</p>
<p>Finally, I worry about what RTD’s reappointment means for the future of the show. When Chibnall’s departure was announced, all of the news stories claimed that he and Whittaker had a “three and out agreement” between themselves and that he only ever planned to do three years running the show. That’s rather at odds with the talk of him having a five-year plan for the show when he was appointed to the role. I realise that he will have done five years in the post by the time he goes, but he will have made three seasons and a handful of specials — so I’m not sure that counts.</p>
<p>No, I think it’s clear that Chibnall has been hounded out of the role by that toxic sector of the fanbase that refuses to give his work on the show a decent chance. And, given that Moffat also put up with a lot of abuse from certain fans, I begin to wonder how easy it is to find someone to take over the job. Chibnall’s departure was announced at the end of July and the BBC would certainly have known about it for some time before that. But they have failed to find someone new and exciting to take over the job and I wonder if it has become a bit of a poison chalice. People want to do the job because, hey, it’s running Doctor Who! But, on the other hand, if you don’t please the fanbase (and no-one can please all of the fanbase) then you’ll be vilified online and hounded off social media. Add to that the fact that both Davies and Moffat cited insane working schedules as part of their reason for leaving and, suddenly, the job doesn’t look quite as tempting.</p>
<p>I have no inside information here at all, but I wonder if the reappointment of RTD was an act of desperation on the part of the BBC. We know that Chibnall is steering the show up to and including a BBC centenary special that will be broadcast in 2022. But the show’s 60th anniversary is the year after that and without a showrunner, you can’t cast a new Doctor and without a new Doctor in place pretty soon, the 60th-anniversary celebrations would seem to be in danger.</p>
<p>The news of the reappointment has all been very celebratory, of course, but I wonder if that’s actually the case. I wonder if the BBC’s approach to RTD was more like this:</p>
<p>“So, that show you resurrected back in 2005. Well, we can’t find anyone to take over as showrunner, and unless we get things moving pretty quickly we’re not going to have a 60th anniversary worth speaking off. Seriously, we’re thinking of just cancelling it… unless you can suggest something that we could do…”</p>
<p>This, of course, leaves RTD thinking that the only way to save his baby is to step in himself. Maybe he’s stepped in as a stop-gap until the BBC finds someone else to take over. The announcement says he’s signed on for the 60th special and following series. But that’s a bit vague (because the English language doesn’t have a plural for “series”!) so who knows how long he’ll hang around for. Time will tell, I guess.</p>
<p>But, if you’re one of those fans who think it’s big or clever to be unrelentingly negative about the showrunner on social media, please stop and consider whether you’re part of a problem that could end up with no-one wanting the job and the show being cancelled.</p>
<p>All-in-all, I wish that the BBC hadn’t done this. I would have far preferred to see the show moving forward. But if, as I suspect, the alternative was no new Doctor Who for the foreseeable future, then obviously this is a good plan. I’m keen to see what Davies has in store.</p>
<p>But first I’m really excited to see what Chibnall has in store for his final series and the subsequent specials. If series 13 improves on series 12 to the extent that series 12 improved on series 11, then it’s going to be great.</p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2021/09/the-return-of-rtd.html">The Return of RTD</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Doctor Who has a new showrunner. But he’s actually an old showrunner. Is that a good idea? Since the news broke yesterday, Doctor Who fan forums have been discussing nothing but the fact that Russell T Davies is returning as showrunner after Chris Chibnall’s regeneration special is broadcast next year. Most fans seem to be… <a class="more-link" href="https://blog.dave.org.uk/2021/09/the-return-of-rtd.html">Continue reading <span class="screen-reader-text">The Return of RTD</span></a></p>
<p>The post <a rel="nofollow" href="https://blog.dave.org.uk/2021/09/the-return-of-rtd.html">The Return of RTD</a> appeared first on <a rel="nofollow" href="https://blog.dave.org.uk">Davblog</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://blog.dave.org.uk/?p=3882</id>
    <published>2021-09-25T12:59:24Z</published>
    <updated>2021-09-25T12:59:24Z</updated>
    <category term="media"/>
    <category term="Uncategorized"/>
  </entry>
  <entry>
    <title>Replacing CPAN RT</title>
    <link rel="alternate" href="https://perlhacks.com/2020/12/replacing-cpan-rt/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>[<strong>Update:</strong> the CPAN Request Tracker was saved. It’s now run by a new team of volunteers and none of my suggestions below are required.]</p>
<p>Two weeks ago, we learned that the <a href="https://log.perl.org/2020/12/rtcpanorg-sunset.html">CPAN Request Tracker was closing down early next year</a>. I proposed <a href="https://perlhacks.com/2020/12/rt-action-plan-for-cpan-authors/">a plan that CPAN authors could follow</a> to ensure that their users can still find somewhere to report bugs in modules (and, perhaps more importantly, to see what bugs have already been reported in modules).</p>
<p>But that’s only part of the problem. In fact, it’s probably a minor part of the problem. If you’re an active CPAN author, then you probably already knew about the impending closure and had already made plans to deal with it. It’s likely that you had already moved your bug tracking to a new system. At the very least, you now know what the problem is and are considering the best way to deal with it before next March.</p>
<p>The far larger problem is the thousands of distributions that aren’t owned by active CPAN authors. What are we going to do about those?</p>
<p>How big is the problem? Well, the site <a href="https://cpan.rocks/">cpan.rocks</a> displays stats about CPAN. One of the panels on its front page shows a summary of the bugtracker information in CPAN distribution. You’ll see that 24,873 distributions (that’s 66% of them) have no bugtracker information included in their metadata. That’ll be for a number of reasons. Some of them will be distributions that haven’t been updated since alternative bugtrackers were supported by CPAN (originally, it was just assumed that everyone used the CPAN RT); some of them will be because the authors don’t know how to add the required metadata; and some of them (including most of my distributions) are missing it because the author just hasn’t got round to adding it yet. There will, of course, be many more reasons.</p>
<p>Some people will have read the recent news and will be galvanised into doing something about it (I fall firmly into that category) but others (and I’d suggest that it’s a large majority) either won’t hear about the change or won’t care about it. And why should they care? They were generous enough to donate some of their code to CPAN at some point. They don’t have any obligation at all to carry on maintaining it after they’ve lost interest in whatever project led to them writing that software.</p>
<p>Take, for example, <a href="https://metacpan.org/release/Mail-Alias">Mail-Alias</a>. That was released by someone called Tom Zeltwanger twenty years ago. He released three versions over a period of two months and then stopped. Who knows why. When he last updated the module, the CPAN search engine didn’t support alternative bugtrackers, so he never considered adding one. And that meant that the CPAN page for his module linked to the default bugtracker set up for the distribution on the CPAN RT. In the last fifteen years, <a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Mail-Alias">four bugs have been reported</a> against that module. But as Tom has moved on, nothing has been done about any of them. There are a lot of modules on CPAN in a similar situation.</p>
<p>But that leaves <a href="https://metacpan.org/">MetaCPAN</a> (the current CPAN search engine) with a problem. Where does it send people who want to report a bug against an inactive module?</p>
<p>You might think that it doesn’t matter. But I disagree. Maybe I think that Mail::Alias would be the perfect module for a project I’m working on. Even before I start using it, it’s useful to be able to browse any existing bugs to see how they might affect my use of the module. And if someone later comes along and wants to take over maintenance of the module, then it’s useful for them to see any bugs that have been raised during the hiatus when the module was unmaintained.</p>
<p>So, I’m a big fan of having a default bugtracker for CPAN modules – even for ones with inactive authors. Which leads us to the question of where should that be. And I have a suggestion.</p>
<p>A few years ago, Micheal Schwern and Olaf Alders set up <a href="https://github.com/gitpan">Gitpan</a>. It’s an organisation which has a Github repo for every distribution on CPAN. And those repos each have a commit for every release of those distributions. Here, for example, is <a href="https://github.com/gitpan/Mail-Alias">the repo for Mail-Alias</a> – and you can see the three commits for the three releases I mentioned above.</p>
<p>So I’d like to suggest Gitpan as a suitable place to use as a default bugtracker for CPAN distributions. There are a couple of problems:</p>
<ul>
<li>It looks like the auto-population of the commits stopped a few years ago. We’d need to work out how that works and catch up on the recent uploads.</li>
<li>None of the repos has the issue tracker turned on. But I expect that can be done with a relatively simple program that uses the GitHub API.</li>
</ul>
<p>Of course, we also have the problem that some people object to using GitHub since it was taken over by Microsoft. But that’s fine, they can just point their bugtracker metadata to their preferred system.</p>
<p>The problem with the CPAN RT was that it needed too much maintenance – and the Perl NOC team is really overworked. Any self-hosted alternative seems likely to have the same problem eventually. So I’m all in favour of using a third-party alternative. And if you’re taking that route, then it makes sense (to me, at least) to use a third-party system that already has all (ok, most) of the repos set up.</p>
<p>I haven’t spoken to Schwern or Olaf about this, so I don’t know if there was some major problem that would stop this plan from working. But I think it’s worth looking at.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2020/12/replacing-cpan-rt/">Replacing CPAN RT</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>[Update: the CPAN Request Tracker was saved. It’s now run by a new team of volunteers and none of my suggestions below are required.] Two weeks ago, we learned that the CPAN Request Tracker was closing down early next year. I proposed a plan that CPAN authors could follow to ensure that their users can… <a class="more-link" href="https://perlhacks.com/2020/12/replacing-cpan-rt/">Continue reading <span class="screen-reader-text">Replacing CPAN RT</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2020/12/replacing-cpan-rt/">Replacing CPAN RT</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2026</id>
    <published>2020-12-16T17:24:20Z</published>
    <updated>2020-12-16T17:24:20Z</updated>
    <category term="CPAN"/>
    <category term="bugtracker"/>
    <category term="cpan"/>
    <category term="cpan rt"/>
    <category term="github"/>
    <category term="gitpan"/>
  </entry>
  <entry>
    <title>The Introvert Entrepreneur</title>
    <link rel="alternate" href="https://www.goodreads.com/review/show/3162730028?utm_medium=api&amp;utm_source=rss" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
      
      <a href="https://www.goodreads.com/book/show/24970944-the-introvert-entrepreneur?utm_medium=api&amp;utm_source=rss"><img alt="The Introvert Entrepreneur" src="https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1533022525l/24970944._SY75_.jpg"/></a><br/>
                                      author: Beth Buelow<br/>
                                      name: David<br/>
                                      average rating: 3.44<br/>
                                      book published: 2015<br/>
                                      rating: 0<br/>
                                      read at: <br/>
                                      date added: 2020/01/27<br/>
                                      shelves: currently-reading<br/>
                                      review: <br/><br/>
                                      
    </div>
    </content>
    <id>https://www.goodreads.com/review/show/3162730028?utm_medium=api&amp;utm_source=rss</id>
    <published>2020-01-27T02:49:21-08:00</published>
    <updated>2020-01-27T02:49:21-08:00</updated>
  </entry>
  <entry>
    <title>Measuring the Quality of Your Perl Code</title>
    <link rel="alternate" href="https://www.slideshare.net/davorg/measuring-the-quality-of-your-perl-code-162990735" type="text/html"/>
    <content type="html">
        &lt;img style="border:1px solid #C3E6D8;float:right;" alt="" src="https://cdn.slidesharecdn.com/ss_thumbnails/measuringthequalityofyourperlcode-190811142319-thumbnail.jpg?width=120&amp;amp;height=120&amp;amp;fit=bounds" /&gt;&lt;br&gt; Some thoughts on ways to measure the quality of Perl code (and, hence, get a basis for improving it)
      </content>
    <summary type="html">
        &lt;img style="border:1px solid #C3E6D8;float:right;" alt="" src="https://cdn.slidesharecdn.com/ss_thumbnails/measuringthequalityofyourperlcode-190811142319-thumbnail.jpg?width=120&amp;amp;height=120&amp;amp;fit=bounds" /&gt;&lt;br&gt; Some thoughts on ways to measure the quality of Perl code (and, hence, get a basis for improving it)
      </summary>
    <author>
      <name>davorg@slideshare.net(davorg)</name>
    </author>
    <id>https://www.slideshare.net/davorg/measuring-the-quality-of-your-perl-code-162990735</id>
    <published>2019-08-11T14:23:19Z</published>
    <updated>2019-08-11T14:23:19Z</updated>
  </entry>
  <entry>
    <title>Apollo 11 at 50 - A Simple Twitter Bot</title>
    <link rel="alternate" href="https://www.slideshare.net/davorg/apollo-11-at-50-a-simple-twitter-bot" type="text/html"/>
    <content type="html">
        &lt;img style="border:1px solid #C3E6D8;float:right;" alt="" src="https://cdn.slidesharecdn.com/ss_thumbnails/apollo-190811141300-thumbnail.jpg?width=120&amp;amp;height=120&amp;amp;fit=bounds" /&gt;&lt;br&gt; How (and why) I spent 90 minutes writing a Twitterbot that tweeted the Apollo 11 mission timeline (shifted by 50 years)
      </content>
    <summary type="html">
        &lt;img style="border:1px solid #C3E6D8;float:right;" alt="" src="https://cdn.slidesharecdn.com/ss_thumbnails/apollo-190811141300-thumbnail.jpg?width=120&amp;amp;height=120&amp;amp;fit=bounds" /&gt;&lt;br&gt; How (and why) I spent 90 minutes writing a Twitterbot that tweeted the Apollo 11 mission timeline (shifted by 50 years)
      </summary>
    <author>
      <name>davorg@slideshare.net(davorg)</name>
    </author>
    <id>https://www.slideshare.net/davorg/apollo-11-at-50-a-simple-twitter-bot</id>
    <published>2019-08-11T14:13:00Z</published>
    <updated>2019-08-11T14:13:00Z</updated>
  </entry>
  <entry>
    <title>Monoliths, Balls of Mud and Silver Bullets</title>
    <link rel="alternate" href="https://www.slideshare.net/davorg/monoliths-balls-of-mud-and-silver-bullets-162989542" type="text/html"/>
    <content type="html">
        &lt;img style="border:1px solid #C3E6D8;float:right;" alt="" src="https://cdn.slidesharecdn.com/ss_thumbnails/monoliths-190811141027-thumbnail.jpg?width=120&amp;amp;height=120&amp;amp;fit=bounds" /&gt;&lt;br&gt; A talk from the European Perl Conference 2019 (but not about Perl)
      </content>
    <summary type="html">
        &lt;img style="border:1px solid #C3E6D8;float:right;" alt="" src="https://cdn.slidesharecdn.com/ss_thumbnails/monoliths-190811141027-thumbnail.jpg?width=120&amp;amp;height=120&amp;amp;fit=bounds" /&gt;&lt;br&gt; A talk from the European Perl Conference 2019 (but not about Perl)
      </summary>
    <author>
      <name>davorg@slideshare.net(davorg)</name>
    </author>
    <id>https://www.slideshare.net/davorg/monoliths-balls-of-mud-and-silver-bullets-162989542</id>
    <published>2019-08-11T14:10:27Z</published>
    <updated>2019-08-11T14:10:27Z</updated>
  </entry>
  <entry>
    <title>Prawn Cocktail Years</title>
    <link rel="alternate" href="https://www.goodreads.com/review/show/2915458648?utm_medium=api&amp;utm_source=rss" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
      
      <a href="https://www.goodreads.com/book/show/2378986.Prawn_Cocktail_Years?utm_medium=api&amp;utm_source=rss"><img alt="Prawn Cocktail Years" src="https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1488615133l/2378986._SX50_.jpg"/></a><br/>
                                      author: Lindsey Bareham<br/>
                                      name: David<br/>
                                      average rating: 4.50<br/>
                                      book published: 1999<br/>
                                      rating: 0<br/>
                                      read at: <br/>
                                      date added: 2019/07/29<br/>
                                      shelves: currently-reading<br/>
                                      review: <br/><br/>
                                      
    </div>
    </content>
    <id>https://www.goodreads.com/review/show/2915458648?utm_medium=api&amp;utm_source=rss</id>
    <published>2019-07-29T03:53:53-07:00</published>
    <updated>2019-07-29T03:53:53-07:00</updated>
  </entry>
  <entry>
    <title>Write. Publish. Repeat. (The No-Luck-Required Guide to Self-Publishing Success)</title>
    <link rel="alternate" href="https://www.goodreads.com/review/show/2869758893?utm_medium=api&amp;utm_source=rss" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
      
      <a href="https://www.goodreads.com/book/show/19173266-write-publish-repeat?utm_medium=api&amp;utm_source=rss"><img alt="Write. Publish. Repeat. (The No-Luck-Required Guide to Self-Publishing Success)" src="https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1386152927l/19173266._SY75_.jpg"/></a><br/>
                                      author: Sean Platt<br/>
                                      name: David<br/>
                                      average rating: 4.29<br/>
                                      book published: 2013<br/>
                                      rating: 0<br/>
                                      read at: <br/>
                                      date added: 2019/06/24<br/>
                                      shelves: currently-reading<br/>
                                      review: <br/><br/>
                                      
    </div>
    </content>
    <id>https://www.goodreads.com/review/show/2869758893?utm_medium=api&amp;utm_source=rss</id>
    <published>2019-06-24T02:26:15-07:00</published>
    <updated>2019-06-24T02:26:15-07:00</updated>
  </entry>
  <entry>
    <title>The Professional Programmer</title>
    <link rel="alternate" href="https://www.slideshare.net/davorg/the-professional-programmer-115012386" type="text/html"/>
    <content type="html">
        &lt;img style="border:1px solid #C3E6D8;float:right;" alt="" src="https://cdn.slidesharecdn.com/ss_thumbnails/tcvqmtxtxcoosqtktwxp-signature-54ef8a2e0bf04eca12a971b40d334e9524d5654cafb99fc7ca3028a7826fc3ab-poli-180917160117-thumbnail.jpg?width=120&amp;amp;height=120&amp;amp;fit=bounds" /&gt;&lt;br&gt; The slides from a half-day workshop on career development for programmers that I ran at The Perl Conference in Glasgow
      </content>
    <summary type="html">
        &lt;img style="border:1px solid #C3E6D8;float:right;" alt="" src="https://cdn.slidesharecdn.com/ss_thumbnails/tcvqmtxtxcoosqtktwxp-signature-54ef8a2e0bf04eca12a971b40d334e9524d5654cafb99fc7ca3028a7826fc3ab-poli-180917160117-thumbnail.jpg?width=120&amp;amp;height=120&amp;amp;fit=bounds" /&gt;&lt;br&gt; The slides from a half-day workshop on career development for programmers that I ran at The Perl Conference in Glasgow
      </summary>
    <author>
      <name>davorg@slideshare.net(davorg)</name>
    </author>
    <id>https://www.slideshare.net/davorg/the-professional-programmer-115012386</id>
    <published>2018-09-17T16:01:17Z</published>
    <updated>2018-09-17T16:01:17Z</updated>
  </entry>
  <entry>
    <title>I'm A Republic (Honest!)</title>
    <link rel="alternate" href="https://www.slideshare.net/davorg/im-a-republic-honest" type="text/html"/>
    <content type="html">
        &lt;img style="border:1px solid #C3E6D8;float:right;" alt="" src="https://cdn.slidesharecdn.com/ss_thumbnails/succession-180323080646-thumbnail.jpg?width=120&amp;amp;height=120&amp;amp;fit=bounds" /&gt;&lt;br&gt; A (not entirely serious) talk that I gave at the London Perl Mongers technical meeting in March 2018.

It talks about how and why I build a web site listing the line of succession to the British throne back through history.
      </content>
    <summary type="html">
        &lt;img style="border:1px solid #C3E6D8;float:right;" alt="" src="https://cdn.slidesharecdn.com/ss_thumbnails/succession-180323080646-thumbnail.jpg?width=120&amp;amp;height=120&amp;amp;fit=bounds" /&gt;&lt;br&gt; A (not entirely serious) talk that I gave at the London Perl Mongers technical meeting in March 2018.

It talks about how and why I build a web site listing the line of succession to the British throne back through history.
      </summary>
    <author>
      <name>davorg@slideshare.net(davorg)</name>
    </author>
    <id>https://www.slideshare.net/davorg/im-a-republic-honest</id>
    <published>2018-03-23T08:06:46Z</published>
    <updated>2018-03-23T08:06:46Z</updated>
  </entry>
</feed>
